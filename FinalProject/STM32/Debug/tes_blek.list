
tes_blek.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006adc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c2c  08006c7c  08006c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088a8  080088a8  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  080088a8  080088a8  000188a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088b0  080088b0  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088b0  080088b0  000188b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088b4  080088b4  000188b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080088b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000748  200000a0  08008958  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  08008958  000207e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012c33  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b6d  00000000  00000000  00032d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  000358b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017844  00000000  00000000  00036960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014afb  00000000  00000000  0004e1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091a39  00000000  00000000  00062c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000d06  00000000  00000000  000f46d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bc8  00000000  00000000  000f53e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000f9fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006c64 	.word	0x08006c64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	08006c64 	.word	0x08006c64

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a80:	f000 b970 	b.w	8000d64 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	460d      	mov	r5, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	460f      	mov	r7, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4694      	mov	ip, r2
 8000ab0:	d965      	bls.n	8000b7e <__udivmoddi4+0xe2>
 8000ab2:	fab2 f382 	clz	r3, r2
 8000ab6:	b143      	cbz	r3, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	f1c3 0220 	rsb	r2, r3, #32
 8000ac0:	409f      	lsls	r7, r3
 8000ac2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ac6:	4317      	orrs	r7, r2
 8000ac8:	409c      	lsls	r4, r3
 8000aca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ace:	fa1f f58c 	uxth.w	r5, ip
 8000ad2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ad6:	0c22      	lsrs	r2, r4, #16
 8000ad8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000adc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ae0:	fb01 f005 	mul.w	r0, r1, r5
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	d90a      	bls.n	8000afe <__udivmoddi4+0x62>
 8000ae8:	eb1c 0202 	adds.w	r2, ip, r2
 8000aec:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000af0:	f080 811c 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000af4:	4290      	cmp	r0, r2
 8000af6:	f240 8119 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000afa:	3902      	subs	r1, #2
 8000afc:	4462      	add	r2, ip
 8000afe:	1a12      	subs	r2, r2, r0
 8000b00:	b2a4      	uxth	r4, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b0e:	fb00 f505 	mul.w	r5, r0, r5
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x90>
 8000b16:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b1e:	f080 8107 	bcs.w	8000d30 <__udivmoddi4+0x294>
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	f240 8104 	bls.w	8000d30 <__udivmoddi4+0x294>
 8000b28:	4464      	add	r4, ip
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b30:	1b64      	subs	r4, r4, r5
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11e      	cbz	r6, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40dc      	lsrs	r4, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0xbc>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80ed 	beq.w	8000d26 <__udivmoddi4+0x28a>
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b52:	4608      	mov	r0, r1
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	fab3 f183 	clz	r1, r3
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	d149      	bne.n	8000bf4 <__udivmoddi4+0x158>
 8000b60:	42ab      	cmp	r3, r5
 8000b62:	d302      	bcc.n	8000b6a <__udivmoddi4+0xce>
 8000b64:	4282      	cmp	r2, r0
 8000b66:	f200 80f8 	bhi.w	8000d5a <__udivmoddi4+0x2be>
 8000b6a:	1a84      	subs	r4, r0, r2
 8000b6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b70:	2001      	movs	r0, #1
 8000b72:	4617      	mov	r7, r2
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	d0e2      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	e9c6 4700 	strd	r4, r7, [r6]
 8000b7c:	e7df      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b7e:	b902      	cbnz	r2, 8000b82 <__udivmoddi4+0xe6>
 8000b80:	deff      	udf	#255	; 0xff
 8000b82:	fab2 f382 	clz	r3, r2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 8090 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8c:	1a8a      	subs	r2, r1, r2
 8000b8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b92:	fa1f fe8c 	uxth.w	lr, ip
 8000b96:	2101      	movs	r1, #1
 8000b98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000ba0:	0c22      	lsrs	r2, r4, #16
 8000ba2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ba6:	fb0e f005 	mul.w	r0, lr, r5
 8000baa:	4290      	cmp	r0, r2
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bae:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	f200 80cb 	bhi.w	8000d54 <__udivmoddi4+0x2b8>
 8000bbe:	4645      	mov	r5, r8
 8000bc0:	1a12      	subs	r2, r2, r0
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bcc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bd4:	45a6      	cmp	lr, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x14e>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000be0:	d202      	bcs.n	8000be8 <__udivmoddi4+0x14c>
 8000be2:	45a6      	cmp	lr, r4
 8000be4:	f200 80bb 	bhi.w	8000d5e <__udivmoddi4+0x2c2>
 8000be8:	4610      	mov	r0, r2
 8000bea:	eba4 040e 	sub.w	r4, r4, lr
 8000bee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bf2:	e79f      	b.n	8000b34 <__udivmoddi4+0x98>
 8000bf4:	f1c1 0720 	rsb	r7, r1, #32
 8000bf8:	408b      	lsls	r3, r1
 8000bfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c02:	fa05 f401 	lsl.w	r4, r5, r1
 8000c06:	fa20 f307 	lsr.w	r3, r0, r7
 8000c0a:	40fd      	lsrs	r5, r7
 8000c0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c10:	4323      	orrs	r3, r4
 8000c12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c1e:	0c1c      	lsrs	r4, r3, #16
 8000c20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c24:	fb08 f50e 	mul.w	r5, r8, lr
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1c 0404 	adds.w	r4, ip, r4
 8000c38:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c3c:	f080 8088 	bcs.w	8000d50 <__udivmoddi4+0x2b4>
 8000c40:	42a5      	cmp	r5, r4
 8000c42:	f240 8085 	bls.w	8000d50 <__udivmoddi4+0x2b4>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	4464      	add	r4, ip
 8000c4c:	1b64      	subs	r4, r4, r5
 8000c4e:	b29d      	uxth	r5, r3
 8000c50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c54:	fb09 4413 	mls	r4, r9, r3, r4
 8000c58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c6c:	d26c      	bcs.n	8000d48 <__udivmoddi4+0x2ac>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	d96a      	bls.n	8000d48 <__udivmoddi4+0x2ac>
 8000c72:	3b02      	subs	r3, #2
 8000c74:	4464      	add	r4, ip
 8000c76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c7e:	eba4 040e 	sub.w	r4, r4, lr
 8000c82:	42ac      	cmp	r4, r5
 8000c84:	46c8      	mov	r8, r9
 8000c86:	46ae      	mov	lr, r5
 8000c88:	d356      	bcc.n	8000d38 <__udivmoddi4+0x29c>
 8000c8a:	d053      	beq.n	8000d34 <__udivmoddi4+0x298>
 8000c8c:	b156      	cbz	r6, 8000ca4 <__udivmoddi4+0x208>
 8000c8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c92:	eb64 040e 	sbc.w	r4, r4, lr
 8000c96:	fa04 f707 	lsl.w	r7, r4, r7
 8000c9a:	40ca      	lsrs	r2, r1
 8000c9c:	40cc      	lsrs	r4, r1
 8000c9e:	4317      	orrs	r7, r2
 8000ca0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cac:	f1c3 0120 	rsb	r1, r3, #32
 8000cb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cb8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cbc:	409d      	lsls	r5, r3
 8000cbe:	432a      	orrs	r2, r5
 8000cc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ccc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cda:	428d      	cmp	r5, r1
 8000cdc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x258>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cea:	d22f      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000cec:	428d      	cmp	r5, r1
 8000cee:	d92d      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1b49      	subs	r1, r1, r5
 8000cf6:	b292      	uxth	r2, r2
 8000cf8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000d00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d04:	fb05 f10e 	mul.w	r1, r5, lr
 8000d08:	4291      	cmp	r1, r2
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x282>
 8000d0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d10:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d14:	d216      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000d16:	4291      	cmp	r1, r2
 8000d18:	d914      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000d1a:	3d02      	subs	r5, #2
 8000d1c:	4462      	add	r2, ip
 8000d1e:	1a52      	subs	r2, r2, r1
 8000d20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d24:	e738      	b.n	8000b98 <__udivmoddi4+0xfc>
 8000d26:	4631      	mov	r1, r6
 8000d28:	4630      	mov	r0, r6
 8000d2a:	e708      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e6e6      	b.n	8000afe <__udivmoddi4+0x62>
 8000d30:	4610      	mov	r0, r2
 8000d32:	e6fb      	b.n	8000b2c <__udivmoddi4+0x90>
 8000d34:	4548      	cmp	r0, r9
 8000d36:	d2a9      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d38:	ebb9 0802 	subs.w	r8, r9, r2
 8000d3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d40:	3b01      	subs	r3, #1
 8000d42:	e7a3      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d44:	4645      	mov	r5, r8
 8000d46:	e7ea      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d48:	462b      	mov	r3, r5
 8000d4a:	e794      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4c:	4640      	mov	r0, r8
 8000d4e:	e7d1      	b.n	8000cf4 <__udivmoddi4+0x258>
 8000d50:	46d0      	mov	r8, sl
 8000d52:	e77b      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d54:	3d02      	subs	r5, #2
 8000d56:	4462      	add	r2, ip
 8000d58:	e732      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e70a      	b.n	8000b74 <__udivmoddi4+0xd8>
 8000d5e:	4464      	add	r4, ip
 8000d60:	3802      	subs	r0, #2
 8000d62:	e742      	b.n	8000bea <__udivmoddi4+0x14e>

08000d64 <__aeabi_idiv0>:
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a42      	ldr	r2, [pc, #264]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b40      	ldr	r3, [pc, #256]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b3c      	ldr	r3, [pc, #240]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a3b      	ldr	r2, [pc, #236]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b39      	ldr	r3, [pc, #228]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a34      	ldr	r2, [pc, #208]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a2d      	ldr	r2, [pc, #180]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df4:	4827      	ldr	r0, [pc, #156]	; (8000e94 <MX_GPIO_Init+0x12c>)
 8000df6:	f002 fb0d 	bl	8003414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2140      	movs	r1, #64	; 0x40
 8000dfe:	4826      	ldr	r0, [pc, #152]	; (8000e98 <MX_GPIO_Init+0x130>)
 8000e00:	f002 fb08 	bl	8003414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	481d      	ldr	r0, [pc, #116]	; (8000e94 <MX_GPIO_Init+0x12c>)
 8000e1e:	f002 f95d 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e22:	2340      	movs	r3, #64	; 0x40
 8000e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	4817      	ldr	r0, [pc, #92]	; (8000e98 <MX_GPIO_Init+0x130>)
 8000e3a:	f002 f94f 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e3e:	2380      	movs	r3, #128	; 0x80
 8000e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e46:	2302      	movs	r3, #2
 8000e48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4811      	ldr	r0, [pc, #68]	; (8000e98 <MX_GPIO_Init+0x130>)
 8000e52:	f002 f943 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e56:	2303      	movs	r3, #3
 8000e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <MX_GPIO_Init+0x134>)
 8000e6a:	f002 f937 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4806      	ldr	r0, [pc, #24]	; (8000e9c <MX_GPIO_Init+0x134>)
 8000e82:	f002 f92b 	bl	80030dc <HAL_GPIO_Init>

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	; 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020800 	.word	0x40020800
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020400 	.word	0x40020400

08000ea0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ea6:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <MX_I2C1_Init+0x54>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000eac:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <MX_I2C1_Init+0x58>)
 8000eae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ebe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ec2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ede:	f002 facd 	bl	800347c <HAL_I2C_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ee8:	f000 feac 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200000bc 	.word	0x200000bc
 8000ef4:	40005400 	.word	0x40005400
 8000ef8:	000186a0 	.word	0x000186a0

08000efc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_I2C2_Init+0x50>)
 8000f02:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <MX_I2C2_Init+0x54>)
 8000f04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_I2C2_Init+0x50>)
 8000f08:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <MX_I2C2_Init+0x58>)
 8000f0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_I2C2_Init+0x50>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_I2C2_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_I2C2_Init+0x50>)
 8000f1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f1e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <MX_I2C2_Init+0x50>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_I2C2_Init+0x50>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <MX_I2C2_Init+0x50>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_I2C2_Init+0x50>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_I2C2_Init+0x50>)
 8000f3a:	f002 fa9f 	bl	800347c <HAL_I2C_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f44:	f000 fe7e 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000110 	.word	0x20000110
 8000f50:	40005800 	.word	0x40005800
 8000f54:	00061a80 	.word	0x00061a80

08000f58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	; 0x30
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a3a      	ldr	r2, [pc, #232]	; (8001060 <HAL_I2C_MspInit+0x108>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d12c      	bne.n	8000fd4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
 8000f7e:	4b39      	ldr	r3, [pc, #228]	; (8001064 <HAL_I2C_MspInit+0x10c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a38      	ldr	r2, [pc, #224]	; (8001064 <HAL_I2C_MspInit+0x10c>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b36      	ldr	r3, [pc, #216]	; (8001064 <HAL_I2C_MspInit+0x10c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	61bb      	str	r3, [r7, #24]
 8000f94:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f96:	23c0      	movs	r3, #192	; 0xc0
 8000f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f9a:	2312      	movs	r3, #18
 8000f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	482d      	ldr	r0, [pc, #180]	; (8001068 <HAL_I2C_MspInit+0x110>)
 8000fb2:	f002 f893 	bl	80030dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	4b2a      	ldr	r3, [pc, #168]	; (8001064 <HAL_I2C_MspInit+0x10c>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	4a29      	ldr	r2, [pc, #164]	; (8001064 <HAL_I2C_MspInit+0x10c>)
 8000fc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <HAL_I2C_MspInit+0x10c>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000fd2:	e041      	b.n	8001058 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a24      	ldr	r2, [pc, #144]	; (800106c <HAL_I2C_MspInit+0x114>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d13c      	bne.n	8001058 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <HAL_I2C_MspInit+0x10c>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a1f      	ldr	r2, [pc, #124]	; (8001064 <HAL_I2C_MspInit+0x10c>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <HAL_I2C_MspInit+0x10c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001000:	2312      	movs	r3, #18
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800100c:	2304      	movs	r3, #4
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	4814      	ldr	r0, [pc, #80]	; (8001068 <HAL_I2C_MspInit+0x110>)
 8001018:	f002 f860 	bl	80030dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800101c:	2308      	movs	r3, #8
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001020:	2312      	movs	r3, #18
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800102c:	2309      	movs	r3, #9
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	480c      	ldr	r0, [pc, #48]	; (8001068 <HAL_I2C_MspInit+0x110>)
 8001038:	f002 f850 	bl	80030dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_I2C_MspInit+0x10c>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_I2C_MspInit+0x10c>)
 8001046:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800104a:	6413      	str	r3, [r2, #64]	; 0x40
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_I2C_MspInit+0x10c>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	bf00      	nop
 800105a:	3730      	adds	r7, #48	; 0x30
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40005400 	.word	0x40005400
 8001064:	40023800 	.word	0x40023800
 8001068:	40020400 	.word	0x40020400
 800106c:	40005800 	.word	0x40005800

08001070 <ScanningI2C>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ScanningI2C() {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 8001076:	2300      	movs	r3, #0
 8001078:	80fb      	strh	r3, [r7, #6]
 800107a:	e016      	b.n	80010aa <ScanningI2C+0x3a>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	b299      	uxth	r1, r3
 8001082:	230a      	movs	r3, #10
 8001084:	2201      	movs	r2, #1
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <ScanningI2C+0x4c>)
 8001088:	f002 fc36 	bl	80038f8 <HAL_I2C_IsDeviceReady>
 800108c:	4603      	mov	r3, r0
 800108e:	717b      	strb	r3, [r7, #5]
        if(res == HAL_OK) {
 8001090:	797b      	ldrb	r3, [r7, #5]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d103      	bne.n	800109e <ScanningI2C+0x2e>
            i2c_val = 1;
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <ScanningI2C+0x50>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
 800109c:	e002      	b.n	80010a4 <ScanningI2C+0x34>
        } else {
        	i2c_val = 0;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <ScanningI2C+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
    for(uint16_t i = 0; i < 128; i++) {
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	3301      	adds	r3, #1
 80010a8:	80fb      	strh	r3, [r7, #6]
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	2b7f      	cmp	r3, #127	; 0x7f
 80010ae:	d9e5      	bls.n	800107c <ScanningI2C+0xc>
        }
    }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200000bc 	.word	0x200000bc
 80010c0:	2000016c 	.word	0x2000016c

080010c4 <init_dds>:

void init_dds() {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
	ScanningI2C();
 80010ca:	f7ff ffd1 	bl	8001070 <ScanningI2C>
	const int32_t correction = 978;
 80010ce:	f240 33d2 	movw	r3, #978	; 0x3d2
 80010d2:	607b      	str	r3, [r7, #4]
	si5351_Init(correction);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 fdbb 	bl	8001c50 <si5351_Init>
	si5351_SetupCLK0(10000, SI5351_DRIVE_STRENGTH_4MA);
 80010da:	2101      	movs	r1, #1
 80010dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80010e0:	f000 ffa6 	bl	8002030 <si5351_SetupCLK0>
	si5351_SetupCLK1(20000, SI5351_DRIVE_STRENGTH_4MA);
 80010e4:	2101      	movs	r1, #1
 80010e6:	f644 6020 	movw	r0, #20000	; 0x4e20
 80010ea:	f000 ffc2 	bl	8002072 <si5351_SetupCLK1>
	si5351_SetupCLK2(30000, SI5351_DRIVE_STRENGTH_4MA);
 80010ee:	2101      	movs	r1, #1
 80010f0:	f247 5030 	movw	r0, #30000	; 0x7530
 80010f4:	f000 ffde 	bl	80020b4 <si5351_SetupCLK2>
	si5351_EnableOutputs((1<<0) | (1<<1) | (1<<2));
 80010f8:	2007      	movs	r0, #7
 80010fa:	f000 fffc 	bl	80020f6 <si5351_EnableOutputs>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <display_menu>:

void display_menu() {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 800110e:	2000      	movs	r0, #0
 8001110:	f001 f9d6 	bl	80024c0 <ssd1306_Fill>
    for (int i = 0; i < 3; i++) {
 8001114:	2300      	movs	r3, #0
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	e02c      	b.n	8001174 <display_menu+0x6c>
        ssd1306_SetCursor(0, i * 10);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	0092      	lsls	r2, r2, #2
 8001122:	4413      	add	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4619      	mov	r1, r3
 800112a:	2000      	movs	r0, #0
 800112c:	f001 fb24 	bl	8002778 <ssd1306_SetCursor>
        ssd1306_WriteString(menu_items[i], Font_7x10, White);
 8001130:	4a15      	ldr	r2, [pc, #84]	; (8001188 <display_menu+0x80>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001138:	4a14      	ldr	r2, [pc, #80]	; (800118c <display_menu+0x84>)
 800113a:	2301      	movs	r3, #1
 800113c:	ca06      	ldmia	r2, {r1, r2}
 800113e:	f001 faf5 	bl	800272c <ssd1306_WriteString>
        if (i == menu_index) {
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <display_menu+0x88>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	d110      	bne.n	800116e <display_menu+0x66>
            ssd1306_SetCursor(100, i * 10);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	461a      	mov	r2, r3
 8001152:	0092      	lsls	r2, r2, #2
 8001154:	4413      	add	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4619      	mov	r1, r3
 800115c:	2064      	movs	r0, #100	; 0x64
 800115e:	f001 fb0b 	bl	8002778 <ssd1306_SetCursor>
            ssd1306_WriteString("<--", Font_7x10, White);
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <display_menu+0x84>)
 8001164:	2301      	movs	r3, #1
 8001166:	ca06      	ldmia	r2, {r1, r2}
 8001168:	480a      	ldr	r0, [pc, #40]	; (8001194 <display_menu+0x8c>)
 800116a:	f001 fadf 	bl	800272c <ssd1306_WriteString>
    for (int i = 0; i < 3; i++) {
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3301      	adds	r3, #1
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b02      	cmp	r3, #2
 8001178:	ddcf      	ble.n	800111a <display_menu+0x12>
        }
    }
    ssd1306_UpdateScreen(&hi2c2);
 800117a:	4807      	ldr	r0, [pc, #28]	; (8001198 <display_menu+0x90>)
 800117c:	f001 f9c4 	bl	8002508 <ssd1306_UpdateScreen>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000014 	.word	0x20000014
 800118c:	20000000 	.word	0x20000000
 8001190:	200001a0 	.word	0x200001a0
 8001194:	08006cd0 	.word	0x08006cd0
 8001198:	20000110 	.word	0x20000110

0800119c <display_submenu>:

void display_submenu() {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f001 f98c 	bl	80024c0 <ssd1306_Fill>
    char **submenu_items;
    int submenu_length;

    switch (active_submenu) {
 80011a8:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <display_submenu+0xb8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d010      	beq.n	80011d2 <display_submenu+0x36>
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	dc13      	bgt.n	80011dc <display_submenu+0x40>
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d002      	beq.n	80011be <display_submenu+0x22>
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d005      	beq.n	80011c8 <display_submenu+0x2c>
 80011bc:	e00e      	b.n	80011dc <display_submenu+0x40>
        case 0:
            submenu_items = submenu_disable_items;
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <display_submenu+0xbc>)
 80011c0:	60fb      	str	r3, [r7, #12]
            submenu_length = 1;
 80011c2:	2301      	movs	r3, #1
 80011c4:	60bb      	str	r3, [r7, #8]
            break;
 80011c6:	e009      	b.n	80011dc <display_submenu+0x40>
        case 1:
            submenu_items = submenu_enc_items;
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <display_submenu+0xc0>)
 80011ca:	60fb      	str	r3, [r7, #12]
            submenu_length = 4;
 80011cc:	2304      	movs	r3, #4
 80011ce:	60bb      	str	r3, [r7, #8]
            break;
 80011d0:	e004      	b.n	80011dc <display_submenu+0x40>
        case 2:
            submenu_items = submenu_iot_items;
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <display_submenu+0xc4>)
 80011d4:	60fb      	str	r3, [r7, #12]
            submenu_length = 1;
 80011d6:	2301      	movs	r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
            break;
 80011da:	bf00      	nop
    }

    for (int i = 0; i < submenu_length; i++) {
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	e02d      	b.n	800123e <display_submenu+0xa2>
        ssd1306_SetCursor(0, i * 10);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	4619      	mov	r1, r3
 80011f2:	2000      	movs	r0, #0
 80011f4:	f001 fac0 	bl	8002778 <ssd1306_SetCursor>
        ssd1306_WriteString(submenu_items[i], Font_7x10, White);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	4a18      	ldr	r2, [pc, #96]	; (8001264 <display_submenu+0xc8>)
 8001204:	2301      	movs	r3, #1
 8001206:	ca06      	ldmia	r2, {r1, r2}
 8001208:	f001 fa90 	bl	800272c <ssd1306_WriteString>
        if (i == submenu_index) {
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <display_submenu+0xcc>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	429a      	cmp	r2, r3
 8001214:	d110      	bne.n	8001238 <display_submenu+0x9c>
            ssd1306_SetCursor(100, i * 10);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	461a      	mov	r2, r3
 800121c:	0092      	lsls	r2, r2, #2
 800121e:	4413      	add	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4619      	mov	r1, r3
 8001226:	2064      	movs	r0, #100	; 0x64
 8001228:	f001 faa6 	bl	8002778 <ssd1306_SetCursor>
            ssd1306_WriteString("<--", Font_7x10, White);
 800122c:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <display_submenu+0xc8>)
 800122e:	2301      	movs	r3, #1
 8001230:	ca06      	ldmia	r2, {r1, r2}
 8001232:	480e      	ldr	r0, [pc, #56]	; (800126c <display_submenu+0xd0>)
 8001234:	f001 fa7a 	bl	800272c <ssd1306_WriteString>
    for (int i = 0; i < submenu_length; i++) {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3301      	adds	r3, #1
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	429a      	cmp	r2, r3
 8001244:	dbcd      	blt.n	80011e2 <display_submenu+0x46>
        }
    }
    ssd1306_UpdateScreen(&hi2c2);
 8001246:	480a      	ldr	r0, [pc, #40]	; (8001270 <display_submenu+0xd4>)
 8001248:	f001 f95e 	bl	8002508 <ssd1306_UpdateScreen>
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200001b0 	.word	0x200001b0
 8001258:	20000020 	.word	0x20000020
 800125c:	20000024 	.word	0x20000024
 8001260:	20000034 	.word	0x20000034
 8001264:	20000000 	.word	0x20000000
 8001268:	200001a4 	.word	0x200001a4
 800126c:	08006cd0 	.word	0x08006cd0
 8001270:	20000110 	.word	0x20000110

08001274 <display_frequency>:

void display_frequency() {
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 800127a:	2000      	movs	r0, #0
 800127c:	f001 f920 	bl	80024c0 <ssd1306_Fill>
    char buff[32];
    snprintf(buff, sizeof(buff), "Freq: %d %s", frequency, units[unit_index]);
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <display_frequency+0x64>)
 8001282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001286:	4619      	mov	r1, r3
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <display_frequency+0x68>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <display_frequency+0x6c>)
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	4638      	mov	r0, r7
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	460b      	mov	r3, r1
 8001298:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <display_frequency+0x70>)
 800129a:	2120      	movs	r1, #32
 800129c:	f005 f82a 	bl	80062f4 <sniprintf>
    ssd1306_SetCursor(0, 0);
 80012a0:	2100      	movs	r1, #0
 80012a2:	2000      	movs	r0, #0
 80012a4:	f001 fa68 	bl	8002778 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_7x10, White);
 80012a8:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <display_frequency+0x74>)
 80012aa:	4638      	mov	r0, r7
 80012ac:	2301      	movs	r3, #1
 80012ae:	ca06      	ldmia	r2, {r1, r2}
 80012b0:	f001 fa3c 	bl	800272c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 10);
 80012b4:	210a      	movs	r1, #10
 80012b6:	2000      	movs	r0, #0
 80012b8:	f001 fa5e 	bl	8002778 <ssd1306_SetCursor>
    ssd1306_WriteString("Yellow for Back", Font_7x10, White);
 80012bc:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <display_frequency+0x74>)
 80012be:	2301      	movs	r3, #1
 80012c0:	ca06      	ldmia	r2, {r1, r2}
 80012c2:	480a      	ldr	r0, [pc, #40]	; (80012ec <display_frequency+0x78>)
 80012c4:	f001 fa32 	bl	800272c <ssd1306_WriteString>
    ssd1306_UpdateScreen(&hi2c2);
 80012c8:	4809      	ldr	r0, [pc, #36]	; (80012f0 <display_frequency+0x7c>)
 80012ca:	f001 f91d 	bl	8002508 <ssd1306_UpdateScreen>
}
 80012ce:	bf00      	nop
 80012d0:	3720      	adds	r7, #32
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200001ac 	.word	0x200001ac
 80012dc:	200001a8 	.word	0x200001a8
 80012e0:	20000038 	.word	0x20000038
 80012e4:	08006cd4 	.word	0x08006cd4
 80012e8:	20000000 	.word	0x20000000
 80012ec:	08006ce0 	.word	0x08006ce0
 80012f0:	20000110 	.word	0x20000110

080012f4 <display_freq_esp>:

void display_freq_esp() {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f001 f8e0 	bl	80024c0 <ssd1306_Fill>
    char buff[32];
    snprintf(buff, sizeof(buff), "Freq ESP: %ld Hz", freq_esp);
 8001300:	4b15      	ldr	r3, [pc, #84]	; (8001358 <display_freq_esp+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4638      	mov	r0, r7
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <display_freq_esp+0x68>)
 8001308:	2120      	movs	r1, #32
 800130a:	f004 fff3 	bl	80062f4 <sniprintf>
    ssd1306_SetCursor(0, 0);
 800130e:	2100      	movs	r1, #0
 8001310:	2000      	movs	r0, #0
 8001312:	f001 fa31 	bl	8002778 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_7x10, White);
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <display_freq_esp+0x6c>)
 8001318:	4638      	mov	r0, r7
 800131a:	2301      	movs	r3, #1
 800131c:	ca06      	ldmia	r2, {r1, r2}
 800131e:	f001 fa05 	bl	800272c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 10);
 8001322:	210a      	movs	r1, #10
 8001324:	2000      	movs	r0, #0
 8001326:	f001 fa27 	bl	8002778 <ssd1306_SetCursor>
    ssd1306_WriteString("Blue for Gen", Font_7x10, White);
 800132a:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <display_freq_esp+0x6c>)
 800132c:	2301      	movs	r3, #1
 800132e:	ca06      	ldmia	r2, {r1, r2}
 8001330:	480c      	ldr	r0, [pc, #48]	; (8001364 <display_freq_esp+0x70>)
 8001332:	f001 f9fb 	bl	800272c <ssd1306_WriteString>
    ssd1306_SetCursor(0, 20);
 8001336:	2114      	movs	r1, #20
 8001338:	2000      	movs	r0, #0
 800133a:	f001 fa1d 	bl	8002778 <ssd1306_SetCursor>
    ssd1306_WriteString("Yellow for Bac```k", Font_7x10, White);
 800133e:	4a08      	ldr	r2, [pc, #32]	; (8001360 <display_freq_esp+0x6c>)
 8001340:	2301      	movs	r3, #1
 8001342:	ca06      	ldmia	r2, {r1, r2}
 8001344:	4808      	ldr	r0, [pc, #32]	; (8001368 <display_freq_esp+0x74>)
 8001346:	f001 f9f1 	bl	800272c <ssd1306_WriteString>
    ssd1306_UpdateScreen(&hi2c2);
 800134a:	4808      	ldr	r0, [pc, #32]	; (800136c <display_freq_esp+0x78>)
 800134c:	f001 f8dc 	bl	8002508 <ssd1306_UpdateScreen>
}
 8001350:	bf00      	nop
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000194 	.word	0x20000194
 800135c:	08006cf0 	.word	0x08006cf0
 8001360:	20000000 	.word	0x20000000
 8001364:	08006d04 	.word	0x08006d04
 8001368:	08006d14 	.word	0x08006d14
 800136c:	20000110 	.word	0x20000110

08001370 <setup_clock>:

void setup_clock(int clock_index, int frequency, int unit_index) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
    long freq_hz = frequency;
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	617b      	str	r3, [r7, #20]
    switch (unit_index) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d013      	beq.n	80013ae <setup_clock+0x3e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b02      	cmp	r3, #2
 800138a:	dc16      	bgt.n	80013ba <setup_clock+0x4a>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <setup_clock+0x2a>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d003      	beq.n	80013a0 <setup_clock+0x30>
 8001398:	e00f      	b.n	80013ba <setup_clock+0x4a>
        case 0: // Hz
            freq_hz = frequency;
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	617b      	str	r3, [r7, #20]
            break;
 800139e:	e00c      	b.n	80013ba <setup_clock+0x4a>
        case 1: // kHz
            freq_hz = frequency * 1000;
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013a6:	fb02 f303 	mul.w	r3, r2, r3
 80013aa:	617b      	str	r3, [r7, #20]
            break;
 80013ac:	e005      	b.n	80013ba <setup_clock+0x4a>
        case 2: // MHz
            freq_hz = frequency * 1000000;
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	4a16      	ldr	r2, [pc, #88]	; (800140c <setup_clock+0x9c>)
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	617b      	str	r3, [r7, #20]
            break;
 80013b8:	bf00      	nop
    }

    switch (clock_index) {
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d013      	beq.n	80013e8 <setup_clock+0x78>
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	dc15      	bgt.n	80013f2 <setup_clock+0x82>
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <setup_clock+0x64>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d005      	beq.n	80013de <setup_clock+0x6e>
 80013d2:	e00e      	b.n	80013f2 <setup_clock+0x82>
        case 0:
            si5351_SetupCLK0(freq_hz, SI5351_DRIVE_STRENGTH_4MA);
 80013d4:	2101      	movs	r1, #1
 80013d6:	6978      	ldr	r0, [r7, #20]
 80013d8:	f000 fe2a 	bl	8002030 <si5351_SetupCLK0>
            break;
 80013dc:	e009      	b.n	80013f2 <setup_clock+0x82>
        case 1:
            si5351_SetupCLK1(freq_hz, SI5351_DRIVE_STRENGTH_4MA);
 80013de:	2101      	movs	r1, #1
 80013e0:	6978      	ldr	r0, [r7, #20]
 80013e2:	f000 fe46 	bl	8002072 <si5351_SetupCLK1>
            break;
 80013e6:	e004      	b.n	80013f2 <setup_clock+0x82>
        case 2:
            si5351_SetupCLK2(freq_hz, SI5351_DRIVE_STRENGTH_4MA);
 80013e8:	2101      	movs	r1, #1
 80013ea:	6978      	ldr	r0, [r7, #20]
 80013ec:	f000 fe62 	bl	80020b4 <si5351_SetupCLK2>
            break;
 80013f0:	bf00      	nop
    }
    si5351_EnableOutputs((1 << clock_index));
 80013f2:	2201      	movs	r2, #1
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fe7a 	bl	80020f6 <si5351_EnableOutputs>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	000f4240 	.word	0x000f4240

08001410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001416:	f001 fc27 	bl	8002c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141a:	f000 fb0f 	bl	8001a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141e:	f7ff fca3 	bl	8000d68 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001422:	f7ff fd3d 	bl	8000ea0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001426:	f7ff fd69 	bl	8000efc <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800142a:	f001 fb79 	bl	8002b20 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800142e:	f001 fa69 	bl	8002904 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001432:	f001 fab3 	bl	800299c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001436:	48ab      	ldr	r0, [pc, #684]	; (80016e4 <main+0x2d4>)
 8001438:	f003 faa4 	bl	8004984 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800143c:	213c      	movs	r1, #60	; 0x3c
 800143e:	48aa      	ldr	r0, [pc, #680]	; (80016e8 <main+0x2d8>)
 8001440:	f003 fba8 	bl	8004b94 <HAL_TIM_Encoder_Start>
  HAL_UART_Receive_IT(&huart2, &Rx_temp, 1);
 8001444:	2201      	movs	r2, #1
 8001446:	49a9      	ldr	r1, [pc, #676]	; (80016ec <main+0x2dc>)
 8001448:	48a9      	ldr	r0, [pc, #676]	; (80016f0 <main+0x2e0>)
 800144a:	f004 f82f 	bl	80054ac <HAL_UART_Receive_IT>
  ssd1306_Init(&hi2c2);
 800144e:	48a9      	ldr	r0, [pc, #676]	; (80016f4 <main+0x2e4>)
 8001450:	f000 ff16 	bl	8002280 <ssd1306_Init>
  init_dds();
 8001454:	f7ff fe36 	bl	80010c4 <init_dds>

  // Display ke OLED
  ssd1306_UpdateScreen(&hi2c2);
 8001458:	48a6      	ldr	r0, [pc, #664]	; (80016f4 <main+0x2e4>)
 800145a:	f001 f855 	bl	8002508 <ssd1306_UpdateScreen>
  ssd1306_SetCursor(7, 0);
 800145e:	2100      	movs	r1, #0
 8001460:	2007      	movs	r0, #7
 8001462:	f001 f989 	bl	8002778 <ssd1306_SetCursor>
  ssd1306_WriteString("Muhammad Hafidzh", Font_7x10, White);
 8001466:	4aa4      	ldr	r2, [pc, #656]	; (80016f8 <main+0x2e8>)
 8001468:	2301      	movs	r3, #1
 800146a:	ca06      	ldmia	r2, {r1, r2}
 800146c:	48a3      	ldr	r0, [pc, #652]	; (80016fc <main+0x2ec>)
 800146e:	f001 f95d 	bl	800272c <ssd1306_WriteString>
  ssd1306_SetCursor(15, 15);
 8001472:	210f      	movs	r1, #15
 8001474:	200f      	movs	r0, #15
 8001476:	f001 f97f 	bl	8002778 <ssd1306_SetCursor>
  ssd1306_WriteString("FP SET", Font_16x26, White);
 800147a:	4aa1      	ldr	r2, [pc, #644]	; (8001700 <main+0x2f0>)
 800147c:	2301      	movs	r3, #1
 800147e:	ca06      	ldmia	r2, {r1, r2}
 8001480:	48a0      	ldr	r0, [pc, #640]	; (8001704 <main+0x2f4>)
 8001482:	f001 f953 	bl	800272c <ssd1306_WriteString>
  ssd1306_SetCursor(30, 50);
 8001486:	2132      	movs	r1, #50	; 0x32
 8001488:	201e      	movs	r0, #30
 800148a:	f001 f975 	bl	8002778 <ssd1306_SetCursor>
  ssd1306_WriteString("5022221069", Font_7x10, White);
 800148e:	4a9a      	ldr	r2, [pc, #616]	; (80016f8 <main+0x2e8>)
 8001490:	2301      	movs	r3, #1
 8001492:	ca06      	ldmia	r2, {r1, r2}
 8001494:	489c      	ldr	r0, [pc, #624]	; (8001708 <main+0x2f8>)
 8001496:	f001 f949 	bl	800272c <ssd1306_WriteString>
  ssd1306_UpdateScreen(&hi2c2);
 800149a:	4896      	ldr	r0, [pc, #600]	; (80016f4 <main+0x2e4>)
 800149c:	f001 f834 	bl	8002508 <ssd1306_UpdateScreen>
  HAL_Delay(3000);
 80014a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80014a4:	f001 fc52 	bl	8002d4c <HAL_Delay>
  ssd1306_Fill(Black);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f001 f809 	bl	80024c0 <ssd1306_Fill>
  ssd1306_UpdateScreen(&hi2c2);
 80014ae:	4891      	ldr	r0, [pc, #580]	; (80016f4 <main+0x2e4>)
 80014b0:	f001 f82a 	bl	8002508 <ssd1306_UpdateScreen>

  // inisiasi menu awal
  display_menu();
 80014b4:	f7ff fe28 	bl	8001108 <display_menu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80014b8:	2201      	movs	r2, #1
 80014ba:	2140      	movs	r1, #64	; 0x40
 80014bc:	4893      	ldr	r0, [pc, #588]	; (800170c <main+0x2fc>)
 80014be:	f001 ffa9 	bl	8003414 <HAL_GPIO_WritePin>

	//merah b2, bir b1, kuning b0, putih a7
    if (menu_active)
 80014c2:	4b93      	ldr	r3, [pc, #588]	; (8001710 <main+0x300>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 8084 	beq.w	80015d4 <main+0x1c4>
    {
        if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET)
 80014cc:	2102      	movs	r1, #2
 80014ce:	4891      	ldr	r0, [pc, #580]	; (8001714 <main+0x304>)
 80014d0:	f001 ff88 	bl	80033e4 <HAL_GPIO_ReadPin>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d103      	bne.n	80014e2 <main+0xd2>
        {
            button_biru = 1;
 80014da:	4b8f      	ldr	r3, [pc, #572]	; (8001718 <main+0x308>)
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e002      	b.n	80014e8 <main+0xd8>
        }
        else
        {
            button_biru = 0;
 80014e2:	4b8d      	ldr	r3, [pc, #564]	; (8001718 <main+0x308>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
        }

        if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET)
 80014e8:	2104      	movs	r1, #4
 80014ea:	488a      	ldr	r0, [pc, #552]	; (8001714 <main+0x304>)
 80014ec:	f001 ff7a 	bl	80033e4 <HAL_GPIO_ReadPin>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d103      	bne.n	80014fe <main+0xee>
        {
            button_merah = 1;
 80014f6:	4b89      	ldr	r3, [pc, #548]	; (800171c <main+0x30c>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
 80014fc:	e002      	b.n	8001504 <main+0xf4>
        }
        else
        {
            button_merah = 0;
 80014fe:	4b87      	ldr	r3, [pc, #540]	; (800171c <main+0x30c>)
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
        }

        if(button_merah)
 8001504:	4b85      	ldr	r3, [pc, #532]	; (800171c <main+0x30c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d013      	beq.n	8001534 <main+0x124>
        {
            // Scroll
            menu_index = (menu_index + 1) % 3;
 800150c:	4b84      	ldr	r3, [pc, #528]	; (8001720 <main+0x310>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	1c59      	adds	r1, r3, #1
 8001512:	4b84      	ldr	r3, [pc, #528]	; (8001724 <main+0x314>)
 8001514:	fb83 3201 	smull	r3, r2, r3, r1
 8001518:	17cb      	asrs	r3, r1, #31
 800151a:	1ad2      	subs	r2, r2, r3
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	1aca      	subs	r2, r1, r3
 8001524:	4b7e      	ldr	r3, [pc, #504]	; (8001720 <main+0x310>)
 8001526:	601a      	str	r2, [r3, #0]
            display_menu();
 8001528:	f7ff fdee 	bl	8001108 <display_menu>
            HAL_Delay(300);
 800152c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001530:	f001 fc0c 	bl	8002d4c <HAL_Delay>
        }

        if(button_biru)
 8001534:	4b78      	ldr	r3, [pc, #480]	; (8001718 <main+0x308>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 823a 	beq.w	80019b2 <main+0x5a2>
        {
            switch(menu_index)
 800153e:	4b78      	ldr	r3, [pc, #480]	; (8001720 <main+0x310>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d035      	beq.n	80015b2 <main+0x1a2>
 8001546:	2b02      	cmp	r3, #2
 8001548:	dc3f      	bgt.n	80015ca <main+0x1ba>
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <main+0x144>
 800154e:	2b01      	cmp	r3, #1
 8001550:	d023      	beq.n	800159a <main+0x18a>
 8001552:	e03a      	b.n	80015ca <main+0x1ba>
            {
                case 0:
                    // Disable Clock
                    si5351_EnableOutputs(0);
 8001554:	2000      	movs	r0, #0
 8001556:	f000 fdce 	bl	80020f6 <si5351_EnableOutputs>
                    ssd1306_Fill(Black);
 800155a:	2000      	movs	r0, #0
 800155c:	f000 ffb0 	bl	80024c0 <ssd1306_Fill>
                    ssd1306_SetCursor(0, 15);
 8001560:	210f      	movs	r1, #15
 8001562:	2000      	movs	r0, #0
 8001564:	f001 f908 	bl	8002778 <ssd1306_SetCursor>
                    ssd1306_WriteString("Clock Disabled", Font_7x10, White);
 8001568:	4a63      	ldr	r2, [pc, #396]	; (80016f8 <main+0x2e8>)
 800156a:	2301      	movs	r3, #1
 800156c:	ca06      	ldmia	r2, {r1, r2}
 800156e:	486e      	ldr	r0, [pc, #440]	; (8001728 <main+0x318>)
 8001570:	f001 f8dc 	bl	800272c <ssd1306_WriteString>
                    ssd1306_UpdateScreen(&hi2c2);
 8001574:	485f      	ldr	r0, [pc, #380]	; (80016f4 <main+0x2e4>)
 8001576:	f000 ffc7 	bl	8002508 <ssd1306_UpdateScreen>
                    HAL_Delay(2000);
 800157a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800157e:	f001 fbe5 	bl	8002d4c <HAL_Delay>
                    submenu_active = 1;
 8001582:	4b6a      	ldr	r3, [pc, #424]	; (800172c <main+0x31c>)
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
                    menu_active = 0;
 8001588:	4b61      	ldr	r3, [pc, #388]	; (8001710 <main+0x300>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
                    active_submenu = 0;
 800158e:	4b68      	ldr	r3, [pc, #416]	; (8001730 <main+0x320>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
                    display_submenu();
 8001594:	f7ff fe02 	bl	800119c <display_submenu>
                    break;
 8001598:	e017      	b.n	80015ca <main+0x1ba>
                case 1:
                    // Gen CLK ENC
                    submenu_active = 1;
 800159a:	4b64      	ldr	r3, [pc, #400]	; (800172c <main+0x31c>)
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
                    menu_active = 0;
 80015a0:	4b5b      	ldr	r3, [pc, #364]	; (8001710 <main+0x300>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
                    active_submenu = 1;
 80015a6:	4b62      	ldr	r3, [pc, #392]	; (8001730 <main+0x320>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
                    display_submenu();
 80015ac:	f7ff fdf6 	bl	800119c <display_submenu>
                    break;
 80015b0:	e00b      	b.n	80015ca <main+0x1ba>
                case 2:
                    // Gen CLK IOT
                    // si5351_SetupCLK1(20000, SI5351_DRIVE_STRENGTH_4MA);
                    // si5351_EnableOutputs((1<<1));
                    submenu_active = 1;
 80015b2:	4b5e      	ldr	r3, [pc, #376]	; (800172c <main+0x31c>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]
                    menu_active = 0;
 80015b8:	4b55      	ldr	r3, [pc, #340]	; (8001710 <main+0x300>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
                    active_submenu = 2;
 80015be:	4b5c      	ldr	r3, [pc, #368]	; (8001730 <main+0x320>)
 80015c0:	2202      	movs	r2, #2
 80015c2:	601a      	str	r2, [r3, #0]
                    display_freq_esp();
 80015c4:	f7ff fe96 	bl	80012f4 <display_freq_esp>
                    break;
 80015c8:	bf00      	nop
            }
            HAL_Delay(300);
 80015ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80015ce:	f001 fbbd 	bl	8002d4c <HAL_Delay>
 80015d2:	e1ee      	b.n	80019b2 <main+0x5a2>
        }
    }
    else if (submenu_active && active_submenu != 2)
 80015d4:	4b55      	ldr	r3, [pc, #340]	; (800172c <main+0x31c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80af 	beq.w	800173c <main+0x32c>
 80015de:	4b54      	ldr	r3, [pc, #336]	; (8001730 <main+0x320>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	f000 80aa 	beq.w	800173c <main+0x32c>
    {
        if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET)
 80015e8:	2102      	movs	r1, #2
 80015ea:	484a      	ldr	r0, [pc, #296]	; (8001714 <main+0x304>)
 80015ec:	f001 fefa 	bl	80033e4 <HAL_GPIO_ReadPin>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d103      	bne.n	80015fe <main+0x1ee>
        {
            button_biru = 1;
 80015f6:	4b48      	ldr	r3, [pc, #288]	; (8001718 <main+0x308>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	701a      	strb	r2, [r3, #0]
 80015fc:	e002      	b.n	8001604 <main+0x1f4>
        }
        else
        {
            button_biru = 0;
 80015fe:	4b46      	ldr	r3, [pc, #280]	; (8001718 <main+0x308>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
        }

        if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET)
 8001604:	2104      	movs	r1, #4
 8001606:	4843      	ldr	r0, [pc, #268]	; (8001714 <main+0x304>)
 8001608:	f001 feec 	bl	80033e4 <HAL_GPIO_ReadPin>
 800160c:	4603      	mov	r3, r0
 800160e:	2b01      	cmp	r3, #1
 8001610:	d103      	bne.n	800161a <main+0x20a>
        {
            button_merah = 1;
 8001612:	4b42      	ldr	r3, [pc, #264]	; (800171c <main+0x30c>)
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	e002      	b.n	8001620 <main+0x210>
        }
        else
        {
            button_merah = 0;
 800161a:	4b40      	ldr	r3, [pc, #256]	; (800171c <main+0x30c>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
        }

        if(button_merah)
 8001620:	4b3e      	ldr	r3, [pc, #248]	; (800171c <main+0x30c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d019      	beq.n	800165c <main+0x24c>
        {
            // Scroll submenu
            int submenu_length = (active_submenu == 1) ? 4 : 1;
 8001628:	4b41      	ldr	r3, [pc, #260]	; (8001730 <main+0x320>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <main+0x224>
 8001630:	2304      	movs	r3, #4
 8001632:	e000      	b.n	8001636 <main+0x226>
 8001634:	2301      	movs	r3, #1
 8001636:	607b      	str	r3, [r7, #4]
            submenu_index = (submenu_index + 1) % submenu_length;
 8001638:	4b3e      	ldr	r3, [pc, #248]	; (8001734 <main+0x324>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3301      	adds	r3, #1
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	fb93 f2f2 	sdiv	r2, r3, r2
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	fb01 f202 	mul.w	r2, r1, r2
 800164a:	1a9b      	subs	r3, r3, r2
 800164c:	4a39      	ldr	r2, [pc, #228]	; (8001734 <main+0x324>)
 800164e:	6013      	str	r3, [r2, #0]
            display_submenu();
 8001650:	f7ff fda4 	bl	800119c <display_submenu>
            HAL_Delay(300);
 8001654:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001658:	f001 fb78 	bl	8002d4c <HAL_Delay>
        }

        if(button_biru)
 800165c:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <main+0x308>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 81a6 	beq.w	80019b2 <main+0x5a2>
        {
            switch(active_submenu)
 8001666:	4b32      	ldr	r3, [pc, #200]	; (8001730 <main+0x320>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d030      	beq.n	80016d0 <main+0x2c0>
 800166e:	2b02      	cmp	r3, #2
 8001670:	dc32      	bgt.n	80016d8 <main+0x2c8>
 8001672:	2b00      	cmp	r3, #0
 8001674:	d002      	beq.n	800167c <main+0x26c>
 8001676:	2b01      	cmp	r3, #1
 8001678:	d00d      	beq.n	8001696 <main+0x286>
 800167a:	e02d      	b.n	80016d8 <main+0x2c8>
            {
                case 0:
                    if(submenu_index == 0)
 800167c:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <main+0x324>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d128      	bne.n	80016d6 <main+0x2c6>
                    {
                        submenu_active = 0;
 8001684:	4b29      	ldr	r3, [pc, #164]	; (800172c <main+0x31c>)
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
                        menu_active = 1;
 800168a:	4b21      	ldr	r3, [pc, #132]	; (8001710 <main+0x300>)
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
                        display_menu();
 8001690:	f7ff fd3a 	bl	8001108 <display_menu>
                    }
                    break;
 8001694:	e01f      	b.n	80016d6 <main+0x2c6>
                case 1:
                    // Gen CLK ENC submenu
                    switch(submenu_index)
 8001696:	4b27      	ldr	r3, [pc, #156]	; (8001734 <main+0x324>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b02      	cmp	r3, #2
 800169c:	dc02      	bgt.n	80016a4 <main+0x294>
 800169e:	2b00      	cmp	r3, #0
 80016a0:	da03      	bge.n	80016aa <main+0x29a>
                            submenu_active = 0;
                            menu_active = 1;
                            display_menu();
                            break;
                    }
                    break;
 80016a2:	e019      	b.n	80016d8 <main+0x2c8>
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d009      	beq.n	80016bc <main+0x2ac>
 80016a8:	e016      	b.n	80016d8 <main+0x2c8>
                            subsubmenu_active = 1;
 80016aa:	4b23      	ldr	r3, [pc, #140]	; (8001738 <main+0x328>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	701a      	strb	r2, [r3, #0]
                            submenu_active = 0;
 80016b0:	4b1e      	ldr	r3, [pc, #120]	; (800172c <main+0x31c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
                            display_frequency();
 80016b6:	f7ff fddd 	bl	8001274 <display_frequency>
                            break;
 80016ba:	e008      	b.n	80016ce <main+0x2be>
                            submenu_active = 0;
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <main+0x31c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
                            menu_active = 1;
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <main+0x300>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
                            display_menu();
 80016c8:	f7ff fd1e 	bl	8001108 <display_menu>
                            break;
 80016cc:	bf00      	nop
                    break;
 80016ce:	e003      	b.n	80016d8 <main+0x2c8>
                case 2:
                    // Gen CLK IOT submenu
                    display_freq_esp();
 80016d0:	f7ff fe10 	bl	80012f4 <display_freq_esp>
                    break;
 80016d4:	e000      	b.n	80016d8 <main+0x2c8>
                    break;
 80016d6:	bf00      	nop
            }
            HAL_Delay(300);
 80016d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016dc:	f001 fb36 	bl	8002d4c <HAL_Delay>
        if(button_biru)
 80016e0:	e167      	b.n	80019b2 <main+0x5a2>
 80016e2:	bf00      	nop
 80016e4:	200005c4 	.word	0x200005c4
 80016e8:	2000060c 	.word	0x2000060c
 80016ec:	20000190 	.word	0x20000190
 80016f0:	20000654 	.word	0x20000654
 80016f4:	20000110 	.word	0x20000110
 80016f8:	20000000 	.word	0x20000000
 80016fc:	08006d28 	.word	0x08006d28
 8001700:	20000008 	.word	0x20000008
 8001704:	08006d3c 	.word	0x08006d3c
 8001708:	08006d44 	.word	0x08006d44
 800170c:	40020000 	.word	0x40020000
 8001710:	20000010 	.word	0x20000010
 8001714:	40020400 	.word	0x40020400
 8001718:	20000198 	.word	0x20000198
 800171c:	2000019b 	.word	0x2000019b
 8001720:	200001a0 	.word	0x200001a0
 8001724:	55555556 	.word	0x55555556
 8001728:	08006d50 	.word	0x08006d50
 800172c:	2000019c 	.word	0x2000019c
 8001730:	200001b0 	.word	0x200001b0
 8001734:	200001a4 	.word	0x200001a4
 8001738:	2000019d 	.word	0x2000019d
        }
    }
    else if (subsubmenu_active)
 800173c:	4ba7      	ldr	r3, [pc, #668]	; (80019dc <main+0x5cc>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80c5 	beq.w	80018d0 <main+0x4c0>
    {
        if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET)
 8001746:	2102      	movs	r1, #2
 8001748:	48a5      	ldr	r0, [pc, #660]	; (80019e0 <main+0x5d0>)
 800174a:	f001 fe4b 	bl	80033e4 <HAL_GPIO_ReadPin>
 800174e:	4603      	mov	r3, r0
 8001750:	2b01      	cmp	r3, #1
 8001752:	d103      	bne.n	800175c <main+0x34c>
        {
            button_biru = 1;
 8001754:	4ba3      	ldr	r3, [pc, #652]	; (80019e4 <main+0x5d4>)
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
 800175a:	e002      	b.n	8001762 <main+0x352>
        }
        else
        {
            button_biru = 0;
 800175c:	4ba1      	ldr	r3, [pc, #644]	; (80019e4 <main+0x5d4>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
        }

        if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET)
 8001762:	2104      	movs	r1, #4
 8001764:	489e      	ldr	r0, [pc, #632]	; (80019e0 <main+0x5d0>)
 8001766:	f001 fe3d 	bl	80033e4 <HAL_GPIO_ReadPin>
 800176a:	4603      	mov	r3, r0
 800176c:	2b01      	cmp	r3, #1
 800176e:	d103      	bne.n	8001778 <main+0x368>
        {
            button_merah = 1;
 8001770:	4b9d      	ldr	r3, [pc, #628]	; (80019e8 <main+0x5d8>)
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
 8001776:	e002      	b.n	800177e <main+0x36e>
        }
        else
        {
            button_merah = 0;
 8001778:	4b9b      	ldr	r3, [pc, #620]	; (80019e8 <main+0x5d8>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
        }

        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET)
 800177e:	2180      	movs	r1, #128	; 0x80
 8001780:	489a      	ldr	r0, [pc, #616]	; (80019ec <main+0x5dc>)
 8001782:	f001 fe2f 	bl	80033e4 <HAL_GPIO_ReadPin>
 8001786:	4603      	mov	r3, r0
 8001788:	2b01      	cmp	r3, #1
 800178a:	d103      	bne.n	8001794 <main+0x384>
        {
            button_putih = 1;
 800178c:	4b98      	ldr	r3, [pc, #608]	; (80019f0 <main+0x5e0>)
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
 8001792:	e002      	b.n	800179a <main+0x38a>
        }
        else
        {
            button_putih = 0;
 8001794:	4b96      	ldr	r3, [pc, #600]	; (80019f0 <main+0x5e0>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
        }

        if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET)
 800179a:	2101      	movs	r1, #1
 800179c:	4890      	ldr	r0, [pc, #576]	; (80019e0 <main+0x5d0>)
 800179e:	f001 fe21 	bl	80033e4 <HAL_GPIO_ReadPin>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d103      	bne.n	80017b0 <main+0x3a0>
        {
            button_kuning = 1;
 80017a8:	4b92      	ldr	r3, [pc, #584]	; (80019f4 <main+0x5e4>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
 80017ae:	e002      	b.n	80017b6 <main+0x3a6>
        }
        else
        {
            button_kuning = 0;
 80017b0:	4b90      	ldr	r3, [pc, #576]	; (80019f4 <main+0x5e4>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
        }

        // Update frekuensi dan satuan
        frequency = countEnc;
 80017b6:	4b90      	ldr	r3, [pc, #576]	; (80019f8 <main+0x5e8>)
 80017b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017bc:	4b8f      	ldr	r3, [pc, #572]	; (80019fc <main+0x5ec>)
 80017be:	801a      	strh	r2, [r3, #0]
        if(frequency > 100) frequency = 100; // Batas maksimum
 80017c0:	4b8e      	ldr	r3, [pc, #568]	; (80019fc <main+0x5ec>)
 80017c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c6:	2b64      	cmp	r3, #100	; 0x64
 80017c8:	dd02      	ble.n	80017d0 <main+0x3c0>
 80017ca:	4b8c      	ldr	r3, [pc, #560]	; (80019fc <main+0x5ec>)
 80017cc:	2264      	movs	r2, #100	; 0x64
 80017ce:	801a      	strh	r2, [r3, #0]
        if(frequency < 0) frequency = 0;     // Batas minimum
 80017d0:	4b8a      	ldr	r3, [pc, #552]	; (80019fc <main+0x5ec>)
 80017d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	da02      	bge.n	80017e0 <main+0x3d0>
 80017da:	4b88      	ldr	r3, [pc, #544]	; (80019fc <main+0x5ec>)
 80017dc:	2200      	movs	r2, #0
 80017de:	801a      	strh	r2, [r3, #0]
        display_frequency();
 80017e0:	f7ff fd48 	bl	8001274 <display_frequency>

        if(button_putih)
 80017e4:	4b82      	ldr	r3, [pc, #520]	; (80019f0 <main+0x5e0>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d013      	beq.n	8001814 <main+0x404>
        {
            // ubah unit
            unit_index = (unit_index + 1) % 3;
 80017ec:	4b84      	ldr	r3, [pc, #528]	; (8001a00 <main+0x5f0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	1c59      	adds	r1, r3, #1
 80017f2:	4b84      	ldr	r3, [pc, #528]	; (8001a04 <main+0x5f4>)
 80017f4:	fb83 3201 	smull	r3, r2, r3, r1
 80017f8:	17cb      	asrs	r3, r1, #31
 80017fa:	1ad2      	subs	r2, r2, r3
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	1aca      	subs	r2, r1, r3
 8001804:	4b7e      	ldr	r3, [pc, #504]	; (8001a00 <main+0x5f0>)
 8001806:	601a      	str	r2, [r3, #0]
            display_frequency();
 8001808:	f7ff fd34 	bl	8001274 <display_frequency>
            HAL_Delay(300);
 800180c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001810:	f001 fa9c 	bl	8002d4c <HAL_Delay>
        }

        if(button_kuning)
 8001814:	4b77      	ldr	r3, [pc, #476]	; (80019f4 <main+0x5e4>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00b      	beq.n	8001834 <main+0x424>
        {
            // Back
            subsubmenu_active = 0;
 800181c:	4b6f      	ldr	r3, [pc, #444]	; (80019dc <main+0x5cc>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
            submenu_active = 1;
 8001822:	4b79      	ldr	r3, [pc, #484]	; (8001a08 <main+0x5f8>)
 8001824:	2201      	movs	r2, #1
 8001826:	701a      	strb	r2, [r3, #0]
            display_submenu();
 8001828:	f7ff fcb8 	bl	800119c <display_submenu>
            HAL_Delay(300);
 800182c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001830:	f001 fa8c 	bl	8002d4c <HAL_Delay>
        }

        if(button_biru)
 8001834:	4b6b      	ldr	r3, [pc, #428]	; (80019e4 <main+0x5d4>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80ba 	beq.w	80019b2 <main+0x5a2>
        {
            ssd1306_Fill(Black);
 800183e:	2000      	movs	r0, #0
 8001840:	f000 fe3e 	bl	80024c0 <ssd1306_Fill>
            ssd1306_SetCursor(0, 15);
 8001844:	210f      	movs	r1, #15
 8001846:	2000      	movs	r0, #0
 8001848:	f000 ff96 	bl	8002778 <ssd1306_SetCursor>
            if(submenu_index == 0)
 800184c:	4b6f      	ldr	r3, [pc, #444]	; (8001a0c <main+0x5fc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d106      	bne.n	8001862 <main+0x452>
            	ssd1306_WriteString("Generate CLK0 ", Font_7x10, White);
 8001854:	4a6e      	ldr	r2, [pc, #440]	; (8001a10 <main+0x600>)
 8001856:	2301      	movs	r3, #1
 8001858:	ca06      	ldmia	r2, {r1, r2}
 800185a:	486e      	ldr	r0, [pc, #440]	; (8001a14 <main+0x604>)
 800185c:	f000 ff66 	bl	800272c <ssd1306_WriteString>
 8001860:	e014      	b.n	800188c <main+0x47c>
            else if(submenu_index == 1)
 8001862:	4b6a      	ldr	r3, [pc, #424]	; (8001a0c <main+0x5fc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d106      	bne.n	8001878 <main+0x468>
            	ssd1306_WriteString("Generate CLK1 ", Font_7x10, White);
 800186a:	4a69      	ldr	r2, [pc, #420]	; (8001a10 <main+0x600>)
 800186c:	2301      	movs	r3, #1
 800186e:	ca06      	ldmia	r2, {r1, r2}
 8001870:	4869      	ldr	r0, [pc, #420]	; (8001a18 <main+0x608>)
 8001872:	f000 ff5b 	bl	800272c <ssd1306_WriteString>
 8001876:	e009      	b.n	800188c <main+0x47c>
            else if(submenu_index == 2)
 8001878:	4b64      	ldr	r3, [pc, #400]	; (8001a0c <main+0x5fc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d105      	bne.n	800188c <main+0x47c>
            	ssd1306_WriteString("Generate CLK2 ", Font_7x10, White);
 8001880:	4a63      	ldr	r2, [pc, #396]	; (8001a10 <main+0x600>)
 8001882:	2301      	movs	r3, #1
 8001884:	ca06      	ldmia	r2, {r1, r2}
 8001886:	4865      	ldr	r0, [pc, #404]	; (8001a1c <main+0x60c>)
 8001888:	f000 ff50 	bl	800272c <ssd1306_WriteString>
            ssd1306_UpdateScreen(&hi2c2);
 800188c:	4864      	ldr	r0, [pc, #400]	; (8001a20 <main+0x610>)
 800188e:	f000 fe3b 	bl	8002508 <ssd1306_UpdateScreen>
            HAL_Delay(2000);
 8001892:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001896:	f001 fa59 	bl	8002d4c <HAL_Delay>
            submenu_active = 0;
 800189a:	4b5b      	ldr	r3, [pc, #364]	; (8001a08 <main+0x5f8>)
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
            menu_active = 0;
 80018a0:	4b60      	ldr	r3, [pc, #384]	; (8001a24 <main+0x614>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
            active_submenu = 1;
 80018a6:	4b60      	ldr	r3, [pc, #384]	; (8001a28 <main+0x618>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	601a      	str	r2, [r3, #0]
            display_frequency();
 80018ac:	f7ff fce2 	bl	8001274 <display_frequency>
            setup_clock(submenu_index, frequency, unit_index);
 80018b0:	4b56      	ldr	r3, [pc, #344]	; (8001a0c <main+0x5fc>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a51      	ldr	r2, [pc, #324]	; (80019fc <main+0x5ec>)
 80018b6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4a50      	ldr	r2, [pc, #320]	; (8001a00 <main+0x5f0>)
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fd55 	bl	8001370 <setup_clock>
            HAL_Delay(300);
 80018c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018ca:	f001 fa3f 	bl	8002d4c <HAL_Delay>
 80018ce:	e070      	b.n	80019b2 <main+0x5a2>
        }

    }
    else if (active_submenu == 2) // Gen CLK IOT submenu active
 80018d0:	4b55      	ldr	r3, [pc, #340]	; (8001a28 <main+0x618>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d16c      	bne.n	80019b2 <main+0x5a2>
    {
        if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET)
 80018d8:	2102      	movs	r1, #2
 80018da:	4841      	ldr	r0, [pc, #260]	; (80019e0 <main+0x5d0>)
 80018dc:	f001 fd82 	bl	80033e4 <HAL_GPIO_ReadPin>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d103      	bne.n	80018ee <main+0x4de>
        {
            button_biru = 1;
 80018e6:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <main+0x5d4>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	e002      	b.n	80018f4 <main+0x4e4>
        }
        else
        {
            button_biru = 0;
 80018ee:	4b3d      	ldr	r3, [pc, #244]	; (80019e4 <main+0x5d4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
        }

        if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET)
 80018f4:	2101      	movs	r1, #1
 80018f6:	483a      	ldr	r0, [pc, #232]	; (80019e0 <main+0x5d0>)
 80018f8:	f001 fd74 	bl	80033e4 <HAL_GPIO_ReadPin>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d103      	bne.n	800190a <main+0x4fa>
        {
            button_kuning = 1;
 8001902:	4b3c      	ldr	r3, [pc, #240]	; (80019f4 <main+0x5e4>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
 8001908:	e002      	b.n	8001910 <main+0x500>
        }
        else
        {
            button_kuning = 0;
 800190a:	4b3a      	ldr	r3, [pc, #232]	; (80019f4 <main+0x5e4>)
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
        }

        if(button_biru)
 8001910:	4b34      	ldr	r3, [pc, #208]	; (80019e4 <main+0x5d4>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d03c      	beq.n	8001992 <main+0x582>
        {
            ssd1306_Fill(Black);
 8001918:	2000      	movs	r0, #0
 800191a:	f000 fdd1 	bl	80024c0 <ssd1306_Fill>
            ssd1306_SetCursor(0, 15);
 800191e:	210f      	movs	r1, #15
 8001920:	2000      	movs	r0, #0
 8001922:	f000 ff29 	bl	8002778 <ssd1306_SetCursor>
            ssd1306_WriteString("Generate FreqEsp", Font_7x10, White);
 8001926:	4a3a      	ldr	r2, [pc, #232]	; (8001a10 <main+0x600>)
 8001928:	2301      	movs	r3, #1
 800192a:	ca06      	ldmia	r2, {r1, r2}
 800192c:	483f      	ldr	r0, [pc, #252]	; (8001a2c <main+0x61c>)
 800192e:	f000 fefd 	bl	800272c <ssd1306_WriteString>
            ssd1306_UpdateScreen(&hi2c2);
 8001932:	483b      	ldr	r0, [pc, #236]	; (8001a20 <main+0x610>)
 8001934:	f000 fde8 	bl	8002508 <ssd1306_UpdateScreen>
            HAL_Delay(2000);
 8001938:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800193c:	f001 fa06 	bl	8002d4c <HAL_Delay>
            submenu_active = 1;
 8001940:	4b31      	ldr	r3, [pc, #196]	; (8001a08 <main+0x5f8>)
 8001942:	2201      	movs	r2, #1
 8001944:	701a      	strb	r2, [r3, #0]
            menu_active = 0;
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <main+0x614>)
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
            active_submenu = 2;
 800194c:	4b36      	ldr	r3, [pc, #216]	; (8001a28 <main+0x618>)
 800194e:	2202      	movs	r2, #2
 8001950:	601a      	str	r2, [r3, #0]
            display_freq_esp();
 8001952:	f7ff fccf 	bl	80012f4 <display_freq_esp>
            // Setup clock with freq_esp
//            setup_clock(1, freq_esp, 0); //
            si5351_SetupCLK0(freq_esp, SI5351_DRIVE_STRENGTH_4MA);
 8001956:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <main+0x620>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2101      	movs	r1, #1
 800195c:	4618      	mov	r0, r3
 800195e:	f000 fb67 	bl	8002030 <si5351_SetupCLK0>
            si5351_SetupCLK1(freq_esp*2, SI5351_DRIVE_STRENGTH_4MA);
 8001962:	4b33      	ldr	r3, [pc, #204]	; (8001a30 <main+0x620>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2101      	movs	r1, #1
 800196a:	4618      	mov	r0, r3
 800196c:	f000 fb81 	bl	8002072 <si5351_SetupCLK1>
            si5351_SetupCLK2(freq_esp*10, SI5351_DRIVE_STRENGTH_4MA);
 8001970:	4b2f      	ldr	r3, [pc, #188]	; (8001a30 <main+0x620>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	2101      	movs	r1, #1
 800197e:	4618      	mov	r0, r3
 8001980:	f000 fb98 	bl	80020b4 <si5351_SetupCLK2>
            si5351_EnableOutputs((1<<0) | (1<<1) | (1<<2));
 8001984:	2007      	movs	r0, #7
 8001986:	f000 fbb6 	bl	80020f6 <si5351_EnableOutputs>
            HAL_Delay(300);
 800198a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800198e:	f001 f9dd 	bl	8002d4c <HAL_Delay>
        }

        if(button_kuning)
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <main+0x5e4>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <main+0x5a2>
        {
            submenu_active = 0;
 800199a:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <main+0x5f8>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
            menu_active = 1;
 80019a0:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <main+0x614>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
            display_menu();
 80019a6:	f7ff fbaf 	bl	8001108 <display_menu>
            HAL_Delay(300);
 80019aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80019ae:	f001 f9cd 	bl	8002d4c <HAL_Delay>
        }
    }
//
	  if(HAL_GetTick() - timerLed > 1000)
 80019b2:	f001 f9bf 	bl	8002d34 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <main+0x624>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019c2:	f67f ad79 	bls.w	80014b8 <main+0xa8>
	  {
		  timerLed = HAL_GetTick();
 80019c6:	f001 f9b5 	bl	8002d34 <HAL_GetTick>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <main+0x624>)
 80019ce:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80019d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019d4:	4818      	ldr	r0, [pc, #96]	; (8001a38 <main+0x628>)
 80019d6:	f001 fd36 	bl	8003446 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80019da:	e56d      	b.n	80014b8 <main+0xa8>
 80019dc:	2000019d 	.word	0x2000019d
 80019e0:	40020400 	.word	0x40020400
 80019e4:	20000198 	.word	0x20000198
 80019e8:	2000019b 	.word	0x2000019b
 80019ec:	40020000 	.word	0x40020000
 80019f0:	20000199 	.word	0x20000199
 80019f4:	2000019a 	.word	0x2000019a
 80019f8:	2000016a 	.word	0x2000016a
 80019fc:	200001ac 	.word	0x200001ac
 8001a00:	200001a8 	.word	0x200001a8
 8001a04:	55555556 	.word	0x55555556
 8001a08:	2000019c 	.word	0x2000019c
 8001a0c:	200001a4 	.word	0x200001a4
 8001a10:	20000000 	.word	0x20000000
 8001a14:	08006d60 	.word	0x08006d60
 8001a18:	08006d70 	.word	0x08006d70
 8001a1c:	08006d80 	.word	0x08006d80
 8001a20:	20000110 	.word	0x20000110
 8001a24:	20000010 	.word	0x20000010
 8001a28:	200001b0 	.word	0x200001b0
 8001a2c:	08006d90 	.word	0x08006d90
 8001a30:	20000194 	.word	0x20000194
 8001a34:	20000164 	.word	0x20000164
 8001a38:	40020800 	.word	0x40020800

08001a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b094      	sub	sp, #80	; 0x50
 8001a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a42:	f107 0320 	add.w	r3, r7, #32
 8001a46:	2230      	movs	r2, #48	; 0x30
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f004 fc86 	bl	800635c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <SystemClock_Config+0xcc>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	4a27      	ldr	r2, [pc, #156]	; (8001b08 <SystemClock_Config+0xcc>)
 8001a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a70:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <SystemClock_Config+0xcc>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <SystemClock_Config+0xd0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a88:	4a20      	ldr	r2, [pc, #128]	; (8001b0c <SystemClock_Config+0xd0>)
 8001a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <SystemClock_Config+0xd0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001ab0:	2319      	movs	r3, #25
 8001ab2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ab4:	23a8      	movs	r3, #168	; 0xa8
 8001ab6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001abc:	2304      	movs	r3, #4
 8001abe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac0:	f107 0320 	add.w	r3, r7, #32
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f002 fab5 	bl	8004034 <HAL_RCC_OscConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ad0:	f000 f8b8 	bl	8001c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad4:	230f      	movs	r3, #15
 8001ad6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	2102      	movs	r1, #2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 fd17 	bl	8004524 <HAL_RCC_ClockConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001afc:	f000 f8a2 	bl	8001c44 <Error_Handler>
  }
}
 8001b00:	bf00      	nop
 8001b02:	3750      	adds	r7, #80	; 0x50
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40007000 	.word	0x40007000

08001b10 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b20:	d10d      	bne.n	8001b3e <HAL_TIM_PeriodElapsedCallback+0x2e>
    {
        rotEnc = TIM5->CNT;
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	b21a      	sxth	r2, r3
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b2a:	801a      	strh	r2, [r3, #0]

        countEnc = rotEnc/2;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b32:	0fda      	lsrs	r2, r3, #31
 8001b34:	4413      	add	r3, r2
 8001b36:	105b      	asrs	r3, r3, #1
 8001b38:	b21a      	sxth	r2, r3
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001b3c:	801a      	strh	r2, [r3, #0]

//        TIM1->CNT = 0;
    }
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40000c00 	.word	0x40000c00
 8001b50:	20000168 	.word	0x20000168
 8001b54:	2000016a 	.word	0x2000016a

08001b58 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	// Master-slave
	if (huart->Instance == USART2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a30      	ldr	r2, [pc, #192]	; (8001c28 <HAL_UART_RxCpltCallback+0xd0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d15a      	bne.n	8001c20 <HAL_UART_RxCpltCallback+0xc8>
	{
		if (Rx_temp == 'i' && Rx_state == 0)
 8001b6a:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <HAL_UART_RxCpltCallback+0xd4>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b69      	cmp	r3, #105	; 0x69
 8001b70:	d110      	bne.n	8001b94 <HAL_UART_RxCpltCallback+0x3c>
 8001b72:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <HAL_UART_RxCpltCallback+0xd8>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10c      	bne.n	8001b94 <HAL_UART_RxCpltCallback+0x3c>
		{
			Rx_state = 1;
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <HAL_UART_RxCpltCallback+0xd8>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
			Rx_buff[0] = Rx_temp;
 8001b80:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <HAL_UART_RxCpltCallback+0xd4>)
 8001b82:	781a      	ldrb	r2, [r3, #0]
 8001b84:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <HAL_UART_RxCpltCallback+0xdc>)
 8001b86:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &Rx_temp, 1);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4928      	ldr	r1, [pc, #160]	; (8001c2c <HAL_UART_RxCpltCallback+0xd4>)
 8001b8c:	482a      	ldr	r0, [pc, #168]	; (8001c38 <HAL_UART_RxCpltCallback+0xe0>)
 8001b8e:	f003 fc8d 	bl	80054ac <HAL_UART_Receive_IT>
 8001b92:	e045      	b.n	8001c20 <HAL_UART_RxCpltCallback+0xc8>
		}
		else if (Rx_temp == 't' && Rx_state == 1)
 8001b94:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <HAL_UART_RxCpltCallback+0xd4>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b74      	cmp	r3, #116	; 0x74
 8001b9a:	d110      	bne.n	8001bbe <HAL_UART_RxCpltCallback+0x66>
 8001b9c:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <HAL_UART_RxCpltCallback+0xd8>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d10c      	bne.n	8001bbe <HAL_UART_RxCpltCallback+0x66>
		{
			Rx_state = 2;
 8001ba4:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <HAL_UART_RxCpltCallback+0xd8>)
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	701a      	strb	r2, [r3, #0]
			Rx_buff[1] = Rx_temp;
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_UART_RxCpltCallback+0xd4>)
 8001bac:	781a      	ldrb	r2, [r3, #0]
 8001bae:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <HAL_UART_RxCpltCallback+0xdc>)
 8001bb0:	705a      	strb	r2, [r3, #1]
			HAL_UART_Receive_IT(&huart2, &Rx_temp, 1);
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	491d      	ldr	r1, [pc, #116]	; (8001c2c <HAL_UART_RxCpltCallback+0xd4>)
 8001bb6:	4820      	ldr	r0, [pc, #128]	; (8001c38 <HAL_UART_RxCpltCallback+0xe0>)
 8001bb8:	f003 fc78 	bl	80054ac <HAL_UART_Receive_IT>
 8001bbc:	e030      	b.n	8001c20 <HAL_UART_RxCpltCallback+0xc8>
		}
		else if (Rx_temp == 's' && Rx_state == 2)
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_UART_RxCpltCallback+0xd4>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b73      	cmp	r3, #115	; 0x73
 8001bc4:	d111      	bne.n	8001bea <HAL_UART_RxCpltCallback+0x92>
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <HAL_UART_RxCpltCallback+0xd8>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d10d      	bne.n	8001bea <HAL_UART_RxCpltCallback+0x92>
		{
			Rx_state = 3;
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_UART_RxCpltCallback+0xd8>)
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	701a      	strb	r2, [r3, #0]
			Rx_buff[2] = Rx_temp;
 8001bd4:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_UART_RxCpltCallback+0xd4>)
 8001bd6:	781a      	ldrb	r2, [r3, #0]
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <HAL_UART_RxCpltCallback+0xdc>)
 8001bda:	709a      	strb	r2, [r3, #2]
			HAL_UART_Receive_IT(&huart2, Rx_buff + 3, 29);
 8001bdc:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <HAL_UART_RxCpltCallback+0xe4>)
 8001bde:	221d      	movs	r2, #29
 8001be0:	4619      	mov	r1, r3
 8001be2:	4815      	ldr	r0, [pc, #84]	; (8001c38 <HAL_UART_RxCpltCallback+0xe0>)
 8001be4:	f003 fc62 	bl	80054ac <HAL_UART_Receive_IT>
 8001be8:	e01a      	b.n	8001c20 <HAL_UART_RxCpltCallback+0xc8>
		}
		else if (Rx_state == 3)
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_UART_RxCpltCallback+0xd8>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d10d      	bne.n	8001c0e <HAL_UART_RxCpltCallback+0xb6>
		{
			memcpy(&freq_esp, Rx_buff + 3, sizeof(freq_esp));
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_UART_RxCpltCallback+0xe4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_UART_RxCpltCallback+0xe8>)
 8001bfa:	601a      	str	r2, [r3, #0]



			Rx_state = 0;
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <HAL_UART_RxCpltCallback+0xd8>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &Rx_temp, 1);
 8001c02:	2201      	movs	r2, #1
 8001c04:	4909      	ldr	r1, [pc, #36]	; (8001c2c <HAL_UART_RxCpltCallback+0xd4>)
 8001c06:	480c      	ldr	r0, [pc, #48]	; (8001c38 <HAL_UART_RxCpltCallback+0xe0>)
 8001c08:	f003 fc50 	bl	80054ac <HAL_UART_Receive_IT>
		{
			Rx_state = 0;
			HAL_UART_Receive_IT(&huart2, &Rx_temp, 1);
		}
	}
}
 8001c0c:	e008      	b.n	8001c20 <HAL_UART_RxCpltCallback+0xc8>
			Rx_state = 0;
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_UART_RxCpltCallback+0xd8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &Rx_temp, 1);
 8001c14:	2201      	movs	r2, #1
 8001c16:	4905      	ldr	r1, [pc, #20]	; (8001c2c <HAL_UART_RxCpltCallback+0xd4>)
 8001c18:	4807      	ldr	r0, [pc, #28]	; (8001c38 <HAL_UART_RxCpltCallback+0xe0>)
 8001c1a:	f003 fc47 	bl	80054ac <HAL_UART_Receive_IT>
}
 8001c1e:	e7ff      	b.n	8001c20 <HAL_UART_RxCpltCallback+0xc8>
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40004400 	.word	0x40004400
 8001c2c:	20000190 	.word	0x20000190
 8001c30:	20000191 	.word	0x20000191
 8001c34:	20000170 	.word	0x20000170
 8001c38:	20000654 	.word	0x20000654
 8001c3c:	20000173 	.word	0x20000173
 8001c40:	20000194 	.word	0x20000194

08001c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c48:	b672      	cpsid	i
}
 8001c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <Error_Handler+0x8>
	...

08001c50 <si5351_Init>:
 * Initializes Si5351. Call this function before doing anything else.
 * `Correction` is the difference of actual frequency and desired frequency @ 100 MHz.
 * It can be measured at lower frequencies and scaled linearly.
 * E.g. if you get 10_000_097 Hz instead of 10_000_000 Hz, `correction` is 97*10 = 970
 */
void si5351_Init(int32_t correction) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
    si5351Correction = correction;
 8001c58:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <si5351_Init+0x6c>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6013      	str	r3, [r2, #0]

    // Disable all outputs by setting CLKx_DIS high
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF);
 8001c5e:	21ff      	movs	r1, #255	; 0xff
 8001c60:	2003      	movs	r0, #3
 8001c62:	f000 fa59 	bl	8002118 <si5351_write>

    // Power down all output drivers
    si5351_write(SI5351_REGISTER_16_CLK0_CONTROL, 0x80);
 8001c66:	2180      	movs	r1, #128	; 0x80
 8001c68:	2010      	movs	r0, #16
 8001c6a:	f000 fa55 	bl	8002118 <si5351_write>
    si5351_write(SI5351_REGISTER_17_CLK1_CONTROL, 0x80);
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	2011      	movs	r0, #17
 8001c72:	f000 fa51 	bl	8002118 <si5351_write>
    si5351_write(SI5351_REGISTER_18_CLK2_CONTROL, 0x80);
 8001c76:	2180      	movs	r1, #128	; 0x80
 8001c78:	2012      	movs	r0, #18
 8001c7a:	f000 fa4d 	bl	8002118 <si5351_write>
    si5351_write(SI5351_REGISTER_19_CLK3_CONTROL, 0x80);
 8001c7e:	2180      	movs	r1, #128	; 0x80
 8001c80:	2013      	movs	r0, #19
 8001c82:	f000 fa49 	bl	8002118 <si5351_write>
    si5351_write(SI5351_REGISTER_20_CLK4_CONTROL, 0x80);
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	2014      	movs	r0, #20
 8001c8a:	f000 fa45 	bl	8002118 <si5351_write>
    si5351_write(SI5351_REGISTER_21_CLK5_CONTROL, 0x80);
 8001c8e:	2180      	movs	r1, #128	; 0x80
 8001c90:	2015      	movs	r0, #21
 8001c92:	f000 fa41 	bl	8002118 <si5351_write>
    si5351_write(SI5351_REGISTER_22_CLK6_CONTROL, 0x80);
 8001c96:	2180      	movs	r1, #128	; 0x80
 8001c98:	2016      	movs	r0, #22
 8001c9a:	f000 fa3d 	bl	8002118 <si5351_write>
    si5351_write(SI5351_REGISTER_23_CLK7_CONTROL, 0x80);
 8001c9e:	2180      	movs	r1, #128	; 0x80
 8001ca0:	2017      	movs	r0, #23
 8001ca2:	f000 fa39 	bl	8002118 <si5351_write>

    // Set the load capacitance for the XTAL
    si5351CrystalLoad_t crystalLoad = SI5351_CRYSTAL_LOAD_10PF;
 8001ca6:	23c0      	movs	r3, #192	; 0xc0
 8001ca8:	73fb      	strb	r3, [r7, #15]
    si5351_write(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE, crystalLoad);
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	4619      	mov	r1, r3
 8001cae:	20b7      	movs	r0, #183	; 0xb7
 8001cb0:	f000 fa32 	bl	8002118 <si5351_write>
}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200001b4 	.word	0x200001b4

08001cc0 <si5351_SetupPLL>:

// Sets the multiplier for given PLL
void si5351_SetupPLL(si5351PLL_t pll, si5351PLLConfig_t* conf) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08c      	sub	sp, #48	; 0x30
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
    int32_t P1, P2, P3;
    int32_t mult = conf->mult;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t num = conf->num;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	623b      	str	r3, [r7, #32]
    int32_t denom = conf->denom;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	61fb      	str	r3, [r7, #28]

    P1 = 128 * mult + (128 * num)/denom - 512;
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	01da      	lsls	r2, r3, #7
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	01d9      	lsls	r1, r3, #7
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fb91 f3f3 	sdiv	r3, r1, r3
 8001cec:	4413      	add	r3, r2
 8001cee:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001cf2:	61bb      	str	r3, [r7, #24]
    // P2 = 128 * num - denom * ((128 * num)/denom);
    P2 = (128 * num) % denom;
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	01db      	lsls	r3, r3, #7
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	fb93 f2f2 	sdiv	r2, r3, r2
 8001cfe:	69f9      	ldr	r1, [r7, #28]
 8001d00:	fb01 f202 	mul.w	r2, r1, r2
 8001d04:	1a9b      	subs	r3, r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
    P3 = denom;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	613b      	str	r3, [r7, #16]

    // Get the appropriate base address for the PLL registers
    uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <si5351_SetupPLL+0x56>
 8001d12:	231a      	movs	r3, #26
 8001d14:	e000      	b.n	8001d18 <si5351_SetupPLL+0x58>
 8001d16:	2322      	movs	r3, #34	; 0x22
 8001d18:	73fb      	strb	r3, [r7, #15]
    si5351_writeBulk(baseaddr, P1, P2, P3, 0, 0);
 8001d1a:	7bf8      	ldrb	r0, [r7, #15]
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	2300      	movs	r3, #0
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	69b9      	ldr	r1, [r7, #24]
 8001d2a:	f000 fa1d 	bl	8002168 <si5351_writeBulk>

    // Reset both PLLs
    si5351_write(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) );
 8001d2e:	21a0      	movs	r1, #160	; 0xa0
 8001d30:	20b1      	movs	r0, #177	; 0xb1
 8001d32:	f000 f9f1 	bl	8002118 <si5351_write>
}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <si5351_SetupOutput>:

// Configures PLL source, drive strength, multisynth divider, Rdivider and phaseOffset.
// Returns 0 on success, != 0 otherwise.
int si5351_SetupOutput(uint8_t output, si5351PLL_t pllSource, si5351DriveStrength_t driveStrength, si5351OutputConfig_t* conf, uint8_t phaseOffset) {
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b08c      	sub	sp, #48	; 0x30
 8001d42:	af02      	add	r7, sp, #8
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	71bb      	strb	r3, [r7, #6]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	717b      	strb	r3, [r7, #5]
    int32_t div = conf->div;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	613b      	str	r3, [r7, #16]
    int32_t num = conf->num;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	60fb      	str	r3, [r7, #12]
    int32_t denom = conf->denom;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	60bb      	str	r3, [r7, #8]
    uint8_t divBy4 = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t P1, P2, P3;

    if(output > 2) {
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <si5351_SetupOutput+0x36>
        return 1;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e08d      	b.n	8001e90 <si5351_SetupOutput+0x152>
    }

    if((!conf->allowIntegerMode) && ((div < 8) || ((div == 8) && (num == 0)))) {
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10a      	bne.n	8001d92 <si5351_SetupOutput+0x54>
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	2b07      	cmp	r3, #7
 8001d80:	dd05      	ble.n	8001d8e <si5351_SetupOutput+0x50>
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d104      	bne.n	8001d92 <si5351_SetupOutput+0x54>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <si5351_SetupOutput+0x54>
        // div in { 4, 6, 8 } is possible only in integer mode
        return 2;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e07e      	b.n	8001e90 <si5351_SetupOutput+0x152>
    }

    if(div == 4) {
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d109      	bne.n	8001dac <si5351_SetupOutput+0x6e>
        // special DIVBY4 case, see AN619 4.1.3
        P1 = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
        P2 = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61fb      	str	r3, [r7, #28]
        P3 = 1;
 8001da0:	2301      	movs	r3, #1
 8001da2:	61bb      	str	r3, [r7, #24]
        divBy4 = 0x3;
 8001da4:	2303      	movs	r3, #3
 8001da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001daa:	e016      	b.n	8001dda <si5351_SetupOutput+0x9c>
    } else {
        P1 = 128 * div + ((128 * num)/denom) - 512;
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	01da      	lsls	r2, r3, #7
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	01d9      	lsls	r1, r3, #7
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	fb91 f3f3 	sdiv	r3, r1, r3
 8001dba:	4413      	add	r3, r2
 8001dbc:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001dc0:	623b      	str	r3, [r7, #32]
        // P2 = 128 * num - denom * (128 * num)/denom;
        P2 = (128 * num) % denom;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	01db      	lsls	r3, r3, #7
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	fb93 f2f2 	sdiv	r2, r3, r2
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	fb01 f202 	mul.w	r2, r1, r2
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	61fb      	str	r3, [r7, #28]
        P3 = denom;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	61bb      	str	r3, [r7, #24]
    }

    // Get the register addresses for given channel
    uint8_t baseaddr = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	75fb      	strb	r3, [r7, #23]
    uint8_t phaseOffsetRegister = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	75bb      	strb	r3, [r7, #22]
    uint8_t clkControlRegister = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	757b      	strb	r3, [r7, #21]
    switch (output) {
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d014      	beq.n	8001e16 <si5351_SetupOutput+0xd8>
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	dc19      	bgt.n	8001e24 <si5351_SetupOutput+0xe6>
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <si5351_SetupOutput+0xbc>
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d007      	beq.n	8001e08 <si5351_SetupOutput+0xca>
 8001df8:	e014      	b.n	8001e24 <si5351_SetupOutput+0xe6>
    case 0:
        baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 8001dfa:	232a      	movs	r3, #42	; 0x2a
 8001dfc:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_165_CLK0_INITIAL_PHASE_OFFSET;
 8001dfe:	23a5      	movs	r3, #165	; 0xa5
 8001e00:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_16_CLK0_CONTROL;
 8001e02:	2310      	movs	r3, #16
 8001e04:	757b      	strb	r3, [r7, #21]
        break;
 8001e06:	e00d      	b.n	8001e24 <si5351_SetupOutput+0xe6>
    case 1:
        baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 8001e08:	2332      	movs	r3, #50	; 0x32
 8001e0a:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_166_CLK1_INITIAL_PHASE_OFFSET;
 8001e0c:	23a6      	movs	r3, #166	; 0xa6
 8001e0e:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_17_CLK1_CONTROL;
 8001e10:	2311      	movs	r3, #17
 8001e12:	757b      	strb	r3, [r7, #21]
        break;
 8001e14:	e006      	b.n	8001e24 <si5351_SetupOutput+0xe6>
    case 2:
        baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 8001e16:	233a      	movs	r3, #58	; 0x3a
 8001e18:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_167_CLK2_INITIAL_PHASE_OFFSET;
 8001e1a:	23a7      	movs	r3, #167	; 0xa7
 8001e1c:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_18_CLK2_CONTROL;
 8001e1e:	2312      	movs	r3, #18
 8001e20:	757b      	strb	r3, [r7, #21]
        break;
 8001e22:	bf00      	nop
    }

    uint8_t clkControl = 0x0C | driveStrength; // clock not inverted, powered up
 8001e24:	797b      	ldrb	r3, [r7, #5]
 8001e26:	f043 030c 	orr.w	r3, r3, #12
 8001e2a:	753b      	strb	r3, [r7, #20]
    if(pllSource == SI5351_PLL_B) {
 8001e2c:	79bb      	ldrb	r3, [r7, #6]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d103      	bne.n	8001e3a <si5351_SetupOutput+0xfc>
        clkControl |= (1 << 5); // Uses PLLB
 8001e32:	7d3b      	ldrb	r3, [r7, #20]
 8001e34:	f043 0320 	orr.w	r3, r3, #32
 8001e38:	753b      	strb	r3, [r7, #20]
    }

    if((conf->allowIntegerMode) && ((num == 0)||(div == 4))) {
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d009      	beq.n	8001e56 <si5351_SetupOutput+0x118>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <si5351_SetupOutput+0x110>
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d103      	bne.n	8001e56 <si5351_SetupOutput+0x118>
        // use integer mode
        clkControl |= (1 << 6);
 8001e4e:	7d3b      	ldrb	r3, [r7, #20]
 8001e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e54:	753b      	strb	r3, [r7, #20]
    }

    si5351_write(clkControlRegister, clkControl);
 8001e56:	7d3a      	ldrb	r2, [r7, #20]
 8001e58:	7d7b      	ldrb	r3, [r7, #21]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 f95b 	bl	8002118 <si5351_write>
    si5351_writeBulk(baseaddr, P1, P2, P3, divBy4, conf->rdiv);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	7c1b      	ldrb	r3, [r3, #16]
 8001e66:	7df8      	ldrb	r0, [r7, #23]
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	69fa      	ldr	r2, [r7, #28]
 8001e74:	6a39      	ldr	r1, [r7, #32]
 8001e76:	f000 f977 	bl	8002168 <si5351_writeBulk>
    si5351_write(phaseOffsetRegister, (phaseOffset & 0x7F));
 8001e7a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	7dbb      	ldrb	r3, [r7, #22]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 f945 	bl	8002118 <si5351_write>

    return 0;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3728      	adds	r7, #40	; 0x28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <si5351_Calc>:

// Calculates PLL, MS and RDiv settings for given Fclk in [8_000, 160_000_000] range.
// The actual frequency will differ less than 6 Hz from given Fclk, assuming `correction` is right.
void si5351_Calc(int32_t Fclk, si5351PLLConfig_t* pll_conf, si5351OutputConfig_t* out_conf) {
 8001e98:	b5b0      	push	{r4, r5, r7, lr}
 8001e9a:	b08e      	sub	sp, #56	; 0x38
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
    if(Fclk < 8000) Fclk = 8000;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001eaa:	da03      	bge.n	8001eb4 <si5351_Calc+0x1c>
 8001eac:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	e005      	b.n	8001ec0 <si5351_Calc+0x28>
    else if(Fclk > 160000000) Fclk = 160000000;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4a56      	ldr	r2, [pc, #344]	; (8002010 <si5351_Calc+0x178>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	dd01      	ble.n	8001ec0 <si5351_Calc+0x28>
 8001ebc:	4b54      	ldr	r3, [pc, #336]	; (8002010 <si5351_Calc+0x178>)
 8001ebe:	60fb      	str	r3, [r7, #12]

    out_conf->allowIntegerMode = 1;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]

    if(Fclk < 1000000) {
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4a52      	ldr	r2, [pc, #328]	; (8002014 <si5351_Calc+0x17c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	dc06      	bgt.n	8001edc <si5351_Calc+0x44>
        // For frequencies in [8_000, 500_000] range we can use si5351_Calc(Fclk*64, ...) and SI5351_R_DIV_64.
        // In practice it's worth doing for any frequency below 1 MHz, since it reduces the error.
        Fclk *= 64;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	019b      	lsls	r3, r3, #6
 8001ed2:	60fb      	str	r3, [r7, #12]
        out_conf->rdiv = SI5351_R_DIV_64;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2206      	movs	r2, #6
 8001ed8:	741a      	strb	r2, [r3, #16]
 8001eda:	e002      	b.n	8001ee2 <si5351_Calc+0x4a>
    } else {
        out_conf->rdiv = SI5351_R_DIV_1;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	741a      	strb	r2, [r3, #16]
    }

    // Apply correction, _after_ determining rdiv.
    Fclk = Fclk - (int32_t)((((double)Fclk)/100000000.0)*((double)si5351Correction));
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f7fe fb1e 	bl	8000524 <__aeabi_i2d>
 8001ee8:	a347      	add	r3, pc, #284	; (adr r3, 8002008 <si5351_Calc+0x170>)
 8001eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eee:	f7fe fcad 	bl	800084c <__aeabi_ddiv>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4614      	mov	r4, r2
 8001ef8:	461d      	mov	r5, r3
 8001efa:	4b47      	ldr	r3, [pc, #284]	; (8002018 <si5351_Calc+0x180>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fb10 	bl	8000524 <__aeabi_i2d>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4620      	mov	r0, r4
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	f7fe fb74 	bl	80005f8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f7fe fd80 	bl	8000a1c <__aeabi_d2iz>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
    // b,c,y,z <= 2**20
    // c, z != 0
    // For any Fclk in [500K, 160MHz] this algorithm finds a solution
    // such as abs(Ffound - Fclk) <= 6 Hz

    const int32_t Fxtal = 25000000;
 8001f24:	4b3d      	ldr	r3, [pc, #244]	; (800201c <si5351_Calc+0x184>)
 8001f26:	61fb      	str	r3, [r7, #28]
    int32_t a, b, c, x, y, z, t;

    if(Fclk < 81000000) {
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4a3d      	ldr	r2, [pc, #244]	; (8002020 <si5351_Calc+0x188>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	dc22      	bgt.n	8001f76 <si5351_Calc+0xde>
        // Valid for Fclk in 0.5..112.5 MHz range
        // However an error is > 6 Hz above 81 MHz
        a = 36; // PLL runs @ 900 MHz
 8001f30:	2324      	movs	r3, #36	; 0x24
 8001f32:	637b      	str	r3, [r7, #52]	; 0x34
        b = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	633b      	str	r3, [r7, #48]	; 0x30
        c = 1;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t Fpll = 900000000;
 8001f3c:	4b39      	ldr	r3, [pc, #228]	; (8002024 <si5351_Calc+0x18c>)
 8001f3e:	613b      	str	r3, [r7, #16]
        x = Fpll/Fclk;
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f48:	62bb      	str	r3, [r7, #40]	; 0x28
        t = (Fclk >> 20) + 1;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	151b      	asrs	r3, r3, #20
 8001f4e:	3301      	adds	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
        y = (Fpll % Fclk) / t;
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	fb93 f2f2 	sdiv	r2, r3, r2
 8001f5a:	68f9      	ldr	r1, [r7, #12]
 8001f5c:	fb01 f202 	mul.w	r2, r1, r2
 8001f60:	1a9a      	subs	r2, r3, r2
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
        z = Fclk / t;
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f72:	623b      	str	r3, [r7, #32]
 8001f74:	e032      	b.n	8001fdc <si5351_Calc+0x144>
    } else {
        // Valid for Fclk in 75..160 MHz range
        if(Fclk >= 150000000) {
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4a2b      	ldr	r2, [pc, #172]	; (8002028 <si5351_Calc+0x190>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	dd02      	ble.n	8001f84 <si5351_Calc+0xec>
            x = 4;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f82:	e008      	b.n	8001f96 <si5351_Calc+0xfe>
        } else if (Fclk >= 100000000) {
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a29      	ldr	r2, [pc, #164]	; (800202c <si5351_Calc+0x194>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	dd02      	ble.n	8001f92 <si5351_Calc+0xfa>
            x = 6;
 8001f8c:	2306      	movs	r3, #6
 8001f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f90:	e001      	b.n	8001f96 <si5351_Calc+0xfe>
        } else {
            x = 8;
 8001f92:	2308      	movs	r3, #8
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        y = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
        z = 1;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	623b      	str	r3, [r7, #32]

        int32_t numerator = x*Fclk;
 8001f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	61bb      	str	r3, [r7, #24]
        a = numerator/Fxtal;
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fb0:	637b      	str	r3, [r7, #52]	; 0x34
        t = (Fxtal >> 20) + 1;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	151b      	asrs	r3, r3, #20
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
        b = (numerator % Fxtal) / t;
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	fb93 f2f2 	sdiv	r2, r3, r2
 8001fc2:	69f9      	ldr	r1, [r7, #28]
 8001fc4:	fb01 f202 	mul.w	r2, r1, r2
 8001fc8:	1a9a      	subs	r2, r3, r2
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fd0:	633b      	str	r3, [r7, #48]	; 0x30
        c = Fxtal / t;
 8001fd2:	69fa      	ldr	r2, [r7, #28]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    pll_conf->mult = a;
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fe0:	601a      	str	r2, [r3, #0]
    pll_conf->num = b;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fe6:	605a      	str	r2, [r3, #4]
    pll_conf->denom = c;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fec:	609a      	str	r2, [r3, #8]
    out_conf->div = x;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ff2:	605a      	str	r2, [r3, #4]
    out_conf->num = y;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff8:	609a      	str	r2, [r3, #8]
    out_conf->denom = z;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a3a      	ldr	r2, [r7, #32]
 8001ffe:	60da      	str	r2, [r3, #12]
}
 8002000:	bf00      	nop
 8002002:	3738      	adds	r7, #56	; 0x38
 8002004:	46bd      	mov	sp, r7
 8002006:	bdb0      	pop	{r4, r5, r7, pc}
 8002008:	00000000 	.word	0x00000000
 800200c:	4197d784 	.word	0x4197d784
 8002010:	09896800 	.word	0x09896800
 8002014:	000f423f 	.word	0x000f423f
 8002018:	200001b4 	.word	0x200001b4
 800201c:	017d7840 	.word	0x017d7840
 8002020:	04d3f63f 	.word	0x04d3f63f
 8002024:	35a4e900 	.word	0x35a4e900
 8002028:	08f0d17f 	.word	0x08f0d17f
 800202c:	05f5e0ff 	.word	0x05f5e0ff

08002030 <si5351_SetupCLK0>:
    pll_conf->num = (Fpll % Fxtal) / 24;
    pll_conf->denom = Fxtal / 24; // denom can't exceed 0xFFFFF
}

// Setup CLK0 for given frequency and drive strength. Use PLLA.
void si5351_SetupCLK0(int32_t Fclk, si5351DriveStrength_t driveStrength) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b08c      	sub	sp, #48	; 0x30
 8002034:	af02      	add	r7, sp, #8
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	70fb      	strb	r3, [r7, #3]
	si5351PLLConfig_t pll_conf;
	si5351OutputConfig_t out_conf;

	si5351_Calc(Fclk, &pll_conf, &out_conf);
 800203c:	f107 0208 	add.w	r2, r7, #8
 8002040:	f107 031c 	add.w	r3, r7, #28
 8002044:	4619      	mov	r1, r3
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff ff26 	bl	8001e98 <si5351_Calc>
	si5351_SetupPLL(SI5351_PLL_A, &pll_conf);
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	4619      	mov	r1, r3
 8002052:	2000      	movs	r0, #0
 8002054:	f7ff fe34 	bl	8001cc0 <si5351_SetupPLL>
	si5351_SetupOutput(0, SI5351_PLL_A, driveStrength, &out_conf, 0);
 8002058:	f107 0308 	add.w	r3, r7, #8
 800205c:	78fa      	ldrb	r2, [r7, #3]
 800205e:	2100      	movs	r1, #0
 8002060:	9100      	str	r1, [sp, #0]
 8002062:	2100      	movs	r1, #0
 8002064:	2000      	movs	r0, #0
 8002066:	f7ff fe6a 	bl	8001d3e <si5351_SetupOutput>
}
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	; 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <si5351_SetupCLK1>:

// Setup CLK1 for given frequency and drive strength. Use PLLA.
void si5351_SetupCLK1(int32_t Fclk, si5351DriveStrength_t driveStrength) {
 8002072:	b580      	push	{r7, lr}
 8002074:	b08c      	sub	sp, #48	; 0x30
 8002076:	af02      	add	r7, sp, #8
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	70fb      	strb	r3, [r7, #3]
    si5351PLLConfig_t pll_conf;
    si5351OutputConfig_t out_conf;

    si5351_Calc(Fclk, &pll_conf, &out_conf);
 800207e:	f107 0208 	add.w	r2, r7, #8
 8002082:	f107 031c 	add.w	r3, r7, #28
 8002086:	4619      	mov	r1, r3
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff05 	bl	8001e98 <si5351_Calc>
    si5351_SetupPLL(SI5351_PLL_A, &pll_conf);
 800208e:	f107 031c 	add.w	r3, r7, #28
 8002092:	4619      	mov	r1, r3
 8002094:	2000      	movs	r0, #0
 8002096:	f7ff fe13 	bl	8001cc0 <si5351_SetupPLL>
    si5351_SetupOutput(1, SI5351_PLL_A, driveStrength, &out_conf, 0);
 800209a:	f107 0308 	add.w	r3, r7, #8
 800209e:	78fa      	ldrb	r2, [r7, #3]
 80020a0:	2100      	movs	r1, #0
 80020a2:	9100      	str	r1, [sp, #0]
 80020a4:	2100      	movs	r1, #0
 80020a6:	2001      	movs	r0, #1
 80020a8:	f7ff fe49 	bl	8001d3e <si5351_SetupOutput>
}
 80020ac:	bf00      	nop
 80020ae:	3728      	adds	r7, #40	; 0x28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <si5351_SetupCLK2>:

// Setup CLK2 for given frequency and drive strength. Use PLLB.
void si5351_SetupCLK2(int32_t Fclk, si5351DriveStrength_t driveStrength) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08c      	sub	sp, #48	; 0x30
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	70fb      	strb	r3, [r7, #3]
	si5351PLLConfig_t pll_conf;
	si5351OutputConfig_t out_conf;

	si5351_Calc(Fclk, &pll_conf, &out_conf);
 80020c0:	f107 0208 	add.w	r2, r7, #8
 80020c4:	f107 031c 	add.w	r3, r7, #28
 80020c8:	4619      	mov	r1, r3
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff fee4 	bl	8001e98 <si5351_Calc>
	si5351_SetupPLL(SI5351_PLL_B, &pll_conf);
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	4619      	mov	r1, r3
 80020d6:	2001      	movs	r0, #1
 80020d8:	f7ff fdf2 	bl	8001cc0 <si5351_SetupPLL>
	si5351_SetupOutput(2, SI5351_PLL_B, driveStrength, &out_conf, 0);
 80020dc:	f107 0308 	add.w	r3, r7, #8
 80020e0:	78fa      	ldrb	r2, [r7, #3]
 80020e2:	2100      	movs	r1, #0
 80020e4:	9100      	str	r1, [sp, #0]
 80020e6:	2101      	movs	r1, #1
 80020e8:	2002      	movs	r0, #2
 80020ea:	f7ff fe28 	bl	8001d3e <si5351_SetupOutput>
}
 80020ee:	bf00      	nop
 80020f0:	3728      	adds	r7, #40	; 0x28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <si5351_EnableOutputs>:

// Enables or disables outputs depending on provided bitmask.
// Examples:
// si5351_EnableOutputs(1 << 0) enables CLK0 and disables CLK1 and CLK2
// si5351_EnableOutputs((1 << 2) | (1 << 0)) enables CLK0 and CLK2 and disables CLK1
void si5351_EnableOutputs(uint8_t enabled) {
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	71fb      	strb	r3, [r7, #7]
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, ~enabled);
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	43db      	mvns	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	4619      	mov	r1, r3
 8002108:	2003      	movs	r0, #3
 800210a:	f000 f805 	bl	8002118 <si5351_write>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <si5351_write>:

// Writes an 8 bit value of a register over I2C.
void si5351_write(uint8_t reg, uint8_t value) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af04      	add	r7, sp, #16
 800211e:	4603      	mov	r3, r0
 8002120:	460a      	mov	r2, r1
 8002122:	71fb      	strb	r3, [r7, #7]
 8002124:	4613      	mov	r3, r2
 8002126:	71bb      	strb	r3, [r7, #6]
    while (HAL_I2C_IsDeviceReady(&I2C_HANDLE, (uint16_t)(SI5351_ADDRESS<<1), 3, HAL_MAX_DELAY) != HAL_OK) { }
 8002128:	bf00      	nop
 800212a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800212e:	2203      	movs	r2, #3
 8002130:	21c0      	movs	r1, #192	; 0xc0
 8002132:	480c      	ldr	r0, [pc, #48]	; (8002164 <si5351_write+0x4c>)
 8002134:	f001 fbe0 	bl	80038f8 <HAL_I2C_IsDeviceReady>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f5      	bne.n	800212a <si5351_write+0x12>

    HAL_I2C_Mem_Write(&I2C_HANDLE,                  // i2c handle
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	b29a      	uxth	r2, r3
 8002142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002146:	9302      	str	r3, [sp, #8]
 8002148:	2301      	movs	r3, #1
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	1dbb      	adds	r3, r7, #6
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2301      	movs	r3, #1
 8002152:	21c0      	movs	r1, #192	; 0xc0
 8002154:	4803      	ldr	r0, [pc, #12]	; (8002164 <si5351_write+0x4c>)
 8002156:	f001 fad5 	bl	8003704 <HAL_I2C_Mem_Write>
                      (uint8_t)reg,                 // register address
                      I2C_MEMADD_SIZE_8BIT,         // si5351 uses 8bit register addresses
                      (uint8_t*)(&value),           // write returned data to this variable
                      1,                            // how many bytes to expect returned
                      HAL_MAX_DELAY);               // timeout
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200000bc 	.word	0x200000bc

08002168 <si5351_writeBulk>:

// Common code for _SetupPLL and _SetupOutput
void si5351_writeBulk(uint8_t baseaddr, int32_t P1, int32_t P2, int32_t P3, uint8_t divBy4, si5351RDiv_t rdiv) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	4603      	mov	r3, r0
 8002176:	73fb      	strb	r3, [r7, #15]
    si5351_write(baseaddr,   (P3 >> 8) & 0xFF);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	121b      	asrs	r3, r3, #8
 800217c:	b2da      	uxtb	r2, r3
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ffc8 	bl	8002118 <si5351_write>
    si5351_write(baseaddr+1, P3 & 0xFF);
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	3301      	adds	r3, #1
 800218c:	b2db      	uxtb	r3, r3
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ffbf 	bl	8002118 <si5351_write>
    si5351_write(baseaddr+2, ((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	3302      	adds	r3, #2
 800219e:	b2d8      	uxtb	r0, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	141b      	asrs	r3, r3, #16
 80021a4:	b25b      	sxtb	r3, r3
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	b25a      	sxtb	r2, r3
 80021ac:	7e3b      	ldrb	r3, [r7, #24]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	b25b      	sxtb	r3, r3
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	4313      	orrs	r3, r2
 80021ba:	b25a      	sxtb	r2, r3
 80021bc:	7f3b      	ldrb	r3, [r7, #28]
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	b25b      	sxtb	r3, r3
 80021c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021c6:	b25b      	sxtb	r3, r3
 80021c8:	4313      	orrs	r3, r2
 80021ca:	b25b      	sxtb	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	4619      	mov	r1, r3
 80021d0:	f7ff ffa2 	bl	8002118 <si5351_write>
    si5351_write(baseaddr+3, (P1 >> 8) & 0xFF);
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	3303      	adds	r3, #3
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	121b      	asrs	r3, r3, #8
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	4619      	mov	r1, r3
 80021e2:	4610      	mov	r0, r2
 80021e4:	f7ff ff98 	bl	8002118 <si5351_write>
    si5351_write(baseaddr+4, P1 & 0xFF);
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	3304      	adds	r3, #4
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff8f 	bl	8002118 <si5351_write>
    si5351_write(baseaddr+5, ((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	3305      	adds	r3, #5
 80021fe:	b2d8      	uxtb	r0, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	131b      	asrs	r3, r3, #12
 8002204:	b25b      	sxtb	r3, r3
 8002206:	f023 030f 	bic.w	r3, r3, #15
 800220a:	b25a      	sxtb	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	141b      	asrs	r3, r3, #16
 8002210:	b25b      	sxtb	r3, r3
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	b25b      	sxtb	r3, r3
 8002218:	4313      	orrs	r3, r2
 800221a:	b25b      	sxtb	r3, r3
 800221c:	b2db      	uxtb	r3, r3
 800221e:	4619      	mov	r1, r3
 8002220:	f7ff ff7a 	bl	8002118 <si5351_write>
    si5351_write(baseaddr+6, (P2 >> 8) & 0xFF);
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	3306      	adds	r3, #6
 8002228:	b2da      	uxtb	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	121b      	asrs	r3, r3, #8
 800222e:	b2db      	uxtb	r3, r3
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f7ff ff70 	bl	8002118 <si5351_write>
    si5351_write(baseaddr+7, P2 & 0xFF);
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	3307      	adds	r3, #7
 800223c:	b2db      	uxtb	r3, r3
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff67 	bl	8002118 <si5351_write>
}
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af04      	add	r7, sp, #16
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	460b      	mov	r3, r1
 800225c:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 800225e:	230a      	movs	r3, #10
 8002260:	9302      	str	r3, [sp, #8]
 8002262:	2301      	movs	r3, #1
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	1cfb      	adds	r3, r7, #3
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2301      	movs	r3, #1
 800226c:	2200      	movs	r2, #0
 800226e:	2178      	movs	r1, #120	; 0x78
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f001 fa47 	bl	8003704 <HAL_I2C_Mem_Write>
 8002276:	4603      	mov	r3, r0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8002288:	2064      	movs	r0, #100	; 0x64
 800228a:	f000 fd5f 	bl	8002d4c <HAL_Delay>
    int status = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8002292:	21ae      	movs	r1, #174	; 0xae
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ffdc 	bl	8002252 <ssd1306_WriteCommand>
 800229a:	4603      	mov	r3, r0
 800229c:	461a      	mov	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4413      	add	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 80022a4:	2120      	movs	r1, #32
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ffd3 	bl	8002252 <ssd1306_WriteCommand>
 80022ac:	4603      	mov	r3, r0
 80022ae:	461a      	mov	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80022b6:	2110      	movs	r1, #16
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ffca 	bl	8002252 <ssd1306_WriteCommand>
 80022be:	4603      	mov	r3, r0
 80022c0:	461a      	mov	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4413      	add	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80022c8:	21b0      	movs	r1, #176	; 0xb0
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ffc1 	bl	8002252 <ssd1306_WriteCommand>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461a      	mov	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80022da:	21c8      	movs	r1, #200	; 0xc8
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ffb8 	bl	8002252 <ssd1306_WriteCommand>
 80022e2:	4603      	mov	r3, r0
 80022e4:	461a      	mov	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4413      	add	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 80022ec:	2100      	movs	r1, #0
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ffaf 	bl	8002252 <ssd1306_WriteCommand>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 80022fe:	2110      	movs	r1, #16
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ffa6 	bl	8002252 <ssd1306_WriteCommand>
 8002306:	4603      	mov	r3, r0
 8002308:	461a      	mov	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4413      	add	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8002310:	2140      	movs	r1, #64	; 0x40
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff ff9d 	bl	8002252 <ssd1306_WriteCommand>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8002322:	2181      	movs	r1, #129	; 0x81
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff94 	bl	8002252 <ssd1306_WriteCommand>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4413      	add	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8002334:	21ff      	movs	r1, #255	; 0xff
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ff8b 	bl	8002252 <ssd1306_WriteCommand>
 800233c:	4603      	mov	r3, r0
 800233e:	461a      	mov	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4413      	add	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8002346:	21a1      	movs	r1, #161	; 0xa1
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff82 	bl	8002252 <ssd1306_WriteCommand>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4413      	add	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8002358:	21a6      	movs	r1, #166	; 0xa6
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ff79 	bl	8002252 <ssd1306_WriteCommand>
 8002360:	4603      	mov	r3, r0
 8002362:	461a      	mov	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4413      	add	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 800236a:	21a8      	movs	r1, #168	; 0xa8
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ff70 	bl	8002252 <ssd1306_WriteCommand>
 8002372:	4603      	mov	r3, r0
 8002374:	461a      	mov	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4413      	add	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 800237c:	213f      	movs	r1, #63	; 0x3f
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff ff67 	bl	8002252 <ssd1306_WriteCommand>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4413      	add	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800238e:	21a4      	movs	r1, #164	; 0xa4
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ff5e 	bl	8002252 <ssd1306_WriteCommand>
 8002396:	4603      	mov	r3, r0
 8002398:	461a      	mov	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4413      	add	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 80023a0:	21d3      	movs	r1, #211	; 0xd3
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff ff55 	bl	8002252 <ssd1306_WriteCommand>
 80023a8:	4603      	mov	r3, r0
 80023aa:	461a      	mov	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4413      	add	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 80023b2:	2100      	movs	r1, #0
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff4c 	bl	8002252 <ssd1306_WriteCommand>
 80023ba:	4603      	mov	r3, r0
 80023bc:	461a      	mov	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4413      	add	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 80023c4:	21d5      	movs	r1, #213	; 0xd5
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ff43 	bl	8002252 <ssd1306_WriteCommand>
 80023cc:	4603      	mov	r3, r0
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 80023d6:	21f0      	movs	r1, #240	; 0xf0
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff3a 	bl	8002252 <ssd1306_WriteCommand>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4413      	add	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 80023e8:	21d9      	movs	r1, #217	; 0xd9
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ff31 	bl	8002252 <ssd1306_WriteCommand>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461a      	mov	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4413      	add	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 80023fa:	2122      	movs	r1, #34	; 0x22
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ff28 	bl	8002252 <ssd1306_WriteCommand>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4413      	add	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 800240c:	21da      	movs	r1, #218	; 0xda
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ff1f 	bl	8002252 <ssd1306_WriteCommand>
 8002414:	4603      	mov	r3, r0
 8002416:	461a      	mov	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4413      	add	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 800241e:	2112      	movs	r1, #18
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff16 	bl	8002252 <ssd1306_WriteCommand>
 8002426:	4603      	mov	r3, r0
 8002428:	461a      	mov	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4413      	add	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8002430:	21db      	movs	r1, #219	; 0xdb
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ff0d 	bl	8002252 <ssd1306_WriteCommand>
 8002438:	4603      	mov	r3, r0
 800243a:	461a      	mov	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4413      	add	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8002442:	2120      	movs	r1, #32
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff ff04 	bl	8002252 <ssd1306_WriteCommand>
 800244a:	4603      	mov	r3, r0
 800244c:	461a      	mov	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4413      	add	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8002454:	218d      	movs	r1, #141	; 0x8d
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fefb 	bl	8002252 <ssd1306_WriteCommand>
 800245c:	4603      	mov	r3, r0
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8002466:	2114      	movs	r1, #20
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff fef2 	bl	8002252 <ssd1306_WriteCommand>
 800246e:	4603      	mov	r3, r0
 8002470:	461a      	mov	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4413      	add	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8002478:	21af      	movs	r1, #175	; 0xaf
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff fee9 	bl	8002252 <ssd1306_WriteCommand>
 8002480:	4603      	mov	r3, r0
 8002482:	461a      	mov	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4413      	add	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <ssd1306_Init+0x214>
        return 1;
 8002490:	2301      	movs	r3, #1
 8002492:	e00f      	b.n	80024b4 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8002494:	2000      	movs	r0, #0
 8002496:	f000 f813 	bl	80024c0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f834 	bl	8002508 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <ssd1306_Init+0x23c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <ssd1306_Init+0x23c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <ssd1306_Init+0x23c>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	715a      	strb	r2, [r3, #5]

    return 0;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	200005b8 	.word	0x200005b8

080024c0 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	e00d      	b.n	80024ec <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <ssd1306_Fill+0x1a>
 80024d6:	2100      	movs	r1, #0
 80024d8:	e000      	b.n	80024dc <ssd1306_Fill+0x1c>
 80024da:	21ff      	movs	r1, #255	; 0xff
 80024dc:	4a09      	ldr	r2, [pc, #36]	; (8002504 <ssd1306_Fill+0x44>)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4413      	add	r3, r2
 80024e2:	460a      	mov	r2, r1
 80024e4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	3301      	adds	r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f2:	d3ed      	bcc.n	80024d0 <ssd1306_Fill+0x10>
    }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	200001b8 	.word	0x200001b8

08002508 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af04      	add	r7, sp, #16
 800250e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	e020      	b.n	8002558 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	3b50      	subs	r3, #80	; 0x50
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4619      	mov	r1, r3
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fe97 	bl	8002252 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8002524:	2100      	movs	r1, #0
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff fe93 	bl	8002252 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 800252c:	2110      	movs	r1, #16
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff fe8f 	bl	8002252 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	01db      	lsls	r3, r3, #7
 8002538:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <ssd1306_UpdateScreen+0x60>)
 800253a:	4413      	add	r3, r2
 800253c:	2264      	movs	r2, #100	; 0x64
 800253e:	9202      	str	r2, [sp, #8]
 8002540:	2280      	movs	r2, #128	; 0x80
 8002542:	9201      	str	r2, [sp, #4]
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	2301      	movs	r3, #1
 8002548:	2240      	movs	r2, #64	; 0x40
 800254a:	2178      	movs	r1, #120	; 0x78
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f001 f8d9 	bl	8003704 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	3301      	adds	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	2b07      	cmp	r3, #7
 800255c:	d9db      	bls.n	8002516 <ssd1306_UpdateScreen+0xe>
    }
}
 800255e:	bf00      	nop
 8002560:	bf00      	nop
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	200001b8 	.word	0x200001b8

0800256c <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
 8002576:	460b      	mov	r3, r1
 8002578:	71bb      	strb	r3, [r7, #6]
 800257a:	4613      	mov	r3, r2
 800257c:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	2b00      	cmp	r3, #0
 8002584:	db48      	blt.n	8002618 <ssd1306_DrawPixel+0xac>
 8002586:	79bb      	ldrb	r3, [r7, #6]
 8002588:	2b3f      	cmp	r3, #63	; 0x3f
 800258a:	d845      	bhi.n	8002618 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 800258c:	4b25      	ldr	r3, [pc, #148]	; (8002624 <ssd1306_DrawPixel+0xb8>)
 800258e:	791b      	ldrb	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d006      	beq.n	80025a2 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8002594:	797b      	ldrb	r3, [r7, #5]
 8002596:	2b00      	cmp	r3, #0
 8002598:	bf0c      	ite	eq
 800259a:	2301      	moveq	r3, #1
 800259c:	2300      	movne	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 80025a2:	797b      	ldrb	r3, [r7, #5]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d11a      	bne.n	80025de <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80025a8:	79fa      	ldrb	r2, [r7, #7]
 80025aa:	79bb      	ldrb	r3, [r7, #6]
 80025ac:	08db      	lsrs	r3, r3, #3
 80025ae:	b2d8      	uxtb	r0, r3
 80025b0:	4603      	mov	r3, r0
 80025b2:	01db      	lsls	r3, r3, #7
 80025b4:	4413      	add	r3, r2
 80025b6:	4a1c      	ldr	r2, [pc, #112]	; (8002628 <ssd1306_DrawPixel+0xbc>)
 80025b8:	5cd3      	ldrb	r3, [r2, r3]
 80025ba:	b25a      	sxtb	r2, r3
 80025bc:	79bb      	ldrb	r3, [r7, #6]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	2101      	movs	r1, #1
 80025c4:	fa01 f303 	lsl.w	r3, r1, r3
 80025c8:	b25b      	sxtb	r3, r3
 80025ca:	4313      	orrs	r3, r2
 80025cc:	b259      	sxtb	r1, r3
 80025ce:	79fa      	ldrb	r2, [r7, #7]
 80025d0:	4603      	mov	r3, r0
 80025d2:	01db      	lsls	r3, r3, #7
 80025d4:	4413      	add	r3, r2
 80025d6:	b2c9      	uxtb	r1, r1
 80025d8:	4a13      	ldr	r2, [pc, #76]	; (8002628 <ssd1306_DrawPixel+0xbc>)
 80025da:	54d1      	strb	r1, [r2, r3]
 80025dc:	e01d      	b.n	800261a <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80025de:	79fa      	ldrb	r2, [r7, #7]
 80025e0:	79bb      	ldrb	r3, [r7, #6]
 80025e2:	08db      	lsrs	r3, r3, #3
 80025e4:	b2d8      	uxtb	r0, r3
 80025e6:	4603      	mov	r3, r0
 80025e8:	01db      	lsls	r3, r3, #7
 80025ea:	4413      	add	r3, r2
 80025ec:	4a0e      	ldr	r2, [pc, #56]	; (8002628 <ssd1306_DrawPixel+0xbc>)
 80025ee:	5cd3      	ldrb	r3, [r2, r3]
 80025f0:	b25a      	sxtb	r2, r3
 80025f2:	79bb      	ldrb	r3, [r7, #6]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	2101      	movs	r1, #1
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	b25b      	sxtb	r3, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	b25b      	sxtb	r3, r3
 8002604:	4013      	ands	r3, r2
 8002606:	b259      	sxtb	r1, r3
 8002608:	79fa      	ldrb	r2, [r7, #7]
 800260a:	4603      	mov	r3, r0
 800260c:	01db      	lsls	r3, r3, #7
 800260e:	4413      	add	r3, r2
 8002610:	b2c9      	uxtb	r1, r1
 8002612:	4a05      	ldr	r2, [pc, #20]	; (8002628 <ssd1306_DrawPixel+0xbc>)
 8002614:	54d1      	strb	r1, [r2, r3]
 8002616:	e000      	b.n	800261a <ssd1306_DrawPixel+0xae>
        return;
 8002618:	bf00      	nop
    }
}
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	200005b8 	.word	0x200005b8
 8002628:	200001b8 	.word	0x200001b8

0800262c <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b089      	sub	sp, #36	; 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	4604      	mov	r4, r0
 8002634:	1d38      	adds	r0, r7, #4
 8002636:	e880 0006 	stmia.w	r0, {r1, r2}
 800263a:	461a      	mov	r2, r3
 800263c:	4623      	mov	r3, r4
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	4613      	mov	r3, r2
 8002642:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002644:	4b38      	ldr	r3, [pc, #224]	; (8002728 <ssd1306_WriteChar+0xfc>)
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	793b      	ldrb	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	2b7f      	cmp	r3, #127	; 0x7f
 8002650:	dc06      	bgt.n	8002660 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8002652:	4b35      	ldr	r3, [pc, #212]	; (8002728 <ssd1306_WriteChar+0xfc>)
 8002654:	885b      	ldrh	r3, [r3, #2]
 8002656:	461a      	mov	r2, r3
 8002658:	797b      	ldrb	r3, [r7, #5]
 800265a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800265c:	2b3f      	cmp	r3, #63	; 0x3f
 800265e:	dd01      	ble.n	8002664 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8002660:	2300      	movs	r3, #0
 8002662:	e05d      	b.n	8002720 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8002664:	2300      	movs	r3, #0
 8002666:	61fb      	str	r3, [r7, #28]
 8002668:	e04c      	b.n	8002704 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	3b20      	subs	r3, #32
 8002670:	7979      	ldrb	r1, [r7, #5]
 8002672:	fb01 f303 	mul.w	r3, r1, r3
 8002676:	4619      	mov	r1, r3
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	440b      	add	r3, r1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8002684:	2300      	movs	r3, #0
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	e034      	b.n	80026f4 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d012      	beq.n	80026c0 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800269a:	4b23      	ldr	r3, [pc, #140]	; (8002728 <ssd1306_WriteChar+0xfc>)
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	b2d8      	uxtb	r0, r3
 80026a8:	4b1f      	ldr	r3, [pc, #124]	; (8002728 <ssd1306_WriteChar+0xfc>)
 80026aa:	885b      	ldrh	r3, [r3, #2]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	7bba      	ldrb	r2, [r7, #14]
 80026b8:	4619      	mov	r1, r3
 80026ba:	f7ff ff57 	bl	800256c <ssd1306_DrawPixel>
 80026be:	e016      	b.n	80026ee <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80026c0:	4b19      	ldr	r3, [pc, #100]	; (8002728 <ssd1306_WriteChar+0xfc>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	b2d8      	uxtb	r0, r3
 80026ce:	4b16      	ldr	r3, [pc, #88]	; (8002728 <ssd1306_WriteChar+0xfc>)
 80026d0:	885b      	ldrh	r3, [r3, #2]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	4413      	add	r3, r2
 80026da:	b2d9      	uxtb	r1, r3
 80026dc:	7bbb      	ldrb	r3, [r7, #14]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bf0c      	ite	eq
 80026e2:	2301      	moveq	r3, #1
 80026e4:	2300      	movne	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	f7ff ff3f 	bl	800256c <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	3301      	adds	r3, #1
 80026f2:	61bb      	str	r3, [r7, #24]
 80026f4:	793b      	ldrb	r3, [r7, #4]
 80026f6:	461a      	mov	r2, r3
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d3c5      	bcc.n	800268a <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3301      	adds	r3, #1
 8002702:	61fb      	str	r3, [r7, #28]
 8002704:	797b      	ldrb	r3, [r7, #5]
 8002706:	461a      	mov	r2, r3
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	4293      	cmp	r3, r2
 800270c:	d3ad      	bcc.n	800266a <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <ssd1306_WriteChar+0xfc>)
 8002710:	881a      	ldrh	r2, [r3, #0]
 8002712:	793b      	ldrb	r3, [r7, #4]
 8002714:	b29b      	uxth	r3, r3
 8002716:	4413      	add	r3, r2
 8002718:	b29a      	uxth	r2, r3
 800271a:	4b03      	ldr	r3, [pc, #12]	; (8002728 <ssd1306_WriteChar+0xfc>)
 800271c:	801a      	strh	r2, [r3, #0]
    // Return written char for validation
    return ch;
 800271e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3724      	adds	r7, #36	; 0x24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd90      	pop	{r4, r7, pc}
 8002728:	200005b8 	.word	0x200005b8

0800272c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	1d38      	adds	r0, r7, #4
 8002736:	e880 0006 	stmia.w	r0, {r1, r2}
 800273a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 800273c:	e012      	b.n	8002764 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	7818      	ldrb	r0, [r3, #0]
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	1d3a      	adds	r2, r7, #4
 8002746:	ca06      	ldmia	r2, {r1, r2}
 8002748:	f7ff ff70 	bl	800262c <ssd1306_WriteChar>
 800274c:	4603      	mov	r3, r0
 800274e:	461a      	mov	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d002      	beq.n	800275e <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	e008      	b.n	8002770 <ssd1306_WriteString+0x44>
        }
        // Next char
        str++;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	3301      	adds	r3, #1
 8002762:	60fb      	str	r3, [r7, #12]
    while (*str)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1e8      	bne.n	800273e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	781b      	ldrb	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	460a      	mov	r2, r1
 8002782:	71fb      	strb	r3, [r7, #7]
 8002784:	4613      	mov	r3, r2
 8002786:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	b29a      	uxth	r2, r3
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <ssd1306_SetCursor+0x2c>)
 800278e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002790:	79bb      	ldrb	r3, [r7, #6]
 8002792:	b29a      	uxth	r2, r3
 8002794:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <ssd1306_SetCursor+0x2c>)
 8002796:	805a      	strh	r2, [r3, #2]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	200005b8 	.word	0x200005b8

080027a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <HAL_MspInit+0x4c>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	4a0f      	ldr	r2, [pc, #60]	; (80027f4 <HAL_MspInit+0x4c>)
 80027b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027bc:	6453      	str	r3, [r2, #68]	; 0x44
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <HAL_MspInit+0x4c>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	603b      	str	r3, [r7, #0]
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <HAL_MspInit+0x4c>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	4a08      	ldr	r2, [pc, #32]	; (80027f4 <HAL_MspInit+0x4c>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d8:	6413      	str	r3, [r2, #64]	; 0x40
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_MspInit+0x4c>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800

080027f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027fc:	e7fe      	b.n	80027fc <NMI_Handler+0x4>

080027fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002802:	e7fe      	b.n	8002802 <HardFault_Handler+0x4>

08002804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002808:	e7fe      	b.n	8002808 <MemManage_Handler+0x4>

0800280a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800280e:	e7fe      	b.n	800280e <BusFault_Handler+0x4>

08002810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002814:	e7fe      	b.n	8002814 <UsageFault_Handler+0x4>

08002816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002844:	f000 fa62 	bl	8002d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}

0800284c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <TIM2_IRQHandler+0x10>)
 8002852:	f002 fa2d 	bl	8004cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200005c4 	.word	0x200005c4

08002860 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <USART2_IRQHandler+0x10>)
 8002866:	f002 fe47 	bl	80054f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000654 	.word	0x20000654

08002874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800287c:	4a14      	ldr	r2, [pc, #80]	; (80028d0 <_sbrk+0x5c>)
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <_sbrk+0x60>)
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002888:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <_sbrk+0x64>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <_sbrk+0x64>)
 8002892:	4a12      	ldr	r2, [pc, #72]	; (80028dc <_sbrk+0x68>)
 8002894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <_sbrk+0x64>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d207      	bcs.n	80028b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028a4:	f003 fd62 	bl	800636c <__errno>
 80028a8:	4603      	mov	r3, r0
 80028aa:	220c      	movs	r2, #12
 80028ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028b2:	e009      	b.n	80028c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <_sbrk+0x64>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ba:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <_sbrk+0x64>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	4a05      	ldr	r2, [pc, #20]	; (80028d8 <_sbrk+0x64>)
 80028c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028c6:	68fb      	ldr	r3, [r7, #12]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20010000 	.word	0x20010000
 80028d4:	00000400 	.word	0x00000400
 80028d8:	200005c0 	.word	0x200005c0
 80028dc:	200007e8 	.word	0x200007e8

080028e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <SystemInit+0x20>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	4a05      	ldr	r2, [pc, #20]	; (8002900 <SystemInit+0x20>)
 80028ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800290a:	f107 0308 	add.w	r3, r7, #8
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002918:	463b      	mov	r3, r7
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002920:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <MX_TIM2_Init+0x94>)
 8002922:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002926:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002928:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <MX_TIM2_Init+0x94>)
 800292a:	2253      	movs	r2, #83	; 0x53
 800292c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292e:	4b1a      	ldr	r3, [pc, #104]	; (8002998 <MX_TIM2_Init+0x94>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002934:	4b18      	ldr	r3, [pc, #96]	; (8002998 <MX_TIM2_Init+0x94>)
 8002936:	f240 32e7 	movw	r2, #999	; 0x3e7
 800293a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800293c:	4b16      	ldr	r3, [pc, #88]	; (8002998 <MX_TIM2_Init+0x94>)
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <MX_TIM2_Init+0x94>)
 8002944:	2200      	movs	r2, #0
 8002946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002948:	4813      	ldr	r0, [pc, #76]	; (8002998 <MX_TIM2_Init+0x94>)
 800294a:	f001 ffcb 	bl	80048e4 <HAL_TIM_Base_Init>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002954:	f7ff f976 	bl	8001c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800295c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800295e:	f107 0308 	add.w	r3, r7, #8
 8002962:	4619      	mov	r1, r3
 8002964:	480c      	ldr	r0, [pc, #48]	; (8002998 <MX_TIM2_Init+0x94>)
 8002966:	f002 fa93 	bl	8004e90 <HAL_TIM_ConfigClockSource>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002970:	f7ff f968 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002974:	2300      	movs	r3, #0
 8002976:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002978:	2300      	movs	r3, #0
 800297a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800297c:	463b      	mov	r3, r7
 800297e:	4619      	mov	r1, r3
 8002980:	4805      	ldr	r0, [pc, #20]	; (8002998 <MX_TIM2_Init+0x94>)
 8002982:	f002 fcc1 	bl	8005308 <HAL_TIMEx_MasterConfigSynchronization>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800298c:	f7ff f95a 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002990:	bf00      	nop
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	200005c4 	.word	0x200005c4

0800299c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08c      	sub	sp, #48	; 0x30
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029a2:	f107 030c 	add.w	r3, r7, #12
 80029a6:	2224      	movs	r2, #36	; 0x24
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f003 fcd6 	bl	800635c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b0:	1d3b      	adds	r3, r7, #4
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80029b8:	4b20      	ldr	r3, [pc, #128]	; (8002a3c <MX_TIM5_Init+0xa0>)
 80029ba:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <MX_TIM5_Init+0xa4>)
 80029bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80029be:	4b1f      	ldr	r3, [pc, #124]	; (8002a3c <MX_TIM5_Init+0xa0>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c4:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <MX_TIM5_Init+0xa0>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80029ca:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <MX_TIM5_Init+0xa0>)
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d2:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <MX_TIM5_Init+0xa0>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029d8:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <MX_TIM5_Init+0xa0>)
 80029da:	2200      	movs	r2, #0
 80029dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80029de:	2301      	movs	r3, #1
 80029e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029e6:	2301      	movs	r3, #1
 80029e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029f2:	2300      	movs	r3, #0
 80029f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029f6:	2301      	movs	r3, #1
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029fa:	2300      	movs	r3, #0
 80029fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002a02:	f107 030c 	add.w	r3, r7, #12
 8002a06:	4619      	mov	r1, r3
 8002a08:	480c      	ldr	r0, [pc, #48]	; (8002a3c <MX_TIM5_Init+0xa0>)
 8002a0a:	f002 f81d 	bl	8004a48 <HAL_TIM_Encoder_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002a14:	f7ff f916 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	4619      	mov	r1, r3
 8002a24:	4805      	ldr	r0, [pc, #20]	; (8002a3c <MX_TIM5_Init+0xa0>)
 8002a26:	f002 fc6f 	bl	8005308 <HAL_TIMEx_MasterConfigSynchronization>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002a30:	f7ff f908 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002a34:	bf00      	nop
 8002a36:	3730      	adds	r7, #48	; 0x30
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	2000060c 	.word	0x2000060c
 8002a40:	40000c00 	.word	0x40000c00

08002a44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a54:	d115      	bne.n	8002a82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <HAL_TIM_Base_MspInit+0x48>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	4a0b      	ldr	r2, [pc, #44]	; (8002a8c <HAL_TIM_Base_MspInit+0x48>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6413      	str	r3, [r2, #64]	; 0x40
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_TIM_Base_MspInit+0x48>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a72:	2200      	movs	r2, #0
 8002a74:	2100      	movs	r1, #0
 8002a76:	201c      	movs	r0, #28
 8002a78:	f000 fa67 	bl	8002f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a7c:	201c      	movs	r0, #28
 8002a7e:	f000 fa80 	bl	8002f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800

08002a90 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a19      	ldr	r2, [pc, #100]	; (8002b14 <HAL_TIM_Encoder_MspInit+0x84>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d12b      	bne.n	8002b0a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a17      	ldr	r2, [pc, #92]	; (8002b18 <HAL_TIM_Encoder_MspInit+0x88>)
 8002abc:	f043 0308 	orr.w	r3, r3, #8
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4a10      	ldr	r2, [pc, #64]	; (8002b18 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ade:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002aea:	2303      	movs	r3, #3
 8002aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aee:	2302      	movs	r3, #2
 8002af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af6:	2300      	movs	r3, #0
 8002af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002afa:	2302      	movs	r3, #2
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afe:	f107 0314 	add.w	r3, r7, #20
 8002b02:	4619      	mov	r1, r3
 8002b04:	4805      	ldr	r0, [pc, #20]	; (8002b1c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002b06:	f000 fae9 	bl	80030dc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	3728      	adds	r7, #40	; 0x28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40000c00 	.word	0x40000c00
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40020000 	.word	0x40020000

08002b20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <MX_USART2_UART_Init+0x4c>)
 8002b26:	4a12      	ldr	r2, [pc, #72]	; (8002b70 <MX_USART2_UART_Init+0x50>)
 8002b28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <MX_USART2_UART_Init+0x4c>)
 8002b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b32:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <MX_USART2_UART_Init+0x4c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <MX_USART2_UART_Init+0x4c>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <MX_USART2_UART_Init+0x4c>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <MX_USART2_UART_Init+0x4c>)
 8002b46:	220c      	movs	r2, #12
 8002b48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <MX_USART2_UART_Init+0x4c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <MX_USART2_UART_Init+0x4c>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b56:	4805      	ldr	r0, [pc, #20]	; (8002b6c <MX_USART2_UART_Init+0x4c>)
 8002b58:	f002 fc58 	bl	800540c <HAL_UART_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b62:	f7ff f86f 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000654 	.word	0x20000654
 8002b70:	40004400 	.word	0x40004400

08002b74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08a      	sub	sp, #40	; 0x28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1d      	ldr	r2, [pc, #116]	; (8002c08 <HAL_UART_MspInit+0x94>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d133      	bne.n	8002bfe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <HAL_UART_MspInit+0x98>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	4a1b      	ldr	r2, [pc, #108]	; (8002c0c <HAL_UART_MspInit+0x98>)
 8002ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba6:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_UART_MspInit+0x98>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <HAL_UART_MspInit+0x98>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <HAL_UART_MspInit+0x98>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc2:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_UART_MspInit+0x98>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002bce:	230c      	movs	r3, #12
 8002bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bde:	2307      	movs	r3, #7
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be2:	f107 0314 	add.w	r3, r7, #20
 8002be6:	4619      	mov	r1, r3
 8002be8:	4809      	ldr	r0, [pc, #36]	; (8002c10 <HAL_UART_MspInit+0x9c>)
 8002bea:	f000 fa77 	bl	80030dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	2026      	movs	r0, #38	; 0x26
 8002bf4:	f000 f9a9 	bl	8002f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bf8:	2026      	movs	r0, #38	; 0x26
 8002bfa:	f000 f9c2 	bl	8002f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bfe:	bf00      	nop
 8002c00:	3728      	adds	r7, #40	; 0x28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40004400 	.word	0x40004400
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40020000 	.word	0x40020000

08002c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c18:	f7ff fe62 	bl	80028e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c1c:	480c      	ldr	r0, [pc, #48]	; (8002c50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c1e:	490d      	ldr	r1, [pc, #52]	; (8002c54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c20:	4a0d      	ldr	r2, [pc, #52]	; (8002c58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c24:	e002      	b.n	8002c2c <LoopCopyDataInit>

08002c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c2a:	3304      	adds	r3, #4

08002c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c30:	d3f9      	bcc.n	8002c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c34:	4c0a      	ldr	r4, [pc, #40]	; (8002c60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c38:	e001      	b.n	8002c3e <LoopFillZerobss>

08002c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c3c:	3204      	adds	r2, #4

08002c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c40:	d3fb      	bcc.n	8002c3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c42:	f003 fb99 	bl	8006378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c46:	f7fe fbe3 	bl	8001410 <main>
  bx  lr    
 8002c4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c4c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c54:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002c58:	080088b8 	.word	0x080088b8
  ldr r2, =_sbss
 8002c5c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002c60:	200007e8 	.word	0x200007e8

08002c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c64:	e7fe      	b.n	8002c64 <ADC_IRQHandler>
	...

08002c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <HAL_Init+0x40>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0d      	ldr	r2, [pc, #52]	; (8002ca8 <HAL_Init+0x40>)
 8002c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_Init+0x40>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <HAL_Init+0x40>)
 8002c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_Init+0x40>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a07      	ldr	r2, [pc, #28]	; (8002ca8 <HAL_Init+0x40>)
 8002c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c90:	2003      	movs	r0, #3
 8002c92:	f000 f94f 	bl	8002f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c96:	200f      	movs	r0, #15
 8002c98:	f000 f808 	bl	8002cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c9c:	f7ff fd84 	bl	80027a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023c00 	.word	0x40023c00

08002cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_InitTick+0x54>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <HAL_InitTick+0x58>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f967 	bl	8002f9e <HAL_SYSTICK_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e00e      	b.n	8002cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b0f      	cmp	r3, #15
 8002cde:	d80a      	bhi.n	8002cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ce8:	f000 f92f 	bl	8002f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cec:	4a06      	ldr	r2, [pc, #24]	; (8002d08 <HAL_InitTick+0x5c>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e000      	b.n	8002cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000044 	.word	0x20000044
 8002d04:	2000004c 	.word	0x2000004c
 8002d08:	20000048 	.word	0x20000048

08002d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_IncTick+0x20>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_IncTick+0x24>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	4a04      	ldr	r2, [pc, #16]	; (8002d30 <HAL_IncTick+0x24>)
 8002d1e:	6013      	str	r3, [r2, #0]
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	2000004c 	.word	0x2000004c
 8002d30:	2000069c 	.word	0x2000069c

08002d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return uwTick;
 8002d38:	4b03      	ldr	r3, [pc, #12]	; (8002d48 <HAL_GetTick+0x14>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	2000069c 	.word	0x2000069c

08002d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d54:	f7ff ffee 	bl	8002d34 <HAL_GetTick>
 8002d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d64:	d005      	beq.n	8002d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d66:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <HAL_Delay+0x44>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4413      	add	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d72:	bf00      	nop
 8002d74:	f7ff ffde 	bl	8002d34 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d8f7      	bhi.n	8002d74 <HAL_Delay+0x28>
  {
  }
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	2000004c 	.word	0x2000004c

08002d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da4:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002db0:	4013      	ands	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc6:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	60d3      	str	r3, [r2, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <__NVIC_GetPriorityGrouping+0x18>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	f003 0307 	and.w	r3, r3, #7
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	db0b      	blt.n	8002e22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	f003 021f 	and.w	r2, r3, #31
 8002e10:	4907      	ldr	r1, [pc, #28]	; (8002e30 <__NVIC_EnableIRQ+0x38>)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	2001      	movs	r0, #1
 8002e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000e100 	.word	0xe000e100

08002e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	6039      	str	r1, [r7, #0]
 8002e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	db0a      	blt.n	8002e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	490c      	ldr	r1, [pc, #48]	; (8002e80 <__NVIC_SetPriority+0x4c>)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	0112      	lsls	r2, r2, #4
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	440b      	add	r3, r1
 8002e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e5c:	e00a      	b.n	8002e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	4908      	ldr	r1, [pc, #32]	; (8002e84 <__NVIC_SetPriority+0x50>)
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	3b04      	subs	r3, #4
 8002e6c:	0112      	lsls	r2, r2, #4
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	440b      	add	r3, r1
 8002e72:	761a      	strb	r2, [r3, #24]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000e100 	.word	0xe000e100
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b089      	sub	sp, #36	; 0x24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	bf28      	it	cs
 8002ea6:	2304      	movcs	r3, #4
 8002ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3304      	adds	r3, #4
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	d902      	bls.n	8002eb8 <NVIC_EncodePriority+0x30>
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3b03      	subs	r3, #3
 8002eb6:	e000      	b.n	8002eba <NVIC_EncodePriority+0x32>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	401a      	ands	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eda:	43d9      	mvns	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee0:	4313      	orrs	r3, r2
         );
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3724      	adds	r7, #36	; 0x24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
	...

08002ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f00:	d301      	bcc.n	8002f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f02:	2301      	movs	r3, #1
 8002f04:	e00f      	b.n	8002f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f06:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <SysTick_Config+0x40>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f0e:	210f      	movs	r1, #15
 8002f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f14:	f7ff ff8e 	bl	8002e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <SysTick_Config+0x40>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f1e:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <SysTick_Config+0x40>)
 8002f20:	2207      	movs	r2, #7
 8002f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	e000e010 	.word	0xe000e010

08002f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff ff29 	bl	8002d94 <__NVIC_SetPriorityGrouping>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	4603      	mov	r3, r0
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f5c:	f7ff ff3e 	bl	8002ddc <__NVIC_GetPriorityGrouping>
 8002f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	6978      	ldr	r0, [r7, #20]
 8002f68:	f7ff ff8e 	bl	8002e88 <NVIC_EncodePriority>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff5d 	bl	8002e34 <__NVIC_SetPriority>
}
 8002f7a:	bf00      	nop
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	4603      	mov	r3, r0
 8002f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff31 	bl	8002df8 <__NVIC_EnableIRQ>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ffa2 	bl	8002ef0 <SysTick_Config>
 8002fac:	4603      	mov	r3, r0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b084      	sub	sp, #16
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fc4:	f7ff feb6 	bl	8002d34 <HAL_GetTick>
 8002fc8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d008      	beq.n	8002fe8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2280      	movs	r2, #128	; 0x80
 8002fda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e052      	b.n	800308e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0216 	bic.w	r2, r2, #22
 8002ff6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003006:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	2b00      	cmp	r3, #0
 800300e:	d103      	bne.n	8003018 <HAL_DMA_Abort+0x62>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003014:	2b00      	cmp	r3, #0
 8003016:	d007      	beq.n	8003028 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0208 	bic.w	r2, r2, #8
 8003026:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003038:	e013      	b.n	8003062 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800303a:	f7ff fe7b 	bl	8002d34 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b05      	cmp	r3, #5
 8003046:	d90c      	bls.n	8003062 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2220      	movs	r2, #32
 800304c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2203      	movs	r2, #3
 8003052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e015      	b.n	800308e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e4      	bne.n	800303a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003074:	223f      	movs	r2, #63	; 0x3f
 8003076:	409a      	lsls	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d004      	beq.n	80030b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2280      	movs	r2, #128	; 0x80
 80030ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e00c      	b.n	80030ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2205      	movs	r2, #5
 80030b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	; 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030f2:	2300      	movs	r3, #0
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	e159      	b.n	80033ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030f8:	2201      	movs	r2, #1
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4013      	ands	r3, r2
 800310a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	429a      	cmp	r2, r3
 8003112:	f040 8148 	bne.w	80033a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	2b01      	cmp	r3, #1
 8003120:	d005      	beq.n	800312e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800312a:	2b02      	cmp	r3, #2
 800312c:	d130      	bne.n	8003190 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	2203      	movs	r2, #3
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003164:	2201      	movs	r2, #1
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 0201 	and.w	r2, r3, #1
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	2b03      	cmp	r3, #3
 800319a:	d017      	beq.n	80031cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	2203      	movs	r2, #3
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d123      	bne.n	8003220 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	08da      	lsrs	r2, r3, #3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3208      	adds	r2, #8
 80031e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	220f      	movs	r2, #15
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	08da      	lsrs	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3208      	adds	r2, #8
 800321a:	69b9      	ldr	r1, [r7, #24]
 800321c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2203      	movs	r2, #3
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 0203 	and.w	r2, r3, #3
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80a2 	beq.w	80033a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	4b57      	ldr	r3, [pc, #348]	; (80033c4 <HAL_GPIO_Init+0x2e8>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	4a56      	ldr	r2, [pc, #344]	; (80033c4 <HAL_GPIO_Init+0x2e8>)
 800326c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003270:	6453      	str	r3, [r2, #68]	; 0x44
 8003272:	4b54      	ldr	r3, [pc, #336]	; (80033c4 <HAL_GPIO_Init+0x2e8>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800327e:	4a52      	ldr	r2, [pc, #328]	; (80033c8 <HAL_GPIO_Init+0x2ec>)
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	3302      	adds	r3, #2
 8003286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	220f      	movs	r2, #15
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a49      	ldr	r2, [pc, #292]	; (80033cc <HAL_GPIO_Init+0x2f0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d019      	beq.n	80032de <HAL_GPIO_Init+0x202>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a48      	ldr	r2, [pc, #288]	; (80033d0 <HAL_GPIO_Init+0x2f4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_GPIO_Init+0x1fe>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a47      	ldr	r2, [pc, #284]	; (80033d4 <HAL_GPIO_Init+0x2f8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00d      	beq.n	80032d6 <HAL_GPIO_Init+0x1fa>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a46      	ldr	r2, [pc, #280]	; (80033d8 <HAL_GPIO_Init+0x2fc>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <HAL_GPIO_Init+0x1f6>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a45      	ldr	r2, [pc, #276]	; (80033dc <HAL_GPIO_Init+0x300>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <HAL_GPIO_Init+0x1f2>
 80032ca:	2304      	movs	r3, #4
 80032cc:	e008      	b.n	80032e0 <HAL_GPIO_Init+0x204>
 80032ce:	2307      	movs	r3, #7
 80032d0:	e006      	b.n	80032e0 <HAL_GPIO_Init+0x204>
 80032d2:	2303      	movs	r3, #3
 80032d4:	e004      	b.n	80032e0 <HAL_GPIO_Init+0x204>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e002      	b.n	80032e0 <HAL_GPIO_Init+0x204>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <HAL_GPIO_Init+0x204>
 80032de:	2300      	movs	r3, #0
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	f002 0203 	and.w	r2, r2, #3
 80032e6:	0092      	lsls	r2, r2, #2
 80032e8:	4093      	lsls	r3, r2
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032f0:	4935      	ldr	r1, [pc, #212]	; (80033c8 <HAL_GPIO_Init+0x2ec>)
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	089b      	lsrs	r3, r3, #2
 80032f6:	3302      	adds	r3, #2
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032fe:	4b38      	ldr	r3, [pc, #224]	; (80033e0 <HAL_GPIO_Init+0x304>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003322:	4a2f      	ldr	r2, [pc, #188]	; (80033e0 <HAL_GPIO_Init+0x304>)
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003328:	4b2d      	ldr	r3, [pc, #180]	; (80033e0 <HAL_GPIO_Init+0x304>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800334c:	4a24      	ldr	r2, [pc, #144]	; (80033e0 <HAL_GPIO_Init+0x304>)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003352:	4b23      	ldr	r3, [pc, #140]	; (80033e0 <HAL_GPIO_Init+0x304>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003376:	4a1a      	ldr	r2, [pc, #104]	; (80033e0 <HAL_GPIO_Init+0x304>)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800337c:	4b18      	ldr	r3, [pc, #96]	; (80033e0 <HAL_GPIO_Init+0x304>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	43db      	mvns	r3, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033a0:	4a0f      	ldr	r2, [pc, #60]	; (80033e0 <HAL_GPIO_Init+0x304>)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3301      	adds	r3, #1
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b0f      	cmp	r3, #15
 80033b0:	f67f aea2 	bls.w	80030f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	3724      	adds	r7, #36	; 0x24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40013800 	.word	0x40013800
 80033cc:	40020000 	.word	0x40020000
 80033d0:	40020400 	.word	0x40020400
 80033d4:	40020800 	.word	0x40020800
 80033d8:	40020c00 	.word	0x40020c00
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40013c00 	.word	0x40013c00

080033e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	887b      	ldrh	r3, [r7, #2]
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033fc:	2301      	movs	r3, #1
 80033fe:	73fb      	strb	r3, [r7, #15]
 8003400:	e001      	b.n	8003406 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003402:	2300      	movs	r3, #0
 8003404:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003406:	7bfb      	ldrb	r3, [r7, #15]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	807b      	strh	r3, [r7, #2]
 8003420:	4613      	mov	r3, r2
 8003422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003424:	787b      	ldrb	r3, [r7, #1]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800342a:	887a      	ldrh	r2, [r7, #2]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003430:	e003      	b.n	800343a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003432:	887b      	ldrh	r3, [r7, #2]
 8003434:	041a      	lsls	r2, r3, #16
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	619a      	str	r2, [r3, #24]
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003446:	b480      	push	{r7}
 8003448:	b085      	sub	sp, #20
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003458:	887a      	ldrh	r2, [r7, #2]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4013      	ands	r3, r2
 800345e:	041a      	lsls	r2, r3, #16
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	43d9      	mvns	r1, r3
 8003464:	887b      	ldrh	r3, [r7, #2]
 8003466:	400b      	ands	r3, r1
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	619a      	str	r2, [r3, #24]
}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e12b      	b.n	80036e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fd fd58 	bl	8000f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2224      	movs	r2, #36	; 0x24
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034e0:	f001 f9d8 	bl	8004894 <HAL_RCC_GetPCLK1Freq>
 80034e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4a81      	ldr	r2, [pc, #516]	; (80036f0 <HAL_I2C_Init+0x274>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d807      	bhi.n	8003500 <HAL_I2C_Init+0x84>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a80      	ldr	r2, [pc, #512]	; (80036f4 <HAL_I2C_Init+0x278>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	bf94      	ite	ls
 80034f8:	2301      	movls	r3, #1
 80034fa:	2300      	movhi	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e006      	b.n	800350e <HAL_I2C_Init+0x92>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4a7d      	ldr	r2, [pc, #500]	; (80036f8 <HAL_I2C_Init+0x27c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	bf94      	ite	ls
 8003508:	2301      	movls	r3, #1
 800350a:	2300      	movhi	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e0e7      	b.n	80036e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4a78      	ldr	r2, [pc, #480]	; (80036fc <HAL_I2C_Init+0x280>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	0c9b      	lsrs	r3, r3, #18
 8003520:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4a6a      	ldr	r2, [pc, #424]	; (80036f0 <HAL_I2C_Init+0x274>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d802      	bhi.n	8003550 <HAL_I2C_Init+0xd4>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	3301      	adds	r3, #1
 800354e:	e009      	b.n	8003564 <HAL_I2C_Init+0xe8>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	4a69      	ldr	r2, [pc, #420]	; (8003700 <HAL_I2C_Init+0x284>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	3301      	adds	r3, #1
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	430b      	orrs	r3, r1
 800356a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003576:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	495c      	ldr	r1, [pc, #368]	; (80036f0 <HAL_I2C_Init+0x274>)
 8003580:	428b      	cmp	r3, r1
 8003582:	d819      	bhi.n	80035b8 <HAL_I2C_Init+0x13c>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1e59      	subs	r1, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003592:	1c59      	adds	r1, r3, #1
 8003594:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003598:	400b      	ands	r3, r1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_I2C_Init+0x138>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1e59      	subs	r1, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ac:	3301      	adds	r3, #1
 80035ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b2:	e051      	b.n	8003658 <HAL_I2C_Init+0x1dc>
 80035b4:	2304      	movs	r3, #4
 80035b6:	e04f      	b.n	8003658 <HAL_I2C_Init+0x1dc>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d111      	bne.n	80035e4 <HAL_I2C_Init+0x168>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1e58      	subs	r0, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	440b      	add	r3, r1
 80035ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d2:	3301      	adds	r3, #1
 80035d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d8:	2b00      	cmp	r3, #0
 80035da:	bf0c      	ite	eq
 80035dc:	2301      	moveq	r3, #1
 80035de:	2300      	movne	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e012      	b.n	800360a <HAL_I2C_Init+0x18e>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1e58      	subs	r0, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	0099      	lsls	r1, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035fa:	3301      	adds	r3, #1
 80035fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf0c      	ite	eq
 8003604:	2301      	moveq	r3, #1
 8003606:	2300      	movne	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_I2C_Init+0x196>
 800360e:	2301      	movs	r3, #1
 8003610:	e022      	b.n	8003658 <HAL_I2C_Init+0x1dc>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10e      	bne.n	8003638 <HAL_I2C_Init+0x1bc>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	1e58      	subs	r0, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	460b      	mov	r3, r1
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	440b      	add	r3, r1
 8003628:	fbb0 f3f3 	udiv	r3, r0, r3
 800362c:	3301      	adds	r3, #1
 800362e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003636:	e00f      	b.n	8003658 <HAL_I2C_Init+0x1dc>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	1e58      	subs	r0, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	0099      	lsls	r1, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	fbb0 f3f3 	udiv	r3, r0, r3
 800364e:	3301      	adds	r3, #1
 8003650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	6809      	ldr	r1, [r1, #0]
 800365c:	4313      	orrs	r3, r2
 800365e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003686:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6911      	ldr	r1, [r2, #16]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68d2      	ldr	r2, [r2, #12]
 8003692:	4311      	orrs	r1, r2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	430b      	orrs	r3, r1
 800369a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	000186a0 	.word	0x000186a0
 80036f4:	001e847f 	.word	0x001e847f
 80036f8:	003d08ff 	.word	0x003d08ff
 80036fc:	431bde83 	.word	0x431bde83
 8003700:	10624dd3 	.word	0x10624dd3

08003704 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	4608      	mov	r0, r1
 800370e:	4611      	mov	r1, r2
 8003710:	461a      	mov	r2, r3
 8003712:	4603      	mov	r3, r0
 8003714:	817b      	strh	r3, [r7, #10]
 8003716:	460b      	mov	r3, r1
 8003718:	813b      	strh	r3, [r7, #8]
 800371a:	4613      	mov	r3, r2
 800371c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800371e:	f7ff fb09 	bl	8002d34 <HAL_GetTick>
 8003722:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b20      	cmp	r3, #32
 800372e:	f040 80d9 	bne.w	80038e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	2319      	movs	r3, #25
 8003738:	2201      	movs	r2, #1
 800373a:	496d      	ldr	r1, [pc, #436]	; (80038f0 <HAL_I2C_Mem_Write+0x1ec>)
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 fa9f 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
 800374a:	e0cc      	b.n	80038e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_I2C_Mem_Write+0x56>
 8003756:	2302      	movs	r3, #2
 8003758:	e0c5      	b.n	80038e6 <HAL_I2C_Mem_Write+0x1e2>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b01      	cmp	r3, #1
 800376e:	d007      	beq.n	8003780 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800378e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2221      	movs	r2, #33	; 0x21
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2240      	movs	r2, #64	; 0x40
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a3a      	ldr	r2, [r7, #32]
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4a4d      	ldr	r2, [pc, #308]	; (80038f4 <HAL_I2C_Mem_Write+0x1f0>)
 80037c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037c2:	88f8      	ldrh	r0, [r7, #6]
 80037c4:	893a      	ldrh	r2, [r7, #8]
 80037c6:	8979      	ldrh	r1, [r7, #10]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	9301      	str	r3, [sp, #4]
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	4603      	mov	r3, r0
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f9be 	bl	8003b54 <I2C_RequestMemoryWrite>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d052      	beq.n	8003884 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e081      	b.n	80038e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fb64 	bl	8003eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00d      	beq.n	800380e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d107      	bne.n	800380a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003808:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e06b      	b.n	80038e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	781a      	ldrb	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b04      	cmp	r3, #4
 800384a:	d11b      	bne.n	8003884 <HAL_I2C_Mem_Write+0x180>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003850:	2b00      	cmp	r3, #0
 8003852:	d017      	beq.n	8003884 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	781a      	ldrb	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387a:	b29b      	uxth	r3, r3
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1aa      	bne.n	80037e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fb57 	bl	8003f44 <I2C_WaitOnBTFFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00d      	beq.n	80038b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d107      	bne.n	80038b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e016      	b.n	80038e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	e000      	b.n	80038e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038e4:	2302      	movs	r3, #2
  }
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	00100002 	.word	0x00100002
 80038f4:	ffff0000 	.word	0xffff0000

080038f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08a      	sub	sp, #40	; 0x28
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	460b      	mov	r3, r1
 8003906:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003908:	f7ff fa14 	bl	8002d34 <HAL_GetTick>
 800390c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b20      	cmp	r3, #32
 800391c:	f040 8111 	bne.w	8003b42 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	2319      	movs	r3, #25
 8003926:	2201      	movs	r2, #1
 8003928:	4988      	ldr	r1, [pc, #544]	; (8003b4c <HAL_I2C_IsDeviceReady+0x254>)
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f9a8 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003936:	2302      	movs	r3, #2
 8003938:	e104      	b.n	8003b44 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_I2C_IsDeviceReady+0x50>
 8003944:	2302      	movs	r3, #2
 8003946:	e0fd      	b.n	8003b44 <HAL_I2C_IsDeviceReady+0x24c>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b01      	cmp	r3, #1
 800395c:	d007      	beq.n	800396e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f042 0201 	orr.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800397c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2224      	movs	r2, #36	; 0x24
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4a70      	ldr	r2, [pc, #448]	; (8003b50 <HAL_I2C_IsDeviceReady+0x258>)
 8003990:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f966 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00d      	beq.n	80039d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c8:	d103      	bne.n	80039d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e0b6      	b.n	8003b44 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039d6:	897b      	ldrh	r3, [r7, #10]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80039e6:	f7ff f9a5 	bl	8002d34 <HAL_GetTick>
 80039ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	bf0c      	ite	eq
 80039fa:	2301      	moveq	r3, #1
 80039fc:	2300      	movne	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a10:	bf0c      	ite	eq
 8003a12:	2301      	moveq	r3, #1
 8003a14:	2300      	movne	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a1a:	e025      	b.n	8003a68 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a1c:	f7ff f98a 	bl	8002d34 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d302      	bcc.n	8003a32 <HAL_I2C_IsDeviceReady+0x13a>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d103      	bne.n	8003a3a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	22a0      	movs	r2, #160	; 0xa0
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5e:	bf0c      	ite	eq
 8003a60:	2301      	moveq	r3, #1
 8003a62:	2300      	movne	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2ba0      	cmp	r3, #160	; 0xa0
 8003a72:	d005      	beq.n	8003a80 <HAL_I2C_IsDeviceReady+0x188>
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d102      	bne.n	8003a80 <HAL_I2C_IsDeviceReady+0x188>
 8003a7a:	7dbb      	ldrb	r3, [r7, #22]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0cd      	beq.n	8003a1c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d129      	bne.n	8003aea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2319      	movs	r3, #25
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	4921      	ldr	r1, [pc, #132]	; (8003b4c <HAL_I2C_IsDeviceReady+0x254>)
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f8da 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e036      	b.n	8003b44 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e02c      	b.n	8003b44 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b02:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	2319      	movs	r3, #25
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	490f      	ldr	r1, [pc, #60]	; (8003b4c <HAL_I2C_IsDeviceReady+0x254>)
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f8b6 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e012      	b.n	8003b44 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	3301      	adds	r3, #1
 8003b22:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	f4ff af32 	bcc.w	8003992 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
  }
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3720      	adds	r7, #32
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	00100002 	.word	0x00100002
 8003b50:	ffff0000 	.word	0xffff0000

08003b54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	4608      	mov	r0, r1
 8003b5e:	4611      	mov	r1, r2
 8003b60:	461a      	mov	r2, r3
 8003b62:	4603      	mov	r3, r0
 8003b64:	817b      	strh	r3, [r7, #10]
 8003b66:	460b      	mov	r3, r1
 8003b68:	813b      	strh	r3, [r7, #8]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f878 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ba4:	d103      	bne.n	8003bae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e05f      	b.n	8003c72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bb2:	897b      	ldrh	r3, [r7, #10]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	6a3a      	ldr	r2, [r7, #32]
 8003bc6:	492d      	ldr	r1, [pc, #180]	; (8003c7c <I2C_RequestMemoryWrite+0x128>)
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f8d3 	bl	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e04c      	b.n	8003c72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	6a39      	ldr	r1, [r7, #32]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f95e 	bl	8003eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d107      	bne.n	8003c16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e02b      	b.n	8003c72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d105      	bne.n	8003c2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c20:	893b      	ldrh	r3, [r7, #8]
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	611a      	str	r2, [r3, #16]
 8003c2a:	e021      	b.n	8003c70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c2c:	893b      	ldrh	r3, [r7, #8]
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3c:	6a39      	ldr	r1, [r7, #32]
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f938 	bl	8003eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00d      	beq.n	8003c66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d107      	bne.n	8003c62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e005      	b.n	8003c72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c66:	893b      	ldrh	r3, [r7, #8]
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	00010002 	.word	0x00010002

08003c80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c90:	e048      	b.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c98:	d044      	beq.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9a:	f7ff f84b 	bl	8002d34 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d302      	bcc.n	8003cb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d139      	bne.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	0c1b      	lsrs	r3, r3, #16
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d10d      	bne.n	8003cd6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	43da      	mvns	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	e00c      	b.n	8003cf0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	43da      	mvns	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bf0c      	ite	eq
 8003ce8:	2301      	moveq	r3, #1
 8003cea:	2300      	movne	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	461a      	mov	r2, r3
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d116      	bne.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	f043 0220 	orr.w	r2, r3, #32
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e023      	b.n	8003d6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	0c1b      	lsrs	r3, r3, #16
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d10d      	bne.n	8003d4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	43da      	mvns	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	e00c      	b.n	8003d64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	43da      	mvns	r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4013      	ands	r3, r2
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d093      	beq.n	8003c92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d82:	e071      	b.n	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d92:	d123      	bne.n	8003ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	f043 0204 	orr.w	r2, r3, #4
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e067      	b.n	8003eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003de2:	d041      	beq.n	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de4:	f7fe ffa6 	bl	8002d34 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d302      	bcc.n	8003dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d136      	bne.n	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	0c1b      	lsrs	r3, r3, #16
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d10c      	bne.n	8003e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	bf14      	ite	ne
 8003e16:	2301      	movne	r3, #1
 8003e18:	2300      	moveq	r3, #0
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	e00b      	b.n	8003e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	43da      	mvns	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	bf14      	ite	ne
 8003e30:	2301      	movne	r3, #1
 8003e32:	2300      	moveq	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d016      	beq.n	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	f043 0220 	orr.w	r2, r3, #32
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e021      	b.n	8003eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	0c1b      	lsrs	r3, r3, #16
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d10c      	bne.n	8003e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	43da      	mvns	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bf14      	ite	ne
 8003e84:	2301      	movne	r3, #1
 8003e86:	2300      	moveq	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	e00b      	b.n	8003ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	43da      	mvns	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4013      	ands	r3, r2
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	bf14      	ite	ne
 8003e9e:	2301      	movne	r3, #1
 8003ea0:	2300      	moveq	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f47f af6d 	bne.w	8003d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ec0:	e034      	b.n	8003f2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f886 	bl	8003fd4 <I2C_IsAcknowledgeFailed>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e034      	b.n	8003f3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ed8:	d028      	beq.n	8003f2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eda:	f7fe ff2b 	bl	8002d34 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d302      	bcc.n	8003ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d11d      	bne.n	8003f2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efa:	2b80      	cmp	r3, #128	; 0x80
 8003efc:	d016      	beq.n	8003f2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	f043 0220 	orr.w	r2, r3, #32
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e007      	b.n	8003f3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b80      	cmp	r3, #128	; 0x80
 8003f38:	d1c3      	bne.n	8003ec2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f50:	e034      	b.n	8003fbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f83e 	bl	8003fd4 <I2C_IsAcknowledgeFailed>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e034      	b.n	8003fcc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f68:	d028      	beq.n	8003fbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6a:	f7fe fee3 	bl	8002d34 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d302      	bcc.n	8003f80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d11d      	bne.n	8003fbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d016      	beq.n	8003fbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	f043 0220 	orr.w	r2, r3, #32
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e007      	b.n	8003fcc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d1c3      	bne.n	8003f52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fea:	d11b      	bne.n	8004024 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ff4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	f043 0204 	orr.w	r2, r3, #4
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
	...

08004034 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e267      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d075      	beq.n	800413e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004052:	4b88      	ldr	r3, [pc, #544]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	2b04      	cmp	r3, #4
 800405c:	d00c      	beq.n	8004078 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800405e:	4b85      	ldr	r3, [pc, #532]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004066:	2b08      	cmp	r3, #8
 8004068:	d112      	bne.n	8004090 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800406a:	4b82      	ldr	r3, [pc, #520]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004076:	d10b      	bne.n	8004090 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004078:	4b7e      	ldr	r3, [pc, #504]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d05b      	beq.n	800413c <HAL_RCC_OscConfig+0x108>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d157      	bne.n	800413c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e242      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004098:	d106      	bne.n	80040a8 <HAL_RCC_OscConfig+0x74>
 800409a:	4b76      	ldr	r3, [pc, #472]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a75      	ldr	r2, [pc, #468]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80040a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	e01d      	b.n	80040e4 <HAL_RCC_OscConfig+0xb0>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040b0:	d10c      	bne.n	80040cc <HAL_RCC_OscConfig+0x98>
 80040b2:	4b70      	ldr	r3, [pc, #448]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a6f      	ldr	r2, [pc, #444]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80040b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	4b6d      	ldr	r3, [pc, #436]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a6c      	ldr	r2, [pc, #432]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80040c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	e00b      	b.n	80040e4 <HAL_RCC_OscConfig+0xb0>
 80040cc:	4b69      	ldr	r3, [pc, #420]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a68      	ldr	r2, [pc, #416]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80040d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	4b66      	ldr	r3, [pc, #408]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a65      	ldr	r2, [pc, #404]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80040de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d013      	beq.n	8004114 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ec:	f7fe fe22 	bl	8002d34 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f4:	f7fe fe1e 	bl	8002d34 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b64      	cmp	r3, #100	; 0x64
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e207      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004106:	4b5b      	ldr	r3, [pc, #364]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0xc0>
 8004112:	e014      	b.n	800413e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004114:	f7fe fe0e 	bl	8002d34 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800411c:	f7fe fe0a 	bl	8002d34 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b64      	cmp	r3, #100	; 0x64
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e1f3      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412e:	4b51      	ldr	r3, [pc, #324]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f0      	bne.n	800411c <HAL_RCC_OscConfig+0xe8>
 800413a:	e000      	b.n	800413e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800413c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d063      	beq.n	8004212 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800414a:	4b4a      	ldr	r3, [pc, #296]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00b      	beq.n	800416e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004156:	4b47      	ldr	r3, [pc, #284]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800415e:	2b08      	cmp	r3, #8
 8004160:	d11c      	bne.n	800419c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004162:	4b44      	ldr	r3, [pc, #272]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d116      	bne.n	800419c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800416e:	4b41      	ldr	r3, [pc, #260]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <HAL_RCC_OscConfig+0x152>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d001      	beq.n	8004186 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e1c7      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004186:	4b3b      	ldr	r3, [pc, #236]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	4937      	ldr	r1, [pc, #220]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800419a:	e03a      	b.n	8004212 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d020      	beq.n	80041e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a4:	4b34      	ldr	r3, [pc, #208]	; (8004278 <HAL_RCC_OscConfig+0x244>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041aa:	f7fe fdc3 	bl	8002d34 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b2:	f7fe fdbf 	bl	8002d34 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e1a8      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c4:	4b2b      	ldr	r3, [pc, #172]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d0:	4b28      	ldr	r3, [pc, #160]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4925      	ldr	r1, [pc, #148]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	600b      	str	r3, [r1, #0]
 80041e4:	e015      	b.n	8004212 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041e6:	4b24      	ldr	r3, [pc, #144]	; (8004278 <HAL_RCC_OscConfig+0x244>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ec:	f7fe fda2 	bl	8002d34 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f4:	f7fe fd9e 	bl	8002d34 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e187      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004206:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f0      	bne.n	80041f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d036      	beq.n	800428c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d016      	beq.n	8004254 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004226:	4b15      	ldr	r3, [pc, #84]	; (800427c <HAL_RCC_OscConfig+0x248>)
 8004228:	2201      	movs	r2, #1
 800422a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422c:	f7fe fd82 	bl	8002d34 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004234:	f7fe fd7e 	bl	8002d34 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e167      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_RCC_OscConfig+0x240>)
 8004248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0x200>
 8004252:	e01b      	b.n	800428c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004254:	4b09      	ldr	r3, [pc, #36]	; (800427c <HAL_RCC_OscConfig+0x248>)
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425a:	f7fe fd6b 	bl	8002d34 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004260:	e00e      	b.n	8004280 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004262:	f7fe fd67 	bl	8002d34 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d907      	bls.n	8004280 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e150      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
 8004274:	40023800 	.word	0x40023800
 8004278:	42470000 	.word	0x42470000
 800427c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004280:	4b88      	ldr	r3, [pc, #544]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1ea      	bne.n	8004262 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8097 	beq.w	80043c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429a:	2300      	movs	r3, #0
 800429c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800429e:	4b81      	ldr	r3, [pc, #516]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10f      	bne.n	80042ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	4b7d      	ldr	r3, [pc, #500]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	4a7c      	ldr	r2, [pc, #496]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 80042b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ba:	4b7a      	ldr	r3, [pc, #488]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c2:	60bb      	str	r3, [r7, #8]
 80042c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c6:	2301      	movs	r3, #1
 80042c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ca:	4b77      	ldr	r3, [pc, #476]	; (80044a8 <HAL_RCC_OscConfig+0x474>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d118      	bne.n	8004308 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042d6:	4b74      	ldr	r3, [pc, #464]	; (80044a8 <HAL_RCC_OscConfig+0x474>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a73      	ldr	r2, [pc, #460]	; (80044a8 <HAL_RCC_OscConfig+0x474>)
 80042dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e2:	f7fe fd27 	bl	8002d34 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ea:	f7fe fd23 	bl	8002d34 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e10c      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fc:	4b6a      	ldr	r3, [pc, #424]	; (80044a8 <HAL_RCC_OscConfig+0x474>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d106      	bne.n	800431e <HAL_RCC_OscConfig+0x2ea>
 8004310:	4b64      	ldr	r3, [pc, #400]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	4a63      	ldr	r2, [pc, #396]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	6713      	str	r3, [r2, #112]	; 0x70
 800431c:	e01c      	b.n	8004358 <HAL_RCC_OscConfig+0x324>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b05      	cmp	r3, #5
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0x30c>
 8004326:	4b5f      	ldr	r3, [pc, #380]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432a:	4a5e      	ldr	r2, [pc, #376]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 800432c:	f043 0304 	orr.w	r3, r3, #4
 8004330:	6713      	str	r3, [r2, #112]	; 0x70
 8004332:	4b5c      	ldr	r3, [pc, #368]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	4a5b      	ldr	r2, [pc, #364]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	6713      	str	r3, [r2, #112]	; 0x70
 800433e:	e00b      	b.n	8004358 <HAL_RCC_OscConfig+0x324>
 8004340:	4b58      	ldr	r3, [pc, #352]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	4a57      	ldr	r2, [pc, #348]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004346:	f023 0301 	bic.w	r3, r3, #1
 800434a:	6713      	str	r3, [r2, #112]	; 0x70
 800434c:	4b55      	ldr	r3, [pc, #340]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004350:	4a54      	ldr	r2, [pc, #336]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004352:	f023 0304 	bic.w	r3, r3, #4
 8004356:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d015      	beq.n	800438c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004360:	f7fe fce8 	bl	8002d34 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004366:	e00a      	b.n	800437e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004368:	f7fe fce4 	bl	8002d34 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	f241 3288 	movw	r2, #5000	; 0x1388
 8004376:	4293      	cmp	r3, r2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e0cb      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437e:	4b49      	ldr	r3, [pc, #292]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0ee      	beq.n	8004368 <HAL_RCC_OscConfig+0x334>
 800438a:	e014      	b.n	80043b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438c:	f7fe fcd2 	bl	8002d34 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004392:	e00a      	b.n	80043aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004394:	f7fe fcce 	bl	8002d34 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e0b5      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043aa:	4b3e      	ldr	r3, [pc, #248]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1ee      	bne.n	8004394 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d105      	bne.n	80043c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043bc:	4b39      	ldr	r3, [pc, #228]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	4a38      	ldr	r2, [pc, #224]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 80043c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80a1 	beq.w	8004514 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043d2:	4b34      	ldr	r3, [pc, #208]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d05c      	beq.n	8004498 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d141      	bne.n	800446a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e6:	4b31      	ldr	r3, [pc, #196]	; (80044ac <HAL_RCC_OscConfig+0x478>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ec:	f7fe fca2 	bl	8002d34 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f4:	f7fe fc9e 	bl	8002d34 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e087      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004406:	4b27      	ldr	r3, [pc, #156]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69da      	ldr	r2, [r3, #28]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	019b      	lsls	r3, r3, #6
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	085b      	lsrs	r3, r3, #1
 800442a:	3b01      	subs	r3, #1
 800442c:	041b      	lsls	r3, r3, #16
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	061b      	lsls	r3, r3, #24
 8004436:	491b      	ldr	r1, [pc, #108]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004438:	4313      	orrs	r3, r2
 800443a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800443c:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <HAL_RCC_OscConfig+0x478>)
 800443e:	2201      	movs	r2, #1
 8004440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004442:	f7fe fc77 	bl	8002d34 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444a:	f7fe fc73 	bl	8002d34 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e05c      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445c:	4b11      	ldr	r3, [pc, #68]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0f0      	beq.n	800444a <HAL_RCC_OscConfig+0x416>
 8004468:	e054      	b.n	8004514 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446a:	4b10      	ldr	r3, [pc, #64]	; (80044ac <HAL_RCC_OscConfig+0x478>)
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004470:	f7fe fc60 	bl	8002d34 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004478:	f7fe fc5c 	bl	8002d34 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e045      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448a:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <HAL_RCC_OscConfig+0x470>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x444>
 8004496:	e03d      	b.n	8004514 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d107      	bne.n	80044b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e038      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
 80044a4:	40023800 	.word	0x40023800
 80044a8:	40007000 	.word	0x40007000
 80044ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044b0:	4b1b      	ldr	r3, [pc, #108]	; (8004520 <HAL_RCC_OscConfig+0x4ec>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d028      	beq.n	8004510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d121      	bne.n	8004510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d11a      	bne.n	8004510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044e0:	4013      	ands	r3, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d111      	bne.n	8004510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	3b01      	subs	r3, #1
 80044fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d107      	bne.n	8004510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800450c:	429a      	cmp	r2, r3
 800450e:	d001      	beq.n	8004514 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40023800 	.word	0x40023800

08004524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0cc      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004538:	4b68      	ldr	r3, [pc, #416]	; (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d90c      	bls.n	8004560 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004546:	4b65      	ldr	r3, [pc, #404]	; (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800454e:	4b63      	ldr	r3, [pc, #396]	; (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0b8      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d020      	beq.n	80045ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004578:	4b59      	ldr	r3, [pc, #356]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4a58      	ldr	r2, [pc, #352]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004582:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004590:	4b53      	ldr	r3, [pc, #332]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	4a52      	ldr	r2, [pc, #328]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800459a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800459c:	4b50      	ldr	r3, [pc, #320]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	494d      	ldr	r1, [pc, #308]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d044      	beq.n	8004644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d107      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	4b47      	ldr	r3, [pc, #284]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d119      	bne.n	8004602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e07f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d003      	beq.n	80045e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d107      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e2:	4b3f      	ldr	r3, [pc, #252]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e06f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f2:	4b3b      	ldr	r3, [pc, #236]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e067      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004602:	4b37      	ldr	r3, [pc, #220]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f023 0203 	bic.w	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	4934      	ldr	r1, [pc, #208]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	4313      	orrs	r3, r2
 8004612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004614:	f7fe fb8e 	bl	8002d34 <HAL_GetTick>
 8004618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461a:	e00a      	b.n	8004632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461c:	f7fe fb8a 	bl	8002d34 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	; 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e04f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004632:	4b2b      	ldr	r3, [pc, #172]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 020c 	and.w	r2, r3, #12
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	429a      	cmp	r2, r3
 8004642:	d1eb      	bne.n	800461c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004644:	4b25      	ldr	r3, [pc, #148]	; (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d20c      	bcs.n	800466c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004652:	4b22      	ldr	r3, [pc, #136]	; (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	4b20      	ldr	r3, [pc, #128]	; (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d001      	beq.n	800466c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e032      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004678:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4916      	ldr	r1, [pc, #88]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	4313      	orrs	r3, r2
 8004688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004696:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	490e      	ldr	r1, [pc, #56]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046aa:	f000 f821 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80046ae:	4602      	mov	r2, r0
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	490a      	ldr	r1, [pc, #40]	; (80046e4 <HAL_RCC_ClockConfig+0x1c0>)
 80046bc:	5ccb      	ldrb	r3, [r1, r3]
 80046be:	fa22 f303 	lsr.w	r3, r2, r3
 80046c2:	4a09      	ldr	r2, [pc, #36]	; (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 80046c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80046c6:	4b09      	ldr	r3, [pc, #36]	; (80046ec <HAL_RCC_ClockConfig+0x1c8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe faee 	bl	8002cac <HAL_InitTick>

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40023c00 	.word	0x40023c00
 80046e0:	40023800 	.word	0x40023800
 80046e4:	0800885c 	.word	0x0800885c
 80046e8:	20000044 	.word	0x20000044
 80046ec:	20000048 	.word	0x20000048

080046f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f4:	b090      	sub	sp, #64	; 0x40
 80046f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004708:	4b59      	ldr	r3, [pc, #356]	; (8004870 <HAL_RCC_GetSysClockFreq+0x180>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 030c 	and.w	r3, r3, #12
 8004710:	2b08      	cmp	r3, #8
 8004712:	d00d      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0x40>
 8004714:	2b08      	cmp	r3, #8
 8004716:	f200 80a1 	bhi.w	800485c <HAL_RCC_GetSysClockFreq+0x16c>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0x34>
 800471e:	2b04      	cmp	r3, #4
 8004720:	d003      	beq.n	800472a <HAL_RCC_GetSysClockFreq+0x3a>
 8004722:	e09b      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004724:	4b53      	ldr	r3, [pc, #332]	; (8004874 <HAL_RCC_GetSysClockFreq+0x184>)
 8004726:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004728:	e09b      	b.n	8004862 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800472a:	4b53      	ldr	r3, [pc, #332]	; (8004878 <HAL_RCC_GetSysClockFreq+0x188>)
 800472c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800472e:	e098      	b.n	8004862 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004730:	4b4f      	ldr	r3, [pc, #316]	; (8004870 <HAL_RCC_GetSysClockFreq+0x180>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004738:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800473a:	4b4d      	ldr	r3, [pc, #308]	; (8004870 <HAL_RCC_GetSysClockFreq+0x180>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d028      	beq.n	8004798 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004746:	4b4a      	ldr	r3, [pc, #296]	; (8004870 <HAL_RCC_GetSysClockFreq+0x180>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	099b      	lsrs	r3, r3, #6
 800474c:	2200      	movs	r2, #0
 800474e:	623b      	str	r3, [r7, #32]
 8004750:	627a      	str	r2, [r7, #36]	; 0x24
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004758:	2100      	movs	r1, #0
 800475a:	4b47      	ldr	r3, [pc, #284]	; (8004878 <HAL_RCC_GetSysClockFreq+0x188>)
 800475c:	fb03 f201 	mul.w	r2, r3, r1
 8004760:	2300      	movs	r3, #0
 8004762:	fb00 f303 	mul.w	r3, r0, r3
 8004766:	4413      	add	r3, r2
 8004768:	4a43      	ldr	r2, [pc, #268]	; (8004878 <HAL_RCC_GetSysClockFreq+0x188>)
 800476a:	fba0 1202 	umull	r1, r2, r0, r2
 800476e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004770:	460a      	mov	r2, r1
 8004772:	62ba      	str	r2, [r7, #40]	; 0x28
 8004774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004776:	4413      	add	r3, r2
 8004778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800477a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477c:	2200      	movs	r2, #0
 800477e:	61bb      	str	r3, [r7, #24]
 8004780:	61fa      	str	r2, [r7, #28]
 8004782:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004786:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800478a:	f7fc f96f 	bl	8000a6c <__aeabi_uldivmod>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4613      	mov	r3, r2
 8004794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004796:	e053      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004798:	4b35      	ldr	r3, [pc, #212]	; (8004870 <HAL_RCC_GetSysClockFreq+0x180>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	099b      	lsrs	r3, r3, #6
 800479e:	2200      	movs	r2, #0
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	617a      	str	r2, [r7, #20]
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80047aa:	f04f 0b00 	mov.w	fp, #0
 80047ae:	4652      	mov	r2, sl
 80047b0:	465b      	mov	r3, fp
 80047b2:	f04f 0000 	mov.w	r0, #0
 80047b6:	f04f 0100 	mov.w	r1, #0
 80047ba:	0159      	lsls	r1, r3, #5
 80047bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c0:	0150      	lsls	r0, r2, #5
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	ebb2 080a 	subs.w	r8, r2, sl
 80047ca:	eb63 090b 	sbc.w	r9, r3, fp
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80047da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047e2:	ebb2 0408 	subs.w	r4, r2, r8
 80047e6:	eb63 0509 	sbc.w	r5, r3, r9
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	00eb      	lsls	r3, r5, #3
 80047f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047f8:	00e2      	lsls	r2, r4, #3
 80047fa:	4614      	mov	r4, r2
 80047fc:	461d      	mov	r5, r3
 80047fe:	eb14 030a 	adds.w	r3, r4, sl
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	eb45 030b 	adc.w	r3, r5, fp
 8004808:	607b      	str	r3, [r7, #4]
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004816:	4629      	mov	r1, r5
 8004818:	028b      	lsls	r3, r1, #10
 800481a:	4621      	mov	r1, r4
 800481c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004820:	4621      	mov	r1, r4
 8004822:	028a      	lsls	r2, r1, #10
 8004824:	4610      	mov	r0, r2
 8004826:	4619      	mov	r1, r3
 8004828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800482a:	2200      	movs	r2, #0
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	60fa      	str	r2, [r7, #12]
 8004830:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004834:	f7fc f91a 	bl	8000a6c <__aeabi_uldivmod>
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4613      	mov	r3, r2
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <HAL_RCC_GetSysClockFreq+0x180>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	0c1b      	lsrs	r3, r3, #16
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	3301      	adds	r3, #1
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	fbb2 f3f3 	udiv	r3, r2, r3
 8004858:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800485a:	e002      	b.n	8004862 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800485c:	4b05      	ldr	r3, [pc, #20]	; (8004874 <HAL_RCC_GetSysClockFreq+0x184>)
 800485e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004860:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004864:	4618      	mov	r0, r3
 8004866:	3740      	adds	r7, #64	; 0x40
 8004868:	46bd      	mov	sp, r7
 800486a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800486e:	bf00      	nop
 8004870:	40023800 	.word	0x40023800
 8004874:	00f42400 	.word	0x00f42400
 8004878:	017d7840 	.word	0x017d7840

0800487c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004880:	4b03      	ldr	r3, [pc, #12]	; (8004890 <HAL_RCC_GetHCLKFreq+0x14>)
 8004882:	681b      	ldr	r3, [r3, #0]
}
 8004884:	4618      	mov	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	20000044 	.word	0x20000044

08004894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004898:	f7ff fff0 	bl	800487c <HAL_RCC_GetHCLKFreq>
 800489c:	4602      	mov	r2, r0
 800489e:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	0a9b      	lsrs	r3, r3, #10
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	4903      	ldr	r1, [pc, #12]	; (80048b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048aa:	5ccb      	ldrb	r3, [r1, r3]
 80048ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40023800 	.word	0x40023800
 80048b8:	0800886c 	.word	0x0800886c

080048bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048c0:	f7ff ffdc 	bl	800487c <HAL_RCC_GetHCLKFreq>
 80048c4:	4602      	mov	r2, r0
 80048c6:	4b05      	ldr	r3, [pc, #20]	; (80048dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	0b5b      	lsrs	r3, r3, #13
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	4903      	ldr	r1, [pc, #12]	; (80048e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048d2:	5ccb      	ldrb	r3, [r1, r3]
 80048d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d8:	4618      	mov	r0, r3
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40023800 	.word	0x40023800
 80048e0:	0800886c 	.word	0x0800886c

080048e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e041      	b.n	800497a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fe f89a 	bl	8002a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3304      	adds	r3, #4
 8004920:	4619      	mov	r1, r3
 8004922:	4610      	mov	r0, r2
 8004924:	f000 fba4 	bl	8005070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b01      	cmp	r3, #1
 8004996:	d001      	beq.n	800499c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e044      	b.n	8004a26 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1e      	ldr	r2, [pc, #120]	; (8004a34 <HAL_TIM_Base_Start_IT+0xb0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d018      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x6c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c6:	d013      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x6c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1a      	ldr	r2, [pc, #104]	; (8004a38 <HAL_TIM_Base_Start_IT+0xb4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00e      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x6c>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a19      	ldr	r2, [pc, #100]	; (8004a3c <HAL_TIM_Base_Start_IT+0xb8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d009      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x6c>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a17      	ldr	r2, [pc, #92]	; (8004a40 <HAL_TIM_Base_Start_IT+0xbc>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x6c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a16      	ldr	r2, [pc, #88]	; (8004a44 <HAL_TIM_Base_Start_IT+0xc0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d111      	bne.n	8004a14 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b06      	cmp	r3, #6
 8004a00:	d010      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 0201 	orr.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a12:	e007      	b.n	8004a24 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40010000 	.word	0x40010000
 8004a38:	40000400 	.word	0x40000400
 8004a3c:	40000800 	.word	0x40000800
 8004a40:	40000c00 	.word	0x40000c00
 8004a44:	40014000 	.word	0x40014000

08004a48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e097      	b.n	8004b8c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d106      	bne.n	8004a76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7fe f80d 	bl	8002a90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a8c:	f023 0307 	bic.w	r3, r3, #7
 8004a90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f000 fae7 	bl	8005070 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aca:	f023 0303 	bic.w	r3, r3, #3
 8004ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	021b      	lsls	r3, r3, #8
 8004ada:	4313      	orrs	r3, r2
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004ae8:	f023 030c 	bic.w	r3, r3, #12
 8004aec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004af4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004af8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	021b      	lsls	r3, r3, #8
 8004b04:	4313      	orrs	r3, r2
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	011a      	lsls	r2, r3, #4
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	031b      	lsls	r3, r3, #12
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004b26:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004b2e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ba4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bb4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bbc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d110      	bne.n	8004be6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d102      	bne.n	8004bd0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004bca:	7b7b      	ldrb	r3, [r7, #13]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d001      	beq.n	8004bd4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e069      	b.n	8004ca8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004be4:	e031      	b.n	8004c4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d110      	bne.n	8004c0e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004bec:	7bbb      	ldrb	r3, [r7, #14]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d102      	bne.n	8004bf8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004bf2:	7b3b      	ldrb	r3, [r7, #12]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d001      	beq.n	8004bfc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e055      	b.n	8004ca8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c0c:	e01d      	b.n	8004c4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d108      	bne.n	8004c26 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c14:	7bbb      	ldrb	r3, [r7, #14]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d105      	bne.n	8004c26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c1a:	7b7b      	ldrb	r3, [r7, #13]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d102      	bne.n	8004c26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c20:	7b3b      	ldrb	r3, [r7, #12]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d001      	beq.n	8004c2a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e03e      	b.n	8004ca8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2202      	movs	r2, #2
 8004c36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2202      	movs	r2, #2
 8004c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_TIM_Encoder_Start+0xc4>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d008      	beq.n	8004c68 <HAL_TIM_Encoder_Start+0xd4>
 8004c56:	e00f      	b.n	8004c78 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	2100      	movs	r1, #0
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 fb2b 	bl	80052bc <TIM_CCxChannelCmd>
      break;
 8004c66:	e016      	b.n	8004c96 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	2104      	movs	r1, #4
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fb23 	bl	80052bc <TIM_CCxChannelCmd>
      break;
 8004c76:	e00e      	b.n	8004c96 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	2100      	movs	r1, #0
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fb1b 	bl	80052bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	2104      	movs	r1, #4
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fb14 	bl	80052bc <TIM_CCxChannelCmd>
      break;
 8004c94:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0201 	orr.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d020      	beq.n	8004d14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01b      	beq.n	8004d14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f06f 0202 	mvn.w	r2, #2
 8004ce4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	f003 0303 	and.w	r3, r3, #3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f999 	bl	8005032 <HAL_TIM_IC_CaptureCallback>
 8004d00:	e005      	b.n	8004d0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f98b 	bl	800501e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f99c 	bl	8005046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d020      	beq.n	8004d60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01b      	beq.n	8004d60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0204 	mvn.w	r2, #4
 8004d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2202      	movs	r2, #2
 8004d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f973 	bl	8005032 <HAL_TIM_IC_CaptureCallback>
 8004d4c:	e005      	b.n	8004d5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f965 	bl	800501e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f976 	bl	8005046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d020      	beq.n	8004dac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01b      	beq.n	8004dac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f06f 0208 	mvn.w	r2, #8
 8004d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2204      	movs	r2, #4
 8004d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f94d 	bl	8005032 <HAL_TIM_IC_CaptureCallback>
 8004d98:	e005      	b.n	8004da6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f93f 	bl	800501e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f950 	bl	8005046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d020      	beq.n	8004df8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f003 0310 	and.w	r3, r3, #16
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d01b      	beq.n	8004df8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0210 	mvn.w	r2, #16
 8004dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2208      	movs	r2, #8
 8004dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f927 	bl	8005032 <HAL_TIM_IC_CaptureCallback>
 8004de4:	e005      	b.n	8004df2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f919 	bl	800501e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f92a 	bl	8005046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00c      	beq.n	8004e1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d007      	beq.n	8004e1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f06f 0201 	mvn.w	r2, #1
 8004e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fc fe7a 	bl	8001b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00c      	beq.n	8004e40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d007      	beq.n	8004e40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fadc 	bl	80053f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00c      	beq.n	8004e64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d007      	beq.n	8004e64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f8fb 	bl	800505a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00c      	beq.n	8004e88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d007      	beq.n	8004e88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f06f 0220 	mvn.w	r2, #32
 8004e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 faae 	bl	80053e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e88:	bf00      	nop
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_TIM_ConfigClockSource+0x1c>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e0b4      	b.n	8005016 <HAL_TIM_ConfigClockSource+0x186>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ed2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee4:	d03e      	beq.n	8004f64 <HAL_TIM_ConfigClockSource+0xd4>
 8004ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eea:	f200 8087 	bhi.w	8004ffc <HAL_TIM_ConfigClockSource+0x16c>
 8004eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef2:	f000 8086 	beq.w	8005002 <HAL_TIM_ConfigClockSource+0x172>
 8004ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004efa:	d87f      	bhi.n	8004ffc <HAL_TIM_ConfigClockSource+0x16c>
 8004efc:	2b70      	cmp	r3, #112	; 0x70
 8004efe:	d01a      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0xa6>
 8004f00:	2b70      	cmp	r3, #112	; 0x70
 8004f02:	d87b      	bhi.n	8004ffc <HAL_TIM_ConfigClockSource+0x16c>
 8004f04:	2b60      	cmp	r3, #96	; 0x60
 8004f06:	d050      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x11a>
 8004f08:	2b60      	cmp	r3, #96	; 0x60
 8004f0a:	d877      	bhi.n	8004ffc <HAL_TIM_ConfigClockSource+0x16c>
 8004f0c:	2b50      	cmp	r3, #80	; 0x50
 8004f0e:	d03c      	beq.n	8004f8a <HAL_TIM_ConfigClockSource+0xfa>
 8004f10:	2b50      	cmp	r3, #80	; 0x50
 8004f12:	d873      	bhi.n	8004ffc <HAL_TIM_ConfigClockSource+0x16c>
 8004f14:	2b40      	cmp	r3, #64	; 0x40
 8004f16:	d058      	beq.n	8004fca <HAL_TIM_ConfigClockSource+0x13a>
 8004f18:	2b40      	cmp	r3, #64	; 0x40
 8004f1a:	d86f      	bhi.n	8004ffc <HAL_TIM_ConfigClockSource+0x16c>
 8004f1c:	2b30      	cmp	r3, #48	; 0x30
 8004f1e:	d064      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0x15a>
 8004f20:	2b30      	cmp	r3, #48	; 0x30
 8004f22:	d86b      	bhi.n	8004ffc <HAL_TIM_ConfigClockSource+0x16c>
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d060      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0x15a>
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d867      	bhi.n	8004ffc <HAL_TIM_ConfigClockSource+0x16c>
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d05c      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0x15a>
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d05a      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0x15a>
 8004f34:	e062      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f46:	f000 f999 	bl	800527c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	609a      	str	r2, [r3, #8]
      break;
 8004f62:	e04f      	b.n	8005004 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f74:	f000 f982 	bl	800527c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f86:	609a      	str	r2, [r3, #8]
      break;
 8004f88:	e03c      	b.n	8005004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f96:	461a      	mov	r2, r3
 8004f98:	f000 f8f6 	bl	8005188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2150      	movs	r1, #80	; 0x50
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 f94f 	bl	8005246 <TIM_ITRx_SetConfig>
      break;
 8004fa8:	e02c      	b.n	8005004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f000 f915 	bl	80051e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2160      	movs	r1, #96	; 0x60
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 f93f 	bl	8005246 <TIM_ITRx_SetConfig>
      break;
 8004fc8:	e01c      	b.n	8005004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	f000 f8d6 	bl	8005188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2140      	movs	r1, #64	; 0x40
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 f92f 	bl	8005246 <TIM_ITRx_SetConfig>
      break;
 8004fe8:	e00c      	b.n	8005004 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	f000 f926 	bl	8005246 <TIM_ITRx_SetConfig>
      break;
 8004ffa:	e003      	b.n	8005004 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8005000:	e000      	b.n	8005004 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005002:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
	...

08005070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a3a      	ldr	r2, [pc, #232]	; (800516c <TIM_Base_SetConfig+0xfc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00f      	beq.n	80050a8 <TIM_Base_SetConfig+0x38>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508e:	d00b      	beq.n	80050a8 <TIM_Base_SetConfig+0x38>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a37      	ldr	r2, [pc, #220]	; (8005170 <TIM_Base_SetConfig+0x100>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d007      	beq.n	80050a8 <TIM_Base_SetConfig+0x38>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a36      	ldr	r2, [pc, #216]	; (8005174 <TIM_Base_SetConfig+0x104>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d003      	beq.n	80050a8 <TIM_Base_SetConfig+0x38>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a35      	ldr	r2, [pc, #212]	; (8005178 <TIM_Base_SetConfig+0x108>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d108      	bne.n	80050ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a2b      	ldr	r2, [pc, #172]	; (800516c <TIM_Base_SetConfig+0xfc>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d01b      	beq.n	80050fa <TIM_Base_SetConfig+0x8a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c8:	d017      	beq.n	80050fa <TIM_Base_SetConfig+0x8a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a28      	ldr	r2, [pc, #160]	; (8005170 <TIM_Base_SetConfig+0x100>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d013      	beq.n	80050fa <TIM_Base_SetConfig+0x8a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a27      	ldr	r2, [pc, #156]	; (8005174 <TIM_Base_SetConfig+0x104>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00f      	beq.n	80050fa <TIM_Base_SetConfig+0x8a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a26      	ldr	r2, [pc, #152]	; (8005178 <TIM_Base_SetConfig+0x108>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00b      	beq.n	80050fa <TIM_Base_SetConfig+0x8a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a25      	ldr	r2, [pc, #148]	; (800517c <TIM_Base_SetConfig+0x10c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d007      	beq.n	80050fa <TIM_Base_SetConfig+0x8a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a24      	ldr	r2, [pc, #144]	; (8005180 <TIM_Base_SetConfig+0x110>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d003      	beq.n	80050fa <TIM_Base_SetConfig+0x8a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a23      	ldr	r2, [pc, #140]	; (8005184 <TIM_Base_SetConfig+0x114>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d108      	bne.n	800510c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4313      	orrs	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a0e      	ldr	r2, [pc, #56]	; (800516c <TIM_Base_SetConfig+0xfc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d103      	bne.n	8005140 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d105      	bne.n	800515e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f023 0201 	bic.w	r2, r3, #1
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	611a      	str	r2, [r3, #16]
  }
}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40010000 	.word	0x40010000
 8005170:	40000400 	.word	0x40000400
 8005174:	40000800 	.word	0x40000800
 8005178:	40000c00 	.word	0x40000c00
 800517c:	40014000 	.word	0x40014000
 8005180:	40014400 	.word	0x40014400
 8005184:	40014800 	.word	0x40014800

08005188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	f023 0201 	bic.w	r2, r3, #1
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f023 030a 	bic.w	r3, r3, #10
 80051c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	621a      	str	r2, [r3, #32]
}
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b087      	sub	sp, #28
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f023 0210 	bic.w	r2, r3, #16
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	031b      	lsls	r3, r3, #12
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005222:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	4313      	orrs	r3, r2
 800522c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	621a      	str	r2, [r3, #32]
}
 800523a:	bf00      	nop
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005246:	b480      	push	{r7}
 8005248:	b085      	sub	sp, #20
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	f043 0307 	orr.w	r3, r3, #7
 8005268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	609a      	str	r2, [r3, #8]
}
 8005270:	bf00      	nop
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	021a      	lsls	r2, r3, #8
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	431a      	orrs	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	609a      	str	r2, [r3, #8]
}
 80052b0:	bf00      	nop
 80052b2:	371c      	adds	r7, #28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	2201      	movs	r2, #1
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a1a      	ldr	r2, [r3, #32]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	43db      	mvns	r3, r3
 80052de:	401a      	ands	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a1a      	ldr	r2, [r3, #32]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f003 031f 	and.w	r3, r3, #31
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	fa01 f303 	lsl.w	r3, r1, r3
 80052f4:	431a      	orrs	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	621a      	str	r2, [r3, #32]
}
 80052fa:	bf00      	nop
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
	...

08005308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005318:	2b01      	cmp	r3, #1
 800531a:	d101      	bne.n	8005320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800531c:	2302      	movs	r3, #2
 800531e:	e050      	b.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1c      	ldr	r2, [pc, #112]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d018      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536c:	d013      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a18      	ldr	r2, [pc, #96]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00e      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a16      	ldr	r2, [pc, #88]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d009      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a15      	ldr	r2, [pc, #84]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d004      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a13      	ldr	r2, [pc, #76]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d10c      	bne.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800539c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40010000 	.word	0x40010000
 80053d4:	40000400 	.word	0x40000400
 80053d8:	40000800 	.word	0x40000800
 80053dc:	40000c00 	.word	0x40000c00
 80053e0:	40014000 	.word	0x40014000

080053e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e042      	b.n	80054a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fd fb9e 	bl	8002b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2224      	movs	r2, #36	; 0x24
 800543c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800544e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fcdb 	bl	8005e0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695a      	ldr	r2, [r3, #20]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2220      	movs	r2, #32
 8005498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	4613      	mov	r3, r2
 80054b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	d112      	bne.n	80054ec <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <HAL_UART_Receive_IT+0x26>
 80054cc:	88fb      	ldrh	r3, [r7, #6]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e00b      	b.n	80054ee <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054dc:	88fb      	ldrh	r3, [r7, #6]
 80054de:	461a      	mov	r2, r3
 80054e0:	68b9      	ldr	r1, [r7, #8]
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 faba 	bl	8005a5c <UART_Start_Receive_IT>
 80054e8:	4603      	mov	r3, r0
 80054ea:	e000      	b.n	80054ee <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80054ec:	2302      	movs	r3, #2
  }
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
	...

080054f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b0ba      	sub	sp, #232	; 0xe8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800551e:	2300      	movs	r3, #0
 8005520:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005524:	2300      	movs	r3, #0
 8005526:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800552a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10f      	bne.n	800555e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800553e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b00      	cmp	r3, #0
 8005548:	d009      	beq.n	800555e <HAL_UART_IRQHandler+0x66>
 800554a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800554e:	f003 0320 	and.w	r3, r3, #32
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fb99 	bl	8005c8e <UART_Receive_IT>
      return;
 800555c:	e25b      	b.n	8005a16 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800555e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 80de 	beq.w	8005724 <HAL_UART_IRQHandler+0x22c>
 8005568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d106      	bne.n	8005582 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005578:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 80d1 	beq.w	8005724 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00b      	beq.n	80055a6 <HAL_UART_IRQHandler+0xae>
 800558e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005596:	2b00      	cmp	r3, #0
 8005598:	d005      	beq.n	80055a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559e:	f043 0201 	orr.w	r2, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00b      	beq.n	80055ca <HAL_UART_IRQHandler+0xd2>
 80055b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c2:	f043 0202 	orr.w	r2, r3, #2
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00b      	beq.n	80055ee <HAL_UART_IRQHandler+0xf6>
 80055d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d005      	beq.n	80055ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	f043 0204 	orr.w	r2, r3, #4
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d011      	beq.n	800561e <HAL_UART_IRQHandler+0x126>
 80055fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055fe:	f003 0320 	and.w	r3, r3, #32
 8005602:	2b00      	cmp	r3, #0
 8005604:	d105      	bne.n	8005612 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d005      	beq.n	800561e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005616:	f043 0208 	orr.w	r2, r3, #8
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 81f2 	beq.w	8005a0c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800562c:	f003 0320 	and.w	r3, r3, #32
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <HAL_UART_IRQHandler+0x14e>
 8005634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005638:	f003 0320 	and.w	r3, r3, #32
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fb24 	bl	8005c8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b40      	cmp	r3, #64	; 0x40
 8005652:	bf0c      	ite	eq
 8005654:	2301      	moveq	r3, #1
 8005656:	2300      	movne	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b00      	cmp	r3, #0
 8005668:	d103      	bne.n	8005672 <HAL_UART_IRQHandler+0x17a>
 800566a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800566e:	2b00      	cmp	r3, #0
 8005670:	d04f      	beq.n	8005712 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fa2c 	bl	8005ad0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005682:	2b40      	cmp	r3, #64	; 0x40
 8005684:	d141      	bne.n	800570a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3314      	adds	r3, #20
 800568c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005690:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800569c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3314      	adds	r3, #20
 80056ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1d9      	bne.n	8005686 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d013      	beq.n	8005702 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056de:	4a7e      	ldr	r2, [pc, #504]	; (80058d8 <HAL_UART_IRQHandler+0x3e0>)
 80056e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fd fcd5 	bl	8003096 <HAL_DMA_Abort_IT>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d016      	beq.n	8005720 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80056fc:	4610      	mov	r0, r2
 80056fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005700:	e00e      	b.n	8005720 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f994 	bl	8005a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005708:	e00a      	b.n	8005720 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f990 	bl	8005a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005710:	e006      	b.n	8005720 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f98c 	bl	8005a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800571e:	e175      	b.n	8005a0c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005720:	bf00      	nop
    return;
 8005722:	e173      	b.n	8005a0c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	2b01      	cmp	r3, #1
 800572a:	f040 814f 	bne.w	80059cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800572e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005732:	f003 0310 	and.w	r3, r3, #16
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 8148 	beq.w	80059cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800573c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 8141 	beq.w	80059cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800574a:	2300      	movs	r3, #0
 800574c:	60bb      	str	r3, [r7, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	60bb      	str	r3, [r7, #8]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	60bb      	str	r3, [r7, #8]
 800575e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b40      	cmp	r3, #64	; 0x40
 800576c:	f040 80b6 	bne.w	80058dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800577c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 8145 	beq.w	8005a10 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800578a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800578e:	429a      	cmp	r2, r3
 8005790:	f080 813e 	bcs.w	8005a10 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800579a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a6:	f000 8088 	beq.w	80058ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	330c      	adds	r3, #12
 80057b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057b8:	e853 3f00 	ldrex	r3, [r3]
 80057bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	330c      	adds	r3, #12
 80057d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80057d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057e6:	e841 2300 	strex	r3, r2, [r1]
 80057ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1d9      	bne.n	80057aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3314      	adds	r3, #20
 80057fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005806:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005808:	f023 0301 	bic.w	r3, r3, #1
 800580c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3314      	adds	r3, #20
 8005816:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800581a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800581e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005820:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005822:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005826:	e841 2300 	strex	r3, r2, [r1]
 800582a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800582c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1e1      	bne.n	80057f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3314      	adds	r3, #20
 8005838:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005848:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3314      	adds	r3, #20
 8005852:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005856:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005858:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800585c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e3      	bne.n	8005832 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2220      	movs	r2, #32
 800586e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	330c      	adds	r3, #12
 800587e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005882:	e853 3f00 	ldrex	r3, [r3]
 8005886:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800588a:	f023 0310 	bic.w	r3, r3, #16
 800588e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	330c      	adds	r3, #12
 8005898:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800589c:	65ba      	str	r2, [r7, #88]	; 0x58
 800589e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058a4:	e841 2300 	strex	r3, r2, [r1]
 80058a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1e3      	bne.n	8005878 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fd fb7e 	bl	8002fb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2202      	movs	r2, #2
 80058be:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	4619      	mov	r1, r3
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f8b7 	bl	8005a44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058d6:	e09b      	b.n	8005a10 <HAL_UART_IRQHandler+0x518>
 80058d8:	08005b97 	.word	0x08005b97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 808e 	beq.w	8005a14 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80058f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 8089 	beq.w	8005a14 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	330c      	adds	r3, #12
 8005908:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005914:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005918:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	330c      	adds	r3, #12
 8005922:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005926:	647a      	str	r2, [r7, #68]	; 0x44
 8005928:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800592c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e3      	bne.n	8005902 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3314      	adds	r3, #20
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	623b      	str	r3, [r7, #32]
   return(result);
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	f023 0301 	bic.w	r3, r3, #1
 8005950:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3314      	adds	r3, #20
 800595a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800595e:	633a      	str	r2, [r7, #48]	; 0x30
 8005960:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e3      	bne.n	800593a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2220      	movs	r2, #32
 8005976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	330c      	adds	r3, #12
 8005986:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	e853 3f00 	ldrex	r3, [r3]
 800598e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0310 	bic.w	r3, r3, #16
 8005996:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	330c      	adds	r3, #12
 80059a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059a4:	61fa      	str	r2, [r7, #28]
 80059a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a8:	69b9      	ldr	r1, [r7, #24]
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	e841 2300 	strex	r3, r2, [r1]
 80059b0:	617b      	str	r3, [r7, #20]
   return(result);
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e3      	bne.n	8005980 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059c2:	4619      	mov	r1, r3
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f83d 	bl	8005a44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059ca:	e023      	b.n	8005a14 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d009      	beq.n	80059ec <HAL_UART_IRQHandler+0x4f4>
 80059d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f8ea 	bl	8005bbe <UART_Transmit_IT>
    return;
 80059ea:	e014      	b.n	8005a16 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00e      	beq.n	8005a16 <HAL_UART_IRQHandler+0x51e>
 80059f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f92a 	bl	8005c5e <UART_EndTransmit_IT>
    return;
 8005a0a:	e004      	b.n	8005a16 <HAL_UART_IRQHandler+0x51e>
    return;
 8005a0c:	bf00      	nop
 8005a0e:	e002      	b.n	8005a16 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a10:	bf00      	nop
 8005a12:	e000      	b.n	8005a16 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a14:	bf00      	nop
  }
}
 8005a16:	37e8      	adds	r7, #232	; 0xe8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	4613      	mov	r3, r2
 8005a68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	88fa      	ldrh	r2, [r7, #6]
 8005a74:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	88fa      	ldrh	r2, [r7, #6]
 8005a7a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2222      	movs	r2, #34	; 0x22
 8005a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d007      	beq.n	8005aa2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68da      	ldr	r2, [r3, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aa0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	695a      	ldr	r2, [r3, #20]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 0201 	orr.w	r2, r2, #1
 8005ab0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0220 	orr.w	r2, r2, #32
 8005ac0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b095      	sub	sp, #84	; 0x54
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	330c      	adds	r3, #12
 8005ade:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae2:	e853 3f00 	ldrex	r3, [r3]
 8005ae6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	330c      	adds	r3, #12
 8005af6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005af8:	643a      	str	r2, [r7, #64]	; 0x40
 8005afa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005afe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b00:	e841 2300 	strex	r3, r2, [r1]
 8005b04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1e5      	bne.n	8005ad8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3314      	adds	r3, #20
 8005b12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	e853 3f00 	ldrex	r3, [r3]
 8005b1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	f023 0301 	bic.w	r3, r3, #1
 8005b22:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3314      	adds	r3, #20
 8005b2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b34:	e841 2300 	strex	r3, r2, [r1]
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1e5      	bne.n	8005b0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d119      	bne.n	8005b7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	330c      	adds	r3, #12
 8005b4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	e853 3f00 	ldrex	r3, [r3]
 8005b56:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f023 0310 	bic.w	r3, r3, #16
 8005b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	330c      	adds	r3, #12
 8005b66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b68:	61ba      	str	r2, [r7, #24]
 8005b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6c:	6979      	ldr	r1, [r7, #20]
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	e841 2300 	strex	r3, r2, [r1]
 8005b74:	613b      	str	r3, [r7, #16]
   return(result);
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1e5      	bne.n	8005b48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b8a:	bf00      	nop
 8005b8c:	3754      	adds	r7, #84	; 0x54
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b084      	sub	sp, #16
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7ff ff3d 	bl	8005a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bb6:	bf00      	nop
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b085      	sub	sp, #20
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b21      	cmp	r3, #33	; 0x21
 8005bd0:	d13e      	bne.n	8005c50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bda:	d114      	bne.n	8005c06 <UART_Transmit_IT+0x48>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d110      	bne.n	8005c06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bf8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	1c9a      	adds	r2, r3, #2
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	621a      	str	r2, [r3, #32]
 8005c04:	e008      	b.n	8005c18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	1c59      	adds	r1, r3, #1
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6211      	str	r1, [r2, #32]
 8005c10:	781a      	ldrb	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	4619      	mov	r1, r3
 8005c26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10f      	bne.n	8005c4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	e000      	b.n	8005c52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c50:	2302      	movs	r3, #2
  }
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b082      	sub	sp, #8
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7ff fecc 	bl	8005a1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b08c      	sub	sp, #48	; 0x30
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b22      	cmp	r3, #34	; 0x22
 8005ca0:	f040 80ae 	bne.w	8005e00 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cac:	d117      	bne.n	8005cde <UART_Receive_IT+0x50>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d113      	bne.n	8005cde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd6:	1c9a      	adds	r2, r3, #2
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	629a      	str	r2, [r3, #40]	; 0x28
 8005cdc:	e026      	b.n	8005d2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf0:	d007      	beq.n	8005d02 <UART_Receive_IT+0x74>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10a      	bne.n	8005d10 <UART_Receive_IT+0x82>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d106      	bne.n	8005d10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0c:	701a      	strb	r2, [r3, #0]
 8005d0e:	e008      	b.n	8005d22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d15d      	bne.n	8005dfc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0220 	bic.w	r2, r2, #32
 8005d4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695a      	ldr	r2, [r3, #20]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0201 	bic.w	r2, r2, #1
 8005d6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d135      	bne.n	8005df2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	330c      	adds	r3, #12
 8005d92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f023 0310 	bic.w	r3, r3, #16
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330c      	adds	r3, #12
 8005daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dac:	623a      	str	r2, [r7, #32]
 8005dae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	69f9      	ldr	r1, [r7, #28]
 8005db2:	6a3a      	ldr	r2, [r7, #32]
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e5      	bne.n	8005d8c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0310 	and.w	r3, r3, #16
 8005dca:	2b10      	cmp	r3, #16
 8005dcc:	d10a      	bne.n	8005de4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005de8:	4619      	mov	r1, r3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff fe2a 	bl	8005a44 <HAL_UARTEx_RxEventCallback>
 8005df0:	e002      	b.n	8005df8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7fb feb0 	bl	8001b58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	e002      	b.n	8005e02 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e000      	b.n	8005e02 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e00:	2302      	movs	r3, #2
  }
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3730      	adds	r7, #48	; 0x30
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e10:	b0c0      	sub	sp, #256	; 0x100
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e28:	68d9      	ldr	r1, [r3, #12]
 8005e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	ea40 0301 	orr.w	r3, r0, r1
 8005e34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e64:	f021 010c 	bic.w	r1, r1, #12
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e72:	430b      	orrs	r3, r1
 8005e74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e86:	6999      	ldr	r1, [r3, #24]
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	ea40 0301 	orr.w	r3, r0, r1
 8005e92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	4b8f      	ldr	r3, [pc, #572]	; (80060d8 <UART_SetConfig+0x2cc>)
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d005      	beq.n	8005eac <UART_SetConfig+0xa0>
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	4b8d      	ldr	r3, [pc, #564]	; (80060dc <UART_SetConfig+0x2d0>)
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d104      	bne.n	8005eb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005eac:	f7fe fd06 	bl	80048bc <HAL_RCC_GetPCLK2Freq>
 8005eb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005eb4:	e003      	b.n	8005ebe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005eb6:	f7fe fced 	bl	8004894 <HAL_RCC_GetPCLK1Freq>
 8005eba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec8:	f040 810c 	bne.w	80060e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ed6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005eda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005ede:	4622      	mov	r2, r4
 8005ee0:	462b      	mov	r3, r5
 8005ee2:	1891      	adds	r1, r2, r2
 8005ee4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ee6:	415b      	adcs	r3, r3
 8005ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005eee:	4621      	mov	r1, r4
 8005ef0:	eb12 0801 	adds.w	r8, r2, r1
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	eb43 0901 	adc.w	r9, r3, r1
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	f04f 0300 	mov.w	r3, #0
 8005f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f0e:	4690      	mov	r8, r2
 8005f10:	4699      	mov	r9, r3
 8005f12:	4623      	mov	r3, r4
 8005f14:	eb18 0303 	adds.w	r3, r8, r3
 8005f18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f1c:	462b      	mov	r3, r5
 8005f1e:	eb49 0303 	adc.w	r3, r9, r3
 8005f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	18db      	adds	r3, r3, r3
 8005f3e:	653b      	str	r3, [r7, #80]	; 0x50
 8005f40:	4613      	mov	r3, r2
 8005f42:	eb42 0303 	adc.w	r3, r2, r3
 8005f46:	657b      	str	r3, [r7, #84]	; 0x54
 8005f48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f50:	f7fa fd8c 	bl	8000a6c <__aeabi_uldivmod>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4b61      	ldr	r3, [pc, #388]	; (80060e0 <UART_SetConfig+0x2d4>)
 8005f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f5e:	095b      	lsrs	r3, r3, #5
 8005f60:	011c      	lsls	r4, r3, #4
 8005f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f74:	4642      	mov	r2, r8
 8005f76:	464b      	mov	r3, r9
 8005f78:	1891      	adds	r1, r2, r2
 8005f7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f7c:	415b      	adcs	r3, r3
 8005f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f84:	4641      	mov	r1, r8
 8005f86:	eb12 0a01 	adds.w	sl, r2, r1
 8005f8a:	4649      	mov	r1, r9
 8005f8c:	eb43 0b01 	adc.w	fp, r3, r1
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	f04f 0300 	mov.w	r3, #0
 8005f98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fa4:	4692      	mov	sl, r2
 8005fa6:	469b      	mov	fp, r3
 8005fa8:	4643      	mov	r3, r8
 8005faa:	eb1a 0303 	adds.w	r3, sl, r3
 8005fae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	eb4b 0303 	adc.w	r3, fp, r3
 8005fb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005fcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	18db      	adds	r3, r3, r3
 8005fd4:	643b      	str	r3, [r7, #64]	; 0x40
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	eb42 0303 	adc.w	r3, r2, r3
 8005fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8005fde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fe2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005fe6:	f7fa fd41 	bl	8000a6c <__aeabi_uldivmod>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4611      	mov	r1, r2
 8005ff0:	4b3b      	ldr	r3, [pc, #236]	; (80060e0 <UART_SetConfig+0x2d4>)
 8005ff2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	2264      	movs	r2, #100	; 0x64
 8005ffa:	fb02 f303 	mul.w	r3, r2, r3
 8005ffe:	1acb      	subs	r3, r1, r3
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006006:	4b36      	ldr	r3, [pc, #216]	; (80060e0 <UART_SetConfig+0x2d4>)
 8006008:	fba3 2302 	umull	r2, r3, r3, r2
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	005b      	lsls	r3, r3, #1
 8006010:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006014:	441c      	add	r4, r3
 8006016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800601a:	2200      	movs	r2, #0
 800601c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006020:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006024:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006028:	4642      	mov	r2, r8
 800602a:	464b      	mov	r3, r9
 800602c:	1891      	adds	r1, r2, r2
 800602e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006030:	415b      	adcs	r3, r3
 8006032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006034:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006038:	4641      	mov	r1, r8
 800603a:	1851      	adds	r1, r2, r1
 800603c:	6339      	str	r1, [r7, #48]	; 0x30
 800603e:	4649      	mov	r1, r9
 8006040:	414b      	adcs	r3, r1
 8006042:	637b      	str	r3, [r7, #52]	; 0x34
 8006044:	f04f 0200 	mov.w	r2, #0
 8006048:	f04f 0300 	mov.w	r3, #0
 800604c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006050:	4659      	mov	r1, fp
 8006052:	00cb      	lsls	r3, r1, #3
 8006054:	4651      	mov	r1, sl
 8006056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800605a:	4651      	mov	r1, sl
 800605c:	00ca      	lsls	r2, r1, #3
 800605e:	4610      	mov	r0, r2
 8006060:	4619      	mov	r1, r3
 8006062:	4603      	mov	r3, r0
 8006064:	4642      	mov	r2, r8
 8006066:	189b      	adds	r3, r3, r2
 8006068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800606c:	464b      	mov	r3, r9
 800606e:	460a      	mov	r2, r1
 8006070:	eb42 0303 	adc.w	r3, r2, r3
 8006074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006084:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006088:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800608c:	460b      	mov	r3, r1
 800608e:	18db      	adds	r3, r3, r3
 8006090:	62bb      	str	r3, [r7, #40]	; 0x28
 8006092:	4613      	mov	r3, r2
 8006094:	eb42 0303 	adc.w	r3, r2, r3
 8006098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800609a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800609e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80060a2:	f7fa fce3 	bl	8000a6c <__aeabi_uldivmod>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4b0d      	ldr	r3, [pc, #52]	; (80060e0 <UART_SetConfig+0x2d4>)
 80060ac:	fba3 1302 	umull	r1, r3, r3, r2
 80060b0:	095b      	lsrs	r3, r3, #5
 80060b2:	2164      	movs	r1, #100	; 0x64
 80060b4:	fb01 f303 	mul.w	r3, r1, r3
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	3332      	adds	r3, #50	; 0x32
 80060be:	4a08      	ldr	r2, [pc, #32]	; (80060e0 <UART_SetConfig+0x2d4>)
 80060c0:	fba2 2303 	umull	r2, r3, r2, r3
 80060c4:	095b      	lsrs	r3, r3, #5
 80060c6:	f003 0207 	and.w	r2, r3, #7
 80060ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4422      	add	r2, r4
 80060d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060d4:	e106      	b.n	80062e4 <UART_SetConfig+0x4d8>
 80060d6:	bf00      	nop
 80060d8:	40011000 	.word	0x40011000
 80060dc:	40011400 	.word	0x40011400
 80060e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060e8:	2200      	movs	r2, #0
 80060ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80060f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80060f6:	4642      	mov	r2, r8
 80060f8:	464b      	mov	r3, r9
 80060fa:	1891      	adds	r1, r2, r2
 80060fc:	6239      	str	r1, [r7, #32]
 80060fe:	415b      	adcs	r3, r3
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
 8006102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006106:	4641      	mov	r1, r8
 8006108:	1854      	adds	r4, r2, r1
 800610a:	4649      	mov	r1, r9
 800610c:	eb43 0501 	adc.w	r5, r3, r1
 8006110:	f04f 0200 	mov.w	r2, #0
 8006114:	f04f 0300 	mov.w	r3, #0
 8006118:	00eb      	lsls	r3, r5, #3
 800611a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800611e:	00e2      	lsls	r2, r4, #3
 8006120:	4614      	mov	r4, r2
 8006122:	461d      	mov	r5, r3
 8006124:	4643      	mov	r3, r8
 8006126:	18e3      	adds	r3, r4, r3
 8006128:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800612c:	464b      	mov	r3, r9
 800612e:	eb45 0303 	adc.w	r3, r5, r3
 8006132:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006142:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006146:	f04f 0200 	mov.w	r2, #0
 800614a:	f04f 0300 	mov.w	r3, #0
 800614e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006152:	4629      	mov	r1, r5
 8006154:	008b      	lsls	r3, r1, #2
 8006156:	4621      	mov	r1, r4
 8006158:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800615c:	4621      	mov	r1, r4
 800615e:	008a      	lsls	r2, r1, #2
 8006160:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006164:	f7fa fc82 	bl	8000a6c <__aeabi_uldivmod>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4b60      	ldr	r3, [pc, #384]	; (80062f0 <UART_SetConfig+0x4e4>)
 800616e:	fba3 2302 	umull	r2, r3, r3, r2
 8006172:	095b      	lsrs	r3, r3, #5
 8006174:	011c      	lsls	r4, r3, #4
 8006176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800617a:	2200      	movs	r2, #0
 800617c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006180:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006184:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006188:	4642      	mov	r2, r8
 800618a:	464b      	mov	r3, r9
 800618c:	1891      	adds	r1, r2, r2
 800618e:	61b9      	str	r1, [r7, #24]
 8006190:	415b      	adcs	r3, r3
 8006192:	61fb      	str	r3, [r7, #28]
 8006194:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006198:	4641      	mov	r1, r8
 800619a:	1851      	adds	r1, r2, r1
 800619c:	6139      	str	r1, [r7, #16]
 800619e:	4649      	mov	r1, r9
 80061a0:	414b      	adcs	r3, r1
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	f04f 0200 	mov.w	r2, #0
 80061a8:	f04f 0300 	mov.w	r3, #0
 80061ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061b0:	4659      	mov	r1, fp
 80061b2:	00cb      	lsls	r3, r1, #3
 80061b4:	4651      	mov	r1, sl
 80061b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ba:	4651      	mov	r1, sl
 80061bc:	00ca      	lsls	r2, r1, #3
 80061be:	4610      	mov	r0, r2
 80061c0:	4619      	mov	r1, r3
 80061c2:	4603      	mov	r3, r0
 80061c4:	4642      	mov	r2, r8
 80061c6:	189b      	adds	r3, r3, r2
 80061c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061cc:	464b      	mov	r3, r9
 80061ce:	460a      	mov	r2, r1
 80061d0:	eb42 0303 	adc.w	r3, r2, r3
 80061d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80061e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	f04f 0300 	mov.w	r3, #0
 80061ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80061f0:	4649      	mov	r1, r9
 80061f2:	008b      	lsls	r3, r1, #2
 80061f4:	4641      	mov	r1, r8
 80061f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061fa:	4641      	mov	r1, r8
 80061fc:	008a      	lsls	r2, r1, #2
 80061fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006202:	f7fa fc33 	bl	8000a6c <__aeabi_uldivmod>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	4611      	mov	r1, r2
 800620c:	4b38      	ldr	r3, [pc, #224]	; (80062f0 <UART_SetConfig+0x4e4>)
 800620e:	fba3 2301 	umull	r2, r3, r3, r1
 8006212:	095b      	lsrs	r3, r3, #5
 8006214:	2264      	movs	r2, #100	; 0x64
 8006216:	fb02 f303 	mul.w	r3, r2, r3
 800621a:	1acb      	subs	r3, r1, r3
 800621c:	011b      	lsls	r3, r3, #4
 800621e:	3332      	adds	r3, #50	; 0x32
 8006220:	4a33      	ldr	r2, [pc, #204]	; (80062f0 <UART_SetConfig+0x4e4>)
 8006222:	fba2 2303 	umull	r2, r3, r2, r3
 8006226:	095b      	lsrs	r3, r3, #5
 8006228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800622c:	441c      	add	r4, r3
 800622e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006232:	2200      	movs	r2, #0
 8006234:	673b      	str	r3, [r7, #112]	; 0x70
 8006236:	677a      	str	r2, [r7, #116]	; 0x74
 8006238:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800623c:	4642      	mov	r2, r8
 800623e:	464b      	mov	r3, r9
 8006240:	1891      	adds	r1, r2, r2
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	415b      	adcs	r3, r3
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800624c:	4641      	mov	r1, r8
 800624e:	1851      	adds	r1, r2, r1
 8006250:	6039      	str	r1, [r7, #0]
 8006252:	4649      	mov	r1, r9
 8006254:	414b      	adcs	r3, r1
 8006256:	607b      	str	r3, [r7, #4]
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	f04f 0300 	mov.w	r3, #0
 8006260:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006264:	4659      	mov	r1, fp
 8006266:	00cb      	lsls	r3, r1, #3
 8006268:	4651      	mov	r1, sl
 800626a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800626e:	4651      	mov	r1, sl
 8006270:	00ca      	lsls	r2, r1, #3
 8006272:	4610      	mov	r0, r2
 8006274:	4619      	mov	r1, r3
 8006276:	4603      	mov	r3, r0
 8006278:	4642      	mov	r2, r8
 800627a:	189b      	adds	r3, r3, r2
 800627c:	66bb      	str	r3, [r7, #104]	; 0x68
 800627e:	464b      	mov	r3, r9
 8006280:	460a      	mov	r2, r1
 8006282:	eb42 0303 	adc.w	r3, r2, r3
 8006286:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	663b      	str	r3, [r7, #96]	; 0x60
 8006292:	667a      	str	r2, [r7, #100]	; 0x64
 8006294:	f04f 0200 	mov.w	r2, #0
 8006298:	f04f 0300 	mov.w	r3, #0
 800629c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80062a0:	4649      	mov	r1, r9
 80062a2:	008b      	lsls	r3, r1, #2
 80062a4:	4641      	mov	r1, r8
 80062a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062aa:	4641      	mov	r1, r8
 80062ac:	008a      	lsls	r2, r1, #2
 80062ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80062b2:	f7fa fbdb 	bl	8000a6c <__aeabi_uldivmod>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4b0d      	ldr	r3, [pc, #52]	; (80062f0 <UART_SetConfig+0x4e4>)
 80062bc:	fba3 1302 	umull	r1, r3, r3, r2
 80062c0:	095b      	lsrs	r3, r3, #5
 80062c2:	2164      	movs	r1, #100	; 0x64
 80062c4:	fb01 f303 	mul.w	r3, r1, r3
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	3332      	adds	r3, #50	; 0x32
 80062ce:	4a08      	ldr	r2, [pc, #32]	; (80062f0 <UART_SetConfig+0x4e4>)
 80062d0:	fba2 2303 	umull	r2, r3, r2, r3
 80062d4:	095b      	lsrs	r3, r3, #5
 80062d6:	f003 020f 	and.w	r2, r3, #15
 80062da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4422      	add	r2, r4
 80062e2:	609a      	str	r2, [r3, #8]
}
 80062e4:	bf00      	nop
 80062e6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80062ea:	46bd      	mov	sp, r7
 80062ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062f0:	51eb851f 	.word	0x51eb851f

080062f4 <sniprintf>:
 80062f4:	b40c      	push	{r2, r3}
 80062f6:	b530      	push	{r4, r5, lr}
 80062f8:	4b17      	ldr	r3, [pc, #92]	; (8006358 <sniprintf+0x64>)
 80062fa:	1e0c      	subs	r4, r1, #0
 80062fc:	681d      	ldr	r5, [r3, #0]
 80062fe:	b09d      	sub	sp, #116	; 0x74
 8006300:	da08      	bge.n	8006314 <sniprintf+0x20>
 8006302:	238b      	movs	r3, #139	; 0x8b
 8006304:	602b      	str	r3, [r5, #0]
 8006306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800630a:	b01d      	add	sp, #116	; 0x74
 800630c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006310:	b002      	add	sp, #8
 8006312:	4770      	bx	lr
 8006314:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006318:	f8ad 3014 	strh.w	r3, [sp, #20]
 800631c:	bf14      	ite	ne
 800631e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006322:	4623      	moveq	r3, r4
 8006324:	9304      	str	r3, [sp, #16]
 8006326:	9307      	str	r3, [sp, #28]
 8006328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800632c:	9002      	str	r0, [sp, #8]
 800632e:	9006      	str	r0, [sp, #24]
 8006330:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006334:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006336:	ab21      	add	r3, sp, #132	; 0x84
 8006338:	a902      	add	r1, sp, #8
 800633a:	4628      	mov	r0, r5
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	f000 f993 	bl	8006668 <_svfiprintf_r>
 8006342:	1c43      	adds	r3, r0, #1
 8006344:	bfbc      	itt	lt
 8006346:	238b      	movlt	r3, #139	; 0x8b
 8006348:	602b      	strlt	r3, [r5, #0]
 800634a:	2c00      	cmp	r4, #0
 800634c:	d0dd      	beq.n	800630a <sniprintf+0x16>
 800634e:	9b02      	ldr	r3, [sp, #8]
 8006350:	2200      	movs	r2, #0
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	e7d9      	b.n	800630a <sniprintf+0x16>
 8006356:	bf00      	nop
 8006358:	2000009c 	.word	0x2000009c

0800635c <memset>:
 800635c:	4402      	add	r2, r0
 800635e:	4603      	mov	r3, r0
 8006360:	4293      	cmp	r3, r2
 8006362:	d100      	bne.n	8006366 <memset+0xa>
 8006364:	4770      	bx	lr
 8006366:	f803 1b01 	strb.w	r1, [r3], #1
 800636a:	e7f9      	b.n	8006360 <memset+0x4>

0800636c <__errno>:
 800636c:	4b01      	ldr	r3, [pc, #4]	; (8006374 <__errno+0x8>)
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	2000009c 	.word	0x2000009c

08006378 <__libc_init_array>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	4d0d      	ldr	r5, [pc, #52]	; (80063b0 <__libc_init_array+0x38>)
 800637c:	4c0d      	ldr	r4, [pc, #52]	; (80063b4 <__libc_init_array+0x3c>)
 800637e:	1b64      	subs	r4, r4, r5
 8006380:	10a4      	asrs	r4, r4, #2
 8006382:	2600      	movs	r6, #0
 8006384:	42a6      	cmp	r6, r4
 8006386:	d109      	bne.n	800639c <__libc_init_array+0x24>
 8006388:	4d0b      	ldr	r5, [pc, #44]	; (80063b8 <__libc_init_array+0x40>)
 800638a:	4c0c      	ldr	r4, [pc, #48]	; (80063bc <__libc_init_array+0x44>)
 800638c:	f000 fc6a 	bl	8006c64 <_init>
 8006390:	1b64      	subs	r4, r4, r5
 8006392:	10a4      	asrs	r4, r4, #2
 8006394:	2600      	movs	r6, #0
 8006396:	42a6      	cmp	r6, r4
 8006398:	d105      	bne.n	80063a6 <__libc_init_array+0x2e>
 800639a:	bd70      	pop	{r4, r5, r6, pc}
 800639c:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a0:	4798      	blx	r3
 80063a2:	3601      	adds	r6, #1
 80063a4:	e7ee      	b.n	8006384 <__libc_init_array+0xc>
 80063a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063aa:	4798      	blx	r3
 80063ac:	3601      	adds	r6, #1
 80063ae:	e7f2      	b.n	8006396 <__libc_init_array+0x1e>
 80063b0:	080088b0 	.word	0x080088b0
 80063b4:	080088b0 	.word	0x080088b0
 80063b8:	080088b0 	.word	0x080088b0
 80063bc:	080088b4 	.word	0x080088b4

080063c0 <__retarget_lock_acquire_recursive>:
 80063c0:	4770      	bx	lr

080063c2 <__retarget_lock_release_recursive>:
 80063c2:	4770      	bx	lr

080063c4 <_free_r>:
 80063c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063c6:	2900      	cmp	r1, #0
 80063c8:	d044      	beq.n	8006454 <_free_r+0x90>
 80063ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ce:	9001      	str	r0, [sp, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f1a1 0404 	sub.w	r4, r1, #4
 80063d6:	bfb8      	it	lt
 80063d8:	18e4      	addlt	r4, r4, r3
 80063da:	f000 f8df 	bl	800659c <__malloc_lock>
 80063de:	4a1e      	ldr	r2, [pc, #120]	; (8006458 <_free_r+0x94>)
 80063e0:	9801      	ldr	r0, [sp, #4]
 80063e2:	6813      	ldr	r3, [r2, #0]
 80063e4:	b933      	cbnz	r3, 80063f4 <_free_r+0x30>
 80063e6:	6063      	str	r3, [r4, #4]
 80063e8:	6014      	str	r4, [r2, #0]
 80063ea:	b003      	add	sp, #12
 80063ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063f0:	f000 b8da 	b.w	80065a8 <__malloc_unlock>
 80063f4:	42a3      	cmp	r3, r4
 80063f6:	d908      	bls.n	800640a <_free_r+0x46>
 80063f8:	6825      	ldr	r5, [r4, #0]
 80063fa:	1961      	adds	r1, r4, r5
 80063fc:	428b      	cmp	r3, r1
 80063fe:	bf01      	itttt	eq
 8006400:	6819      	ldreq	r1, [r3, #0]
 8006402:	685b      	ldreq	r3, [r3, #4]
 8006404:	1949      	addeq	r1, r1, r5
 8006406:	6021      	streq	r1, [r4, #0]
 8006408:	e7ed      	b.n	80063e6 <_free_r+0x22>
 800640a:	461a      	mov	r2, r3
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	b10b      	cbz	r3, 8006414 <_free_r+0x50>
 8006410:	42a3      	cmp	r3, r4
 8006412:	d9fa      	bls.n	800640a <_free_r+0x46>
 8006414:	6811      	ldr	r1, [r2, #0]
 8006416:	1855      	adds	r5, r2, r1
 8006418:	42a5      	cmp	r5, r4
 800641a:	d10b      	bne.n	8006434 <_free_r+0x70>
 800641c:	6824      	ldr	r4, [r4, #0]
 800641e:	4421      	add	r1, r4
 8006420:	1854      	adds	r4, r2, r1
 8006422:	42a3      	cmp	r3, r4
 8006424:	6011      	str	r1, [r2, #0]
 8006426:	d1e0      	bne.n	80063ea <_free_r+0x26>
 8006428:	681c      	ldr	r4, [r3, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	6053      	str	r3, [r2, #4]
 800642e:	440c      	add	r4, r1
 8006430:	6014      	str	r4, [r2, #0]
 8006432:	e7da      	b.n	80063ea <_free_r+0x26>
 8006434:	d902      	bls.n	800643c <_free_r+0x78>
 8006436:	230c      	movs	r3, #12
 8006438:	6003      	str	r3, [r0, #0]
 800643a:	e7d6      	b.n	80063ea <_free_r+0x26>
 800643c:	6825      	ldr	r5, [r4, #0]
 800643e:	1961      	adds	r1, r4, r5
 8006440:	428b      	cmp	r3, r1
 8006442:	bf04      	itt	eq
 8006444:	6819      	ldreq	r1, [r3, #0]
 8006446:	685b      	ldreq	r3, [r3, #4]
 8006448:	6063      	str	r3, [r4, #4]
 800644a:	bf04      	itt	eq
 800644c:	1949      	addeq	r1, r1, r5
 800644e:	6021      	streq	r1, [r4, #0]
 8006450:	6054      	str	r4, [r2, #4]
 8006452:	e7ca      	b.n	80063ea <_free_r+0x26>
 8006454:	b003      	add	sp, #12
 8006456:	bd30      	pop	{r4, r5, pc}
 8006458:	200007e0 	.word	0x200007e0

0800645c <sbrk_aligned>:
 800645c:	b570      	push	{r4, r5, r6, lr}
 800645e:	4e0e      	ldr	r6, [pc, #56]	; (8006498 <sbrk_aligned+0x3c>)
 8006460:	460c      	mov	r4, r1
 8006462:	6831      	ldr	r1, [r6, #0]
 8006464:	4605      	mov	r5, r0
 8006466:	b911      	cbnz	r1, 800646e <sbrk_aligned+0x12>
 8006468:	f000 fba6 	bl	8006bb8 <_sbrk_r>
 800646c:	6030      	str	r0, [r6, #0]
 800646e:	4621      	mov	r1, r4
 8006470:	4628      	mov	r0, r5
 8006472:	f000 fba1 	bl	8006bb8 <_sbrk_r>
 8006476:	1c43      	adds	r3, r0, #1
 8006478:	d00a      	beq.n	8006490 <sbrk_aligned+0x34>
 800647a:	1cc4      	adds	r4, r0, #3
 800647c:	f024 0403 	bic.w	r4, r4, #3
 8006480:	42a0      	cmp	r0, r4
 8006482:	d007      	beq.n	8006494 <sbrk_aligned+0x38>
 8006484:	1a21      	subs	r1, r4, r0
 8006486:	4628      	mov	r0, r5
 8006488:	f000 fb96 	bl	8006bb8 <_sbrk_r>
 800648c:	3001      	adds	r0, #1
 800648e:	d101      	bne.n	8006494 <sbrk_aligned+0x38>
 8006490:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006494:	4620      	mov	r0, r4
 8006496:	bd70      	pop	{r4, r5, r6, pc}
 8006498:	200007e4 	.word	0x200007e4

0800649c <_malloc_r>:
 800649c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064a0:	1ccd      	adds	r5, r1, #3
 80064a2:	f025 0503 	bic.w	r5, r5, #3
 80064a6:	3508      	adds	r5, #8
 80064a8:	2d0c      	cmp	r5, #12
 80064aa:	bf38      	it	cc
 80064ac:	250c      	movcc	r5, #12
 80064ae:	2d00      	cmp	r5, #0
 80064b0:	4607      	mov	r7, r0
 80064b2:	db01      	blt.n	80064b8 <_malloc_r+0x1c>
 80064b4:	42a9      	cmp	r1, r5
 80064b6:	d905      	bls.n	80064c4 <_malloc_r+0x28>
 80064b8:	230c      	movs	r3, #12
 80064ba:	603b      	str	r3, [r7, #0]
 80064bc:	2600      	movs	r6, #0
 80064be:	4630      	mov	r0, r6
 80064c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006598 <_malloc_r+0xfc>
 80064c8:	f000 f868 	bl	800659c <__malloc_lock>
 80064cc:	f8d8 3000 	ldr.w	r3, [r8]
 80064d0:	461c      	mov	r4, r3
 80064d2:	bb5c      	cbnz	r4, 800652c <_malloc_r+0x90>
 80064d4:	4629      	mov	r1, r5
 80064d6:	4638      	mov	r0, r7
 80064d8:	f7ff ffc0 	bl	800645c <sbrk_aligned>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	4604      	mov	r4, r0
 80064e0:	d155      	bne.n	800658e <_malloc_r+0xf2>
 80064e2:	f8d8 4000 	ldr.w	r4, [r8]
 80064e6:	4626      	mov	r6, r4
 80064e8:	2e00      	cmp	r6, #0
 80064ea:	d145      	bne.n	8006578 <_malloc_r+0xdc>
 80064ec:	2c00      	cmp	r4, #0
 80064ee:	d048      	beq.n	8006582 <_malloc_r+0xe6>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	4631      	mov	r1, r6
 80064f4:	4638      	mov	r0, r7
 80064f6:	eb04 0903 	add.w	r9, r4, r3
 80064fa:	f000 fb5d 	bl	8006bb8 <_sbrk_r>
 80064fe:	4581      	cmp	r9, r0
 8006500:	d13f      	bne.n	8006582 <_malloc_r+0xe6>
 8006502:	6821      	ldr	r1, [r4, #0]
 8006504:	1a6d      	subs	r5, r5, r1
 8006506:	4629      	mov	r1, r5
 8006508:	4638      	mov	r0, r7
 800650a:	f7ff ffa7 	bl	800645c <sbrk_aligned>
 800650e:	3001      	adds	r0, #1
 8006510:	d037      	beq.n	8006582 <_malloc_r+0xe6>
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	442b      	add	r3, r5
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	f8d8 3000 	ldr.w	r3, [r8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d038      	beq.n	8006592 <_malloc_r+0xf6>
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	42a2      	cmp	r2, r4
 8006524:	d12b      	bne.n	800657e <_malloc_r+0xe2>
 8006526:	2200      	movs	r2, #0
 8006528:	605a      	str	r2, [r3, #4]
 800652a:	e00f      	b.n	800654c <_malloc_r+0xb0>
 800652c:	6822      	ldr	r2, [r4, #0]
 800652e:	1b52      	subs	r2, r2, r5
 8006530:	d41f      	bmi.n	8006572 <_malloc_r+0xd6>
 8006532:	2a0b      	cmp	r2, #11
 8006534:	d917      	bls.n	8006566 <_malloc_r+0xca>
 8006536:	1961      	adds	r1, r4, r5
 8006538:	42a3      	cmp	r3, r4
 800653a:	6025      	str	r5, [r4, #0]
 800653c:	bf18      	it	ne
 800653e:	6059      	strne	r1, [r3, #4]
 8006540:	6863      	ldr	r3, [r4, #4]
 8006542:	bf08      	it	eq
 8006544:	f8c8 1000 	streq.w	r1, [r8]
 8006548:	5162      	str	r2, [r4, r5]
 800654a:	604b      	str	r3, [r1, #4]
 800654c:	4638      	mov	r0, r7
 800654e:	f104 060b 	add.w	r6, r4, #11
 8006552:	f000 f829 	bl	80065a8 <__malloc_unlock>
 8006556:	f026 0607 	bic.w	r6, r6, #7
 800655a:	1d23      	adds	r3, r4, #4
 800655c:	1af2      	subs	r2, r6, r3
 800655e:	d0ae      	beq.n	80064be <_malloc_r+0x22>
 8006560:	1b9b      	subs	r3, r3, r6
 8006562:	50a3      	str	r3, [r4, r2]
 8006564:	e7ab      	b.n	80064be <_malloc_r+0x22>
 8006566:	42a3      	cmp	r3, r4
 8006568:	6862      	ldr	r2, [r4, #4]
 800656a:	d1dd      	bne.n	8006528 <_malloc_r+0x8c>
 800656c:	f8c8 2000 	str.w	r2, [r8]
 8006570:	e7ec      	b.n	800654c <_malloc_r+0xb0>
 8006572:	4623      	mov	r3, r4
 8006574:	6864      	ldr	r4, [r4, #4]
 8006576:	e7ac      	b.n	80064d2 <_malloc_r+0x36>
 8006578:	4634      	mov	r4, r6
 800657a:	6876      	ldr	r6, [r6, #4]
 800657c:	e7b4      	b.n	80064e8 <_malloc_r+0x4c>
 800657e:	4613      	mov	r3, r2
 8006580:	e7cc      	b.n	800651c <_malloc_r+0x80>
 8006582:	230c      	movs	r3, #12
 8006584:	603b      	str	r3, [r7, #0]
 8006586:	4638      	mov	r0, r7
 8006588:	f000 f80e 	bl	80065a8 <__malloc_unlock>
 800658c:	e797      	b.n	80064be <_malloc_r+0x22>
 800658e:	6025      	str	r5, [r4, #0]
 8006590:	e7dc      	b.n	800654c <_malloc_r+0xb0>
 8006592:	605b      	str	r3, [r3, #4]
 8006594:	deff      	udf	#255	; 0xff
 8006596:	bf00      	nop
 8006598:	200007e0 	.word	0x200007e0

0800659c <__malloc_lock>:
 800659c:	4801      	ldr	r0, [pc, #4]	; (80065a4 <__malloc_lock+0x8>)
 800659e:	f7ff bf0f 	b.w	80063c0 <__retarget_lock_acquire_recursive>
 80065a2:	bf00      	nop
 80065a4:	200007dc 	.word	0x200007dc

080065a8 <__malloc_unlock>:
 80065a8:	4801      	ldr	r0, [pc, #4]	; (80065b0 <__malloc_unlock+0x8>)
 80065aa:	f7ff bf0a 	b.w	80063c2 <__retarget_lock_release_recursive>
 80065ae:	bf00      	nop
 80065b0:	200007dc 	.word	0x200007dc

080065b4 <__ssputs_r>:
 80065b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b8:	688e      	ldr	r6, [r1, #8]
 80065ba:	461f      	mov	r7, r3
 80065bc:	42be      	cmp	r6, r7
 80065be:	680b      	ldr	r3, [r1, #0]
 80065c0:	4682      	mov	sl, r0
 80065c2:	460c      	mov	r4, r1
 80065c4:	4690      	mov	r8, r2
 80065c6:	d82c      	bhi.n	8006622 <__ssputs_r+0x6e>
 80065c8:	898a      	ldrh	r2, [r1, #12]
 80065ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065ce:	d026      	beq.n	800661e <__ssputs_r+0x6a>
 80065d0:	6965      	ldr	r5, [r4, #20]
 80065d2:	6909      	ldr	r1, [r1, #16]
 80065d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065d8:	eba3 0901 	sub.w	r9, r3, r1
 80065dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065e0:	1c7b      	adds	r3, r7, #1
 80065e2:	444b      	add	r3, r9
 80065e4:	106d      	asrs	r5, r5, #1
 80065e6:	429d      	cmp	r5, r3
 80065e8:	bf38      	it	cc
 80065ea:	461d      	movcc	r5, r3
 80065ec:	0553      	lsls	r3, r2, #21
 80065ee:	d527      	bpl.n	8006640 <__ssputs_r+0x8c>
 80065f0:	4629      	mov	r1, r5
 80065f2:	f7ff ff53 	bl	800649c <_malloc_r>
 80065f6:	4606      	mov	r6, r0
 80065f8:	b360      	cbz	r0, 8006654 <__ssputs_r+0xa0>
 80065fa:	6921      	ldr	r1, [r4, #16]
 80065fc:	464a      	mov	r2, r9
 80065fe:	f000 faeb 	bl	8006bd8 <memcpy>
 8006602:	89a3      	ldrh	r3, [r4, #12]
 8006604:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800660c:	81a3      	strh	r3, [r4, #12]
 800660e:	6126      	str	r6, [r4, #16]
 8006610:	6165      	str	r5, [r4, #20]
 8006612:	444e      	add	r6, r9
 8006614:	eba5 0509 	sub.w	r5, r5, r9
 8006618:	6026      	str	r6, [r4, #0]
 800661a:	60a5      	str	r5, [r4, #8]
 800661c:	463e      	mov	r6, r7
 800661e:	42be      	cmp	r6, r7
 8006620:	d900      	bls.n	8006624 <__ssputs_r+0x70>
 8006622:	463e      	mov	r6, r7
 8006624:	6820      	ldr	r0, [r4, #0]
 8006626:	4632      	mov	r2, r6
 8006628:	4641      	mov	r1, r8
 800662a:	f000 faab 	bl	8006b84 <memmove>
 800662e:	68a3      	ldr	r3, [r4, #8]
 8006630:	1b9b      	subs	r3, r3, r6
 8006632:	60a3      	str	r3, [r4, #8]
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	4433      	add	r3, r6
 8006638:	6023      	str	r3, [r4, #0]
 800663a:	2000      	movs	r0, #0
 800663c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006640:	462a      	mov	r2, r5
 8006642:	f000 fad7 	bl	8006bf4 <_realloc_r>
 8006646:	4606      	mov	r6, r0
 8006648:	2800      	cmp	r0, #0
 800664a:	d1e0      	bne.n	800660e <__ssputs_r+0x5a>
 800664c:	6921      	ldr	r1, [r4, #16]
 800664e:	4650      	mov	r0, sl
 8006650:	f7ff feb8 	bl	80063c4 <_free_r>
 8006654:	230c      	movs	r3, #12
 8006656:	f8ca 3000 	str.w	r3, [sl]
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006660:	81a3      	strh	r3, [r4, #12]
 8006662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006666:	e7e9      	b.n	800663c <__ssputs_r+0x88>

08006668 <_svfiprintf_r>:
 8006668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666c:	4698      	mov	r8, r3
 800666e:	898b      	ldrh	r3, [r1, #12]
 8006670:	061b      	lsls	r3, r3, #24
 8006672:	b09d      	sub	sp, #116	; 0x74
 8006674:	4607      	mov	r7, r0
 8006676:	460d      	mov	r5, r1
 8006678:	4614      	mov	r4, r2
 800667a:	d50e      	bpl.n	800669a <_svfiprintf_r+0x32>
 800667c:	690b      	ldr	r3, [r1, #16]
 800667e:	b963      	cbnz	r3, 800669a <_svfiprintf_r+0x32>
 8006680:	2140      	movs	r1, #64	; 0x40
 8006682:	f7ff ff0b 	bl	800649c <_malloc_r>
 8006686:	6028      	str	r0, [r5, #0]
 8006688:	6128      	str	r0, [r5, #16]
 800668a:	b920      	cbnz	r0, 8006696 <_svfiprintf_r+0x2e>
 800668c:	230c      	movs	r3, #12
 800668e:	603b      	str	r3, [r7, #0]
 8006690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006694:	e0d0      	b.n	8006838 <_svfiprintf_r+0x1d0>
 8006696:	2340      	movs	r3, #64	; 0x40
 8006698:	616b      	str	r3, [r5, #20]
 800669a:	2300      	movs	r3, #0
 800669c:	9309      	str	r3, [sp, #36]	; 0x24
 800669e:	2320      	movs	r3, #32
 80066a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80066a8:	2330      	movs	r3, #48	; 0x30
 80066aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006850 <_svfiprintf_r+0x1e8>
 80066ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066b2:	f04f 0901 	mov.w	r9, #1
 80066b6:	4623      	mov	r3, r4
 80066b8:	469a      	mov	sl, r3
 80066ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066be:	b10a      	cbz	r2, 80066c4 <_svfiprintf_r+0x5c>
 80066c0:	2a25      	cmp	r2, #37	; 0x25
 80066c2:	d1f9      	bne.n	80066b8 <_svfiprintf_r+0x50>
 80066c4:	ebba 0b04 	subs.w	fp, sl, r4
 80066c8:	d00b      	beq.n	80066e2 <_svfiprintf_r+0x7a>
 80066ca:	465b      	mov	r3, fp
 80066cc:	4622      	mov	r2, r4
 80066ce:	4629      	mov	r1, r5
 80066d0:	4638      	mov	r0, r7
 80066d2:	f7ff ff6f 	bl	80065b4 <__ssputs_r>
 80066d6:	3001      	adds	r0, #1
 80066d8:	f000 80a9 	beq.w	800682e <_svfiprintf_r+0x1c6>
 80066dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066de:	445a      	add	r2, fp
 80066e0:	9209      	str	r2, [sp, #36]	; 0x24
 80066e2:	f89a 3000 	ldrb.w	r3, [sl]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 80a1 	beq.w	800682e <_svfiprintf_r+0x1c6>
 80066ec:	2300      	movs	r3, #0
 80066ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066f6:	f10a 0a01 	add.w	sl, sl, #1
 80066fa:	9304      	str	r3, [sp, #16]
 80066fc:	9307      	str	r3, [sp, #28]
 80066fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006702:	931a      	str	r3, [sp, #104]	; 0x68
 8006704:	4654      	mov	r4, sl
 8006706:	2205      	movs	r2, #5
 8006708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800670c:	4850      	ldr	r0, [pc, #320]	; (8006850 <_svfiprintf_r+0x1e8>)
 800670e:	f7f9 fd67 	bl	80001e0 <memchr>
 8006712:	9a04      	ldr	r2, [sp, #16]
 8006714:	b9d8      	cbnz	r0, 800674e <_svfiprintf_r+0xe6>
 8006716:	06d0      	lsls	r0, r2, #27
 8006718:	bf44      	itt	mi
 800671a:	2320      	movmi	r3, #32
 800671c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006720:	0711      	lsls	r1, r2, #28
 8006722:	bf44      	itt	mi
 8006724:	232b      	movmi	r3, #43	; 0x2b
 8006726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800672a:	f89a 3000 	ldrb.w	r3, [sl]
 800672e:	2b2a      	cmp	r3, #42	; 0x2a
 8006730:	d015      	beq.n	800675e <_svfiprintf_r+0xf6>
 8006732:	9a07      	ldr	r2, [sp, #28]
 8006734:	4654      	mov	r4, sl
 8006736:	2000      	movs	r0, #0
 8006738:	f04f 0c0a 	mov.w	ip, #10
 800673c:	4621      	mov	r1, r4
 800673e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006742:	3b30      	subs	r3, #48	; 0x30
 8006744:	2b09      	cmp	r3, #9
 8006746:	d94d      	bls.n	80067e4 <_svfiprintf_r+0x17c>
 8006748:	b1b0      	cbz	r0, 8006778 <_svfiprintf_r+0x110>
 800674a:	9207      	str	r2, [sp, #28]
 800674c:	e014      	b.n	8006778 <_svfiprintf_r+0x110>
 800674e:	eba0 0308 	sub.w	r3, r0, r8
 8006752:	fa09 f303 	lsl.w	r3, r9, r3
 8006756:	4313      	orrs	r3, r2
 8006758:	9304      	str	r3, [sp, #16]
 800675a:	46a2      	mov	sl, r4
 800675c:	e7d2      	b.n	8006704 <_svfiprintf_r+0x9c>
 800675e:	9b03      	ldr	r3, [sp, #12]
 8006760:	1d19      	adds	r1, r3, #4
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	9103      	str	r1, [sp, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	bfbb      	ittet	lt
 800676a:	425b      	neglt	r3, r3
 800676c:	f042 0202 	orrlt.w	r2, r2, #2
 8006770:	9307      	strge	r3, [sp, #28]
 8006772:	9307      	strlt	r3, [sp, #28]
 8006774:	bfb8      	it	lt
 8006776:	9204      	strlt	r2, [sp, #16]
 8006778:	7823      	ldrb	r3, [r4, #0]
 800677a:	2b2e      	cmp	r3, #46	; 0x2e
 800677c:	d10c      	bne.n	8006798 <_svfiprintf_r+0x130>
 800677e:	7863      	ldrb	r3, [r4, #1]
 8006780:	2b2a      	cmp	r3, #42	; 0x2a
 8006782:	d134      	bne.n	80067ee <_svfiprintf_r+0x186>
 8006784:	9b03      	ldr	r3, [sp, #12]
 8006786:	1d1a      	adds	r2, r3, #4
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	9203      	str	r2, [sp, #12]
 800678c:	2b00      	cmp	r3, #0
 800678e:	bfb8      	it	lt
 8006790:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006794:	3402      	adds	r4, #2
 8006796:	9305      	str	r3, [sp, #20]
 8006798:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006860 <_svfiprintf_r+0x1f8>
 800679c:	7821      	ldrb	r1, [r4, #0]
 800679e:	2203      	movs	r2, #3
 80067a0:	4650      	mov	r0, sl
 80067a2:	f7f9 fd1d 	bl	80001e0 <memchr>
 80067a6:	b138      	cbz	r0, 80067b8 <_svfiprintf_r+0x150>
 80067a8:	9b04      	ldr	r3, [sp, #16]
 80067aa:	eba0 000a 	sub.w	r0, r0, sl
 80067ae:	2240      	movs	r2, #64	; 0x40
 80067b0:	4082      	lsls	r2, r0
 80067b2:	4313      	orrs	r3, r2
 80067b4:	3401      	adds	r4, #1
 80067b6:	9304      	str	r3, [sp, #16]
 80067b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067bc:	4825      	ldr	r0, [pc, #148]	; (8006854 <_svfiprintf_r+0x1ec>)
 80067be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067c2:	2206      	movs	r2, #6
 80067c4:	f7f9 fd0c 	bl	80001e0 <memchr>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d038      	beq.n	800683e <_svfiprintf_r+0x1d6>
 80067cc:	4b22      	ldr	r3, [pc, #136]	; (8006858 <_svfiprintf_r+0x1f0>)
 80067ce:	bb1b      	cbnz	r3, 8006818 <_svfiprintf_r+0x1b0>
 80067d0:	9b03      	ldr	r3, [sp, #12]
 80067d2:	3307      	adds	r3, #7
 80067d4:	f023 0307 	bic.w	r3, r3, #7
 80067d8:	3308      	adds	r3, #8
 80067da:	9303      	str	r3, [sp, #12]
 80067dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067de:	4433      	add	r3, r6
 80067e0:	9309      	str	r3, [sp, #36]	; 0x24
 80067e2:	e768      	b.n	80066b6 <_svfiprintf_r+0x4e>
 80067e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80067e8:	460c      	mov	r4, r1
 80067ea:	2001      	movs	r0, #1
 80067ec:	e7a6      	b.n	800673c <_svfiprintf_r+0xd4>
 80067ee:	2300      	movs	r3, #0
 80067f0:	3401      	adds	r4, #1
 80067f2:	9305      	str	r3, [sp, #20]
 80067f4:	4619      	mov	r1, r3
 80067f6:	f04f 0c0a 	mov.w	ip, #10
 80067fa:	4620      	mov	r0, r4
 80067fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006800:	3a30      	subs	r2, #48	; 0x30
 8006802:	2a09      	cmp	r2, #9
 8006804:	d903      	bls.n	800680e <_svfiprintf_r+0x1a6>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0c6      	beq.n	8006798 <_svfiprintf_r+0x130>
 800680a:	9105      	str	r1, [sp, #20]
 800680c:	e7c4      	b.n	8006798 <_svfiprintf_r+0x130>
 800680e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006812:	4604      	mov	r4, r0
 8006814:	2301      	movs	r3, #1
 8006816:	e7f0      	b.n	80067fa <_svfiprintf_r+0x192>
 8006818:	ab03      	add	r3, sp, #12
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	462a      	mov	r2, r5
 800681e:	4b0f      	ldr	r3, [pc, #60]	; (800685c <_svfiprintf_r+0x1f4>)
 8006820:	a904      	add	r1, sp, #16
 8006822:	4638      	mov	r0, r7
 8006824:	f3af 8000 	nop.w
 8006828:	1c42      	adds	r2, r0, #1
 800682a:	4606      	mov	r6, r0
 800682c:	d1d6      	bne.n	80067dc <_svfiprintf_r+0x174>
 800682e:	89ab      	ldrh	r3, [r5, #12]
 8006830:	065b      	lsls	r3, r3, #25
 8006832:	f53f af2d 	bmi.w	8006690 <_svfiprintf_r+0x28>
 8006836:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006838:	b01d      	add	sp, #116	; 0x74
 800683a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683e:	ab03      	add	r3, sp, #12
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	462a      	mov	r2, r5
 8006844:	4b05      	ldr	r3, [pc, #20]	; (800685c <_svfiprintf_r+0x1f4>)
 8006846:	a904      	add	r1, sp, #16
 8006848:	4638      	mov	r0, r7
 800684a:	f000 f879 	bl	8006940 <_printf_i>
 800684e:	e7eb      	b.n	8006828 <_svfiprintf_r+0x1c0>
 8006850:	08008874 	.word	0x08008874
 8006854:	0800887e 	.word	0x0800887e
 8006858:	00000000 	.word	0x00000000
 800685c:	080065b5 	.word	0x080065b5
 8006860:	0800887a 	.word	0x0800887a

08006864 <_printf_common>:
 8006864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006868:	4616      	mov	r6, r2
 800686a:	4699      	mov	r9, r3
 800686c:	688a      	ldr	r2, [r1, #8]
 800686e:	690b      	ldr	r3, [r1, #16]
 8006870:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006874:	4293      	cmp	r3, r2
 8006876:	bfb8      	it	lt
 8006878:	4613      	movlt	r3, r2
 800687a:	6033      	str	r3, [r6, #0]
 800687c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006880:	4607      	mov	r7, r0
 8006882:	460c      	mov	r4, r1
 8006884:	b10a      	cbz	r2, 800688a <_printf_common+0x26>
 8006886:	3301      	adds	r3, #1
 8006888:	6033      	str	r3, [r6, #0]
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	0699      	lsls	r1, r3, #26
 800688e:	bf42      	ittt	mi
 8006890:	6833      	ldrmi	r3, [r6, #0]
 8006892:	3302      	addmi	r3, #2
 8006894:	6033      	strmi	r3, [r6, #0]
 8006896:	6825      	ldr	r5, [r4, #0]
 8006898:	f015 0506 	ands.w	r5, r5, #6
 800689c:	d106      	bne.n	80068ac <_printf_common+0x48>
 800689e:	f104 0a19 	add.w	sl, r4, #25
 80068a2:	68e3      	ldr	r3, [r4, #12]
 80068a4:	6832      	ldr	r2, [r6, #0]
 80068a6:	1a9b      	subs	r3, r3, r2
 80068a8:	42ab      	cmp	r3, r5
 80068aa:	dc26      	bgt.n	80068fa <_printf_common+0x96>
 80068ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068b0:	1e13      	subs	r3, r2, #0
 80068b2:	6822      	ldr	r2, [r4, #0]
 80068b4:	bf18      	it	ne
 80068b6:	2301      	movne	r3, #1
 80068b8:	0692      	lsls	r2, r2, #26
 80068ba:	d42b      	bmi.n	8006914 <_printf_common+0xb0>
 80068bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068c0:	4649      	mov	r1, r9
 80068c2:	4638      	mov	r0, r7
 80068c4:	47c0      	blx	r8
 80068c6:	3001      	adds	r0, #1
 80068c8:	d01e      	beq.n	8006908 <_printf_common+0xa4>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	6922      	ldr	r2, [r4, #16]
 80068ce:	f003 0306 	and.w	r3, r3, #6
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	bf02      	ittt	eq
 80068d6:	68e5      	ldreq	r5, [r4, #12]
 80068d8:	6833      	ldreq	r3, [r6, #0]
 80068da:	1aed      	subeq	r5, r5, r3
 80068dc:	68a3      	ldr	r3, [r4, #8]
 80068de:	bf0c      	ite	eq
 80068e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068e4:	2500      	movne	r5, #0
 80068e6:	4293      	cmp	r3, r2
 80068e8:	bfc4      	itt	gt
 80068ea:	1a9b      	subgt	r3, r3, r2
 80068ec:	18ed      	addgt	r5, r5, r3
 80068ee:	2600      	movs	r6, #0
 80068f0:	341a      	adds	r4, #26
 80068f2:	42b5      	cmp	r5, r6
 80068f4:	d11a      	bne.n	800692c <_printf_common+0xc8>
 80068f6:	2000      	movs	r0, #0
 80068f8:	e008      	b.n	800690c <_printf_common+0xa8>
 80068fa:	2301      	movs	r3, #1
 80068fc:	4652      	mov	r2, sl
 80068fe:	4649      	mov	r1, r9
 8006900:	4638      	mov	r0, r7
 8006902:	47c0      	blx	r8
 8006904:	3001      	adds	r0, #1
 8006906:	d103      	bne.n	8006910 <_printf_common+0xac>
 8006908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800690c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006910:	3501      	adds	r5, #1
 8006912:	e7c6      	b.n	80068a2 <_printf_common+0x3e>
 8006914:	18e1      	adds	r1, r4, r3
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	2030      	movs	r0, #48	; 0x30
 800691a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800691e:	4422      	add	r2, r4
 8006920:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006924:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006928:	3302      	adds	r3, #2
 800692a:	e7c7      	b.n	80068bc <_printf_common+0x58>
 800692c:	2301      	movs	r3, #1
 800692e:	4622      	mov	r2, r4
 8006930:	4649      	mov	r1, r9
 8006932:	4638      	mov	r0, r7
 8006934:	47c0      	blx	r8
 8006936:	3001      	adds	r0, #1
 8006938:	d0e6      	beq.n	8006908 <_printf_common+0xa4>
 800693a:	3601      	adds	r6, #1
 800693c:	e7d9      	b.n	80068f2 <_printf_common+0x8e>
	...

08006940 <_printf_i>:
 8006940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006944:	7e0f      	ldrb	r7, [r1, #24]
 8006946:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006948:	2f78      	cmp	r7, #120	; 0x78
 800694a:	4691      	mov	r9, r2
 800694c:	4680      	mov	r8, r0
 800694e:	460c      	mov	r4, r1
 8006950:	469a      	mov	sl, r3
 8006952:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006956:	d807      	bhi.n	8006968 <_printf_i+0x28>
 8006958:	2f62      	cmp	r7, #98	; 0x62
 800695a:	d80a      	bhi.n	8006972 <_printf_i+0x32>
 800695c:	2f00      	cmp	r7, #0
 800695e:	f000 80d4 	beq.w	8006b0a <_printf_i+0x1ca>
 8006962:	2f58      	cmp	r7, #88	; 0x58
 8006964:	f000 80c0 	beq.w	8006ae8 <_printf_i+0x1a8>
 8006968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800696c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006970:	e03a      	b.n	80069e8 <_printf_i+0xa8>
 8006972:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006976:	2b15      	cmp	r3, #21
 8006978:	d8f6      	bhi.n	8006968 <_printf_i+0x28>
 800697a:	a101      	add	r1, pc, #4	; (adr r1, 8006980 <_printf_i+0x40>)
 800697c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006980:	080069d9 	.word	0x080069d9
 8006984:	080069ed 	.word	0x080069ed
 8006988:	08006969 	.word	0x08006969
 800698c:	08006969 	.word	0x08006969
 8006990:	08006969 	.word	0x08006969
 8006994:	08006969 	.word	0x08006969
 8006998:	080069ed 	.word	0x080069ed
 800699c:	08006969 	.word	0x08006969
 80069a0:	08006969 	.word	0x08006969
 80069a4:	08006969 	.word	0x08006969
 80069a8:	08006969 	.word	0x08006969
 80069ac:	08006af1 	.word	0x08006af1
 80069b0:	08006a19 	.word	0x08006a19
 80069b4:	08006aab 	.word	0x08006aab
 80069b8:	08006969 	.word	0x08006969
 80069bc:	08006969 	.word	0x08006969
 80069c0:	08006b13 	.word	0x08006b13
 80069c4:	08006969 	.word	0x08006969
 80069c8:	08006a19 	.word	0x08006a19
 80069cc:	08006969 	.word	0x08006969
 80069d0:	08006969 	.word	0x08006969
 80069d4:	08006ab3 	.word	0x08006ab3
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	1d1a      	adds	r2, r3, #4
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	602a      	str	r2, [r5, #0]
 80069e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069e8:	2301      	movs	r3, #1
 80069ea:	e09f      	b.n	8006b2c <_printf_i+0x1ec>
 80069ec:	6820      	ldr	r0, [r4, #0]
 80069ee:	682b      	ldr	r3, [r5, #0]
 80069f0:	0607      	lsls	r7, r0, #24
 80069f2:	f103 0104 	add.w	r1, r3, #4
 80069f6:	6029      	str	r1, [r5, #0]
 80069f8:	d501      	bpl.n	80069fe <_printf_i+0xbe>
 80069fa:	681e      	ldr	r6, [r3, #0]
 80069fc:	e003      	b.n	8006a06 <_printf_i+0xc6>
 80069fe:	0646      	lsls	r6, r0, #25
 8006a00:	d5fb      	bpl.n	80069fa <_printf_i+0xba>
 8006a02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a06:	2e00      	cmp	r6, #0
 8006a08:	da03      	bge.n	8006a12 <_printf_i+0xd2>
 8006a0a:	232d      	movs	r3, #45	; 0x2d
 8006a0c:	4276      	negs	r6, r6
 8006a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a12:	485a      	ldr	r0, [pc, #360]	; (8006b7c <_printf_i+0x23c>)
 8006a14:	230a      	movs	r3, #10
 8006a16:	e012      	b.n	8006a3e <_printf_i+0xfe>
 8006a18:	682b      	ldr	r3, [r5, #0]
 8006a1a:	6820      	ldr	r0, [r4, #0]
 8006a1c:	1d19      	adds	r1, r3, #4
 8006a1e:	6029      	str	r1, [r5, #0]
 8006a20:	0605      	lsls	r5, r0, #24
 8006a22:	d501      	bpl.n	8006a28 <_printf_i+0xe8>
 8006a24:	681e      	ldr	r6, [r3, #0]
 8006a26:	e002      	b.n	8006a2e <_printf_i+0xee>
 8006a28:	0641      	lsls	r1, r0, #25
 8006a2a:	d5fb      	bpl.n	8006a24 <_printf_i+0xe4>
 8006a2c:	881e      	ldrh	r6, [r3, #0]
 8006a2e:	4853      	ldr	r0, [pc, #332]	; (8006b7c <_printf_i+0x23c>)
 8006a30:	2f6f      	cmp	r7, #111	; 0x6f
 8006a32:	bf0c      	ite	eq
 8006a34:	2308      	moveq	r3, #8
 8006a36:	230a      	movne	r3, #10
 8006a38:	2100      	movs	r1, #0
 8006a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a3e:	6865      	ldr	r5, [r4, #4]
 8006a40:	60a5      	str	r5, [r4, #8]
 8006a42:	2d00      	cmp	r5, #0
 8006a44:	bfa2      	ittt	ge
 8006a46:	6821      	ldrge	r1, [r4, #0]
 8006a48:	f021 0104 	bicge.w	r1, r1, #4
 8006a4c:	6021      	strge	r1, [r4, #0]
 8006a4e:	b90e      	cbnz	r6, 8006a54 <_printf_i+0x114>
 8006a50:	2d00      	cmp	r5, #0
 8006a52:	d04b      	beq.n	8006aec <_printf_i+0x1ac>
 8006a54:	4615      	mov	r5, r2
 8006a56:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a5a:	fb03 6711 	mls	r7, r3, r1, r6
 8006a5e:	5dc7      	ldrb	r7, [r0, r7]
 8006a60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a64:	4637      	mov	r7, r6
 8006a66:	42bb      	cmp	r3, r7
 8006a68:	460e      	mov	r6, r1
 8006a6a:	d9f4      	bls.n	8006a56 <_printf_i+0x116>
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d10b      	bne.n	8006a88 <_printf_i+0x148>
 8006a70:	6823      	ldr	r3, [r4, #0]
 8006a72:	07de      	lsls	r6, r3, #31
 8006a74:	d508      	bpl.n	8006a88 <_printf_i+0x148>
 8006a76:	6923      	ldr	r3, [r4, #16]
 8006a78:	6861      	ldr	r1, [r4, #4]
 8006a7a:	4299      	cmp	r1, r3
 8006a7c:	bfde      	ittt	le
 8006a7e:	2330      	movle	r3, #48	; 0x30
 8006a80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a84:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006a88:	1b52      	subs	r2, r2, r5
 8006a8a:	6122      	str	r2, [r4, #16]
 8006a8c:	f8cd a000 	str.w	sl, [sp]
 8006a90:	464b      	mov	r3, r9
 8006a92:	aa03      	add	r2, sp, #12
 8006a94:	4621      	mov	r1, r4
 8006a96:	4640      	mov	r0, r8
 8006a98:	f7ff fee4 	bl	8006864 <_printf_common>
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	d14a      	bne.n	8006b36 <_printf_i+0x1f6>
 8006aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006aa4:	b004      	add	sp, #16
 8006aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	f043 0320 	orr.w	r3, r3, #32
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	4833      	ldr	r0, [pc, #204]	; (8006b80 <_printf_i+0x240>)
 8006ab4:	2778      	movs	r7, #120	; 0x78
 8006ab6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	6829      	ldr	r1, [r5, #0]
 8006abe:	061f      	lsls	r7, r3, #24
 8006ac0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ac4:	d402      	bmi.n	8006acc <_printf_i+0x18c>
 8006ac6:	065f      	lsls	r7, r3, #25
 8006ac8:	bf48      	it	mi
 8006aca:	b2b6      	uxthmi	r6, r6
 8006acc:	07df      	lsls	r7, r3, #31
 8006ace:	bf48      	it	mi
 8006ad0:	f043 0320 	orrmi.w	r3, r3, #32
 8006ad4:	6029      	str	r1, [r5, #0]
 8006ad6:	bf48      	it	mi
 8006ad8:	6023      	strmi	r3, [r4, #0]
 8006ada:	b91e      	cbnz	r6, 8006ae4 <_printf_i+0x1a4>
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	f023 0320 	bic.w	r3, r3, #32
 8006ae2:	6023      	str	r3, [r4, #0]
 8006ae4:	2310      	movs	r3, #16
 8006ae6:	e7a7      	b.n	8006a38 <_printf_i+0xf8>
 8006ae8:	4824      	ldr	r0, [pc, #144]	; (8006b7c <_printf_i+0x23c>)
 8006aea:	e7e4      	b.n	8006ab6 <_printf_i+0x176>
 8006aec:	4615      	mov	r5, r2
 8006aee:	e7bd      	b.n	8006a6c <_printf_i+0x12c>
 8006af0:	682b      	ldr	r3, [r5, #0]
 8006af2:	6826      	ldr	r6, [r4, #0]
 8006af4:	6961      	ldr	r1, [r4, #20]
 8006af6:	1d18      	adds	r0, r3, #4
 8006af8:	6028      	str	r0, [r5, #0]
 8006afa:	0635      	lsls	r5, r6, #24
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	d501      	bpl.n	8006b04 <_printf_i+0x1c4>
 8006b00:	6019      	str	r1, [r3, #0]
 8006b02:	e002      	b.n	8006b0a <_printf_i+0x1ca>
 8006b04:	0670      	lsls	r0, r6, #25
 8006b06:	d5fb      	bpl.n	8006b00 <_printf_i+0x1c0>
 8006b08:	8019      	strh	r1, [r3, #0]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	6123      	str	r3, [r4, #16]
 8006b0e:	4615      	mov	r5, r2
 8006b10:	e7bc      	b.n	8006a8c <_printf_i+0x14c>
 8006b12:	682b      	ldr	r3, [r5, #0]
 8006b14:	1d1a      	adds	r2, r3, #4
 8006b16:	602a      	str	r2, [r5, #0]
 8006b18:	681d      	ldr	r5, [r3, #0]
 8006b1a:	6862      	ldr	r2, [r4, #4]
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f7f9 fb5e 	bl	80001e0 <memchr>
 8006b24:	b108      	cbz	r0, 8006b2a <_printf_i+0x1ea>
 8006b26:	1b40      	subs	r0, r0, r5
 8006b28:	6060      	str	r0, [r4, #4]
 8006b2a:	6863      	ldr	r3, [r4, #4]
 8006b2c:	6123      	str	r3, [r4, #16]
 8006b2e:	2300      	movs	r3, #0
 8006b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b34:	e7aa      	b.n	8006a8c <_printf_i+0x14c>
 8006b36:	6923      	ldr	r3, [r4, #16]
 8006b38:	462a      	mov	r2, r5
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	4640      	mov	r0, r8
 8006b3e:	47d0      	blx	sl
 8006b40:	3001      	adds	r0, #1
 8006b42:	d0ad      	beq.n	8006aa0 <_printf_i+0x160>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	079b      	lsls	r3, r3, #30
 8006b48:	d413      	bmi.n	8006b72 <_printf_i+0x232>
 8006b4a:	68e0      	ldr	r0, [r4, #12]
 8006b4c:	9b03      	ldr	r3, [sp, #12]
 8006b4e:	4298      	cmp	r0, r3
 8006b50:	bfb8      	it	lt
 8006b52:	4618      	movlt	r0, r3
 8006b54:	e7a6      	b.n	8006aa4 <_printf_i+0x164>
 8006b56:	2301      	movs	r3, #1
 8006b58:	4632      	mov	r2, r6
 8006b5a:	4649      	mov	r1, r9
 8006b5c:	4640      	mov	r0, r8
 8006b5e:	47d0      	blx	sl
 8006b60:	3001      	adds	r0, #1
 8006b62:	d09d      	beq.n	8006aa0 <_printf_i+0x160>
 8006b64:	3501      	adds	r5, #1
 8006b66:	68e3      	ldr	r3, [r4, #12]
 8006b68:	9903      	ldr	r1, [sp, #12]
 8006b6a:	1a5b      	subs	r3, r3, r1
 8006b6c:	42ab      	cmp	r3, r5
 8006b6e:	dcf2      	bgt.n	8006b56 <_printf_i+0x216>
 8006b70:	e7eb      	b.n	8006b4a <_printf_i+0x20a>
 8006b72:	2500      	movs	r5, #0
 8006b74:	f104 0619 	add.w	r6, r4, #25
 8006b78:	e7f5      	b.n	8006b66 <_printf_i+0x226>
 8006b7a:	bf00      	nop
 8006b7c:	08008885 	.word	0x08008885
 8006b80:	08008896 	.word	0x08008896

08006b84 <memmove>:
 8006b84:	4288      	cmp	r0, r1
 8006b86:	b510      	push	{r4, lr}
 8006b88:	eb01 0402 	add.w	r4, r1, r2
 8006b8c:	d902      	bls.n	8006b94 <memmove+0x10>
 8006b8e:	4284      	cmp	r4, r0
 8006b90:	4623      	mov	r3, r4
 8006b92:	d807      	bhi.n	8006ba4 <memmove+0x20>
 8006b94:	1e43      	subs	r3, r0, #1
 8006b96:	42a1      	cmp	r1, r4
 8006b98:	d008      	beq.n	8006bac <memmove+0x28>
 8006b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ba2:	e7f8      	b.n	8006b96 <memmove+0x12>
 8006ba4:	4402      	add	r2, r0
 8006ba6:	4601      	mov	r1, r0
 8006ba8:	428a      	cmp	r2, r1
 8006baa:	d100      	bne.n	8006bae <memmove+0x2a>
 8006bac:	bd10      	pop	{r4, pc}
 8006bae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bb6:	e7f7      	b.n	8006ba8 <memmove+0x24>

08006bb8 <_sbrk_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	4d06      	ldr	r5, [pc, #24]	; (8006bd4 <_sbrk_r+0x1c>)
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	4608      	mov	r0, r1
 8006bc2:	602b      	str	r3, [r5, #0]
 8006bc4:	f7fb fe56 	bl	8002874 <_sbrk>
 8006bc8:	1c43      	adds	r3, r0, #1
 8006bca:	d102      	bne.n	8006bd2 <_sbrk_r+0x1a>
 8006bcc:	682b      	ldr	r3, [r5, #0]
 8006bce:	b103      	cbz	r3, 8006bd2 <_sbrk_r+0x1a>
 8006bd0:	6023      	str	r3, [r4, #0]
 8006bd2:	bd38      	pop	{r3, r4, r5, pc}
 8006bd4:	200007d8 	.word	0x200007d8

08006bd8 <memcpy>:
 8006bd8:	440a      	add	r2, r1
 8006bda:	4291      	cmp	r1, r2
 8006bdc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006be0:	d100      	bne.n	8006be4 <memcpy+0xc>
 8006be2:	4770      	bx	lr
 8006be4:	b510      	push	{r4, lr}
 8006be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bee:	4291      	cmp	r1, r2
 8006bf0:	d1f9      	bne.n	8006be6 <memcpy+0xe>
 8006bf2:	bd10      	pop	{r4, pc}

08006bf4 <_realloc_r>:
 8006bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf8:	4680      	mov	r8, r0
 8006bfa:	4614      	mov	r4, r2
 8006bfc:	460e      	mov	r6, r1
 8006bfe:	b921      	cbnz	r1, 8006c0a <_realloc_r+0x16>
 8006c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c04:	4611      	mov	r1, r2
 8006c06:	f7ff bc49 	b.w	800649c <_malloc_r>
 8006c0a:	b92a      	cbnz	r2, 8006c18 <_realloc_r+0x24>
 8006c0c:	f7ff fbda 	bl	80063c4 <_free_r>
 8006c10:	4625      	mov	r5, r4
 8006c12:	4628      	mov	r0, r5
 8006c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c18:	f000 f81b 	bl	8006c52 <_malloc_usable_size_r>
 8006c1c:	4284      	cmp	r4, r0
 8006c1e:	4607      	mov	r7, r0
 8006c20:	d802      	bhi.n	8006c28 <_realloc_r+0x34>
 8006c22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c26:	d812      	bhi.n	8006c4e <_realloc_r+0x5a>
 8006c28:	4621      	mov	r1, r4
 8006c2a:	4640      	mov	r0, r8
 8006c2c:	f7ff fc36 	bl	800649c <_malloc_r>
 8006c30:	4605      	mov	r5, r0
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d0ed      	beq.n	8006c12 <_realloc_r+0x1e>
 8006c36:	42bc      	cmp	r4, r7
 8006c38:	4622      	mov	r2, r4
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	bf28      	it	cs
 8006c3e:	463a      	movcs	r2, r7
 8006c40:	f7ff ffca 	bl	8006bd8 <memcpy>
 8006c44:	4631      	mov	r1, r6
 8006c46:	4640      	mov	r0, r8
 8006c48:	f7ff fbbc 	bl	80063c4 <_free_r>
 8006c4c:	e7e1      	b.n	8006c12 <_realloc_r+0x1e>
 8006c4e:	4635      	mov	r5, r6
 8006c50:	e7df      	b.n	8006c12 <_realloc_r+0x1e>

08006c52 <_malloc_usable_size_r>:
 8006c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c56:	1f18      	subs	r0, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	bfbc      	itt	lt
 8006c5c:	580b      	ldrlt	r3, [r1, r0]
 8006c5e:	18c0      	addlt	r0, r0, r3
 8006c60:	4770      	bx	lr
	...

08006c64 <_init>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	bf00      	nop
 8006c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6a:	bc08      	pop	{r3}
 8006c6c:	469e      	mov	lr, r3
 8006c6e:	4770      	bx	lr

08006c70 <_fini>:
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	bf00      	nop
 8006c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c76:	bc08      	pop	{r3}
 8006c78:	469e      	mov	lr, r3
 8006c7a:	4770      	bx	lr
