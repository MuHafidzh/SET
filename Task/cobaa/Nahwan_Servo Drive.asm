;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Wed Oct 18 2023
; Processor: 80C31
; Compiler:  ASEM-51 (Proteus)
;====================================================================

$NOMOD51
$INCLUDE (8051.MCU)

;====================================================================
; DEFINITIONS
;====================================================================

;====================================================================
; VARIABLES
;====================================================================

;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================

      ; Reset Vector
      org   0000h
      jmp   Start

;====================================================================
; CODE SEGMENT
;====================================================================

      org   0100h

Start:	
      ; Write your code here
      

Loop:
      CALL SERIAL_INIT
      CALL SERIAL_RECEIVE
      CALL CALC
      MOV R2, #20 ;Pulse repetition amount
      CALL GEN_PULSE
      jmp Loop
      
      
SERIAL_INIT:
      MOV SCON,#01010010b
      MOV TMOD,#00100000b
      MOV TH1,#253d
      SETB TR1
      RET
      
SERIAL_RECEIVE:
      MOV A, SBUF
      CLR RI
      MOV R7, A
      JNB RI,$
      CLR TR1
      RET
      
DELAY_10ms:
      MOV TMOD, #00010000B	; Timer Mode 1
      MOV TL1, #LOW (-10000)
      MOV TL1, #HIGH (-10000)
      CLR TF1
      SETB TR1
      JNB TF1, $
      CLR TR1
      RET

GEN_PULSE:
      ;Generate pulse based on 8 bit input range
      ;Duty cycle range 544us to 2400us
      MOV TMOD, #011H
      ;Set timer 0 delay as duty cycle
      MOV TH0, R3
      MOV TL0, R4
      
      ;Set timer 1 delay as 20ms period
      MOV TH1, #0B1H 
      MOV TL1, #0E1H 
      
      ;Start pulse
      SETB P1.0 ;Signal high
      SETB TR0 ;Start timer 0
      SETB TR1 ;Start timer 1
      WAIT1:JNB TF0, WAIT1 ;Wait till the TF0 flag is set 
      CLR P1.0 ;Signal low
      WAIT2:JNB TF1, WAIT2 ;Wait till the TF1 flag is set 
      CLR TF0 ;Clear the flag manually
      CLR TR0 ;Stop the timer 0
      CLR TF1 ;Clear the flag manually
      CLR TR1 ;Stop the timer 0
      DJNZ R2, GEN_PULSE ;Generate Pulse R2 times
      RET 
      
CALC:
      ;8 bit input to time delay conversion
      ;Equation: y = 64992 - 7x
      ;Input: R7
      CALL MULTIPLY ;Multiply 7x
      CALL SUBSTRACT ;Substract 64992 - 7x
      ;Output low-byte: R4
      ;Output high-byte: R3
      
MULTIPLY: 
       ;Multiply R7 by 7
       MOV A, #07h ;Move the 7 into the Accumulator
       MOV B,R7 ;Move R7 into B
       MUL AB   ;Multiply the two values
       MOV R5,B ;Move B (the high-byte) into R5
       MOV R6,A ;Move A (the low-byte) into R6

       ;Return - answer is now in R5 and R6
       RET
      
SUBSTRACT:
	;Subtract (low-byte), #E0 by R6, store result in R4
	MOV A, #0E0H  ;Move the low-byte of FDE0 into the accumulator
	CLR C     ;Always clear carry before first subtraction
	SUBB A,R6 ;Subtract the second low-byte from the accumulator
	MOV R4,A  ;Move the answer to the low-byte of the result

	;Subtract (high-byte), #FD by R5, store result in R3
	MOV A, #0FDH  ;Move the high-byte of FDE0 into the accumulator
	SUBB A, R5 ;Subtract the second high-byte from the accumulator
	MOV R3,A  ;Move the answer to the high-byte of the result

	;Return - answer now resides in R3 and R4.
  RET
      
;====================================================================
      END
