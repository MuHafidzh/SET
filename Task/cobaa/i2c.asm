;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Thu Apr 25 2024
; Processor: 80C31
; Compiler:  ASEM-51 (Proteus)
;====================================================================

$NOMOD51
$INCLUDE (8051.MCU)

;====================================================================
; DEFINITIONS
;====================================================================

;====================================================================
; VARIABLES
;====================================================================

;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================

      ; Reset Vector
      org   0000h
      jmp   Start

;====================================================================
; CODE SEGMENT
;====================================================================

      org   0100h
Start:	
	  call init_lcd
Loop:	
	  call lcd_clear
      ; Write your code here
      call i2c_start
      mov a,#11010000b
      call i2c_write
      call i2c_ack_tx
      mov a,#02;send address (second)
      call i2c_write
      call i2c_ack_tx
      ;call i2c_stop

	  call i2c_start
      mov a,#11010001b
      call i2c_write
      call i2c_ack_tx
      call i2c_read
	  call i2c_stop
      mov r1,a
      call lcd_printhex
      
      mov r0,#'-'
      call lcd_print

      call i2c_start
      mov a,#11010000b
      call i2c_write
      call i2c_ack_tx
      mov a,#00 ;send address (minute)
      call i2c_write
      call i2c_ack_tx
      ;call i2c_stop

	  call i2c_start
      mov a,#11010001b
      call i2c_write
      call i2c_ack_tx
      call i2c_read
	  call i2c_stop
      mov r1,a
      call lcd_printhex

      mov r0,#'-'
      call lcd_print

      call i2c_start
      mov a,#11010000b
      call i2c_write
      call i2c_ack_tx
      mov a,#01;send address (minute)
      call i2c_write
      call i2c_ack_tx
      ;call i2c_stop

	  call i2c_start
      mov a,#11010001b
      call i2c_write
      call i2c_ack_tx
      call i2c_read
	  call i2c_stop
      mov r1,a
      call lcd_printhex

      jmp Loop

i2c_start:
      setb p1.0 ;SCL
      setb p1.1 ;SDA
      clr  p1.1
      clr p1.0
      ret

i2c_stop:
      clr p1.1
      setb p1.0
      ret

i2c_clk:
      call delay
      setb p1.0
      call delay
      clr p1.0
      call delay
       ret

i2c_nack:
      setb p1.1
      setb p1.0
      clr p1.0
       ret

i2c_ack_rx:
      clr p1.1
      setb p1.0
      clr p1.0
	  ret


i2c_ack_tx:
       setb p1.0
       jb p1.1, failed
       clr p1.2
       jmp end_ack
failed:
       setb p1.2
end_ack:
       clr p1.0
       ret

i2c_write:
      mov R0,#08
loop_i2c_write:
      rlc a
      mov p1.1,c
      call i2c_clk
      dec R0
      cjne R0,#00,loop_i2c_write
      ret

 i2c_read:
      mov R0,#08
	  mov a,#00
loop_i2c_read:
      mov c,p1.1
      rlc a
      call i2c_clk
      dec R0
      cjne R0,#00,loop_i2c_read
      ret

delay:
	mov r6,#10
	mov r7,#10
 delay_loop2:
 delay_loop:
	dec r6
    nop
    cjne r6,#00, delay_loop
    dec r7
	cjne r7,#00, delay_loop
      ret

init_lcd:
      mov r1,#023h
      mov r0,#00111000b ;function set
	  call send_inst
      mov r0,#00000110b ;entry mode
	  call send_inst
      mov r0,#00001100b ;display on/off control
	  call send_inst
      mov r0,#00000001b ;clear display
	  call send_inst
      ret

lcd_clear:
      mov r0,#00000001b ;clear display
	  call send_inst
      ret

lcd_printhex:
      mov a,r1
      mov b,#010h
      div ab
      
      add a,#030h
      mov r0,a
	  call send_data

      mov a,b
      add a,#030h
      mov r0,a
	  call send_data
      ret

lcd_print:
	  call send_data
      ret

send_inst:
      clr p2.6
      setb p2.7
      mov p3,r0
	  call delay_lcd
      clr p2.7
      setb p2.7
	  call delay_lcd
      ret
send_data:
      setb p2.6
      setb p2.7
      mov p3,r0
	  call delay_lcd
      clr p2.7
      setb p2.7
	  call delay_lcd
      ret

delay_lcd:
	mov r6,#055
	mov r7,#055
 delay_loop2lcd:
 delay_looplcd:
	dec r6
    nop
    cjne r6,#00, delay_looplcd
    dec r7
	cjne r7,#00, delay_loop2lcd
    ret
;====================================================================
      END